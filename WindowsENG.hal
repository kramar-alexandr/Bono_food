external inner function Boolean HasPreferedOfficialSerNr();
external inner function Boolean HasInvoiceOfficialSerNr();
external inner function Boolean HasCategories();
external inner function Boolean HasContactClassification();
external inner function Boolean HasModSO();
external inner function Boolean HasModQT();
external inner function Boolean HasModPOS();
external inner function Boolean HasAdvancedCRM();
external inner function Boolean HasModCheck();
external inner function Boolean HasModCO();
external inner function Boolean HasLimitedAccess();
external inner function Boolean AcceptanceStatusColumnTest(string);
external inner function Boolean HasCustomerStatusReport();
external inner function Boolean HasFreightAdvanced();
external inner function Boolean UseTaxTemplatesforTaxCalc();
external inner function real VATZoneButtonsLabelsENG(real,real,real,real);
external inner function Boolean HasBuyBack();
external inner function Boolean HasStandardCRM();
external inner function Boolean HasEMail();
external inner function Boolean HasAdvancedProduction();
external inner function Boolean HasDownpayments();
external inner function Boolean HasSalesman();
external inner function Boolean HasVATZone();
external inner function Boolean HasSalesmanBonus();
external inner function Boolean HasSalesGroup();
external inner function Boolean HasAdvancedPricing();
external inner function Boolean HasModSVO();
external inner function Boolean HasWithholdingTax();
external inner function Boolean HasItemGroups();
external inner function Boolean HasConsStockMoveInvoices();
external inner function Boolean HasIntegratedNL();
external inner function string 60 UserDefined(string,string);
external inner function string 255 VATZoneNameENG();
external inner function Boolean HasModCRM();
external inner function Boolean HasPersons();
external inner function Boolean HasModWHM();
external inner function Boolean HasETaxDocuments();
external inner function Boolean HasReturnedGoods();
external inner function Boolean HasModNL();
external inner function Boolean HasNumberSeries();
external inner function Boolean HasCountryPerCustomer();
external inner function Boolean HasPositions();
external inner function Boolean HasSerialNumbers();
external inner function Boolean HasCustItem();
external inner function Boolean HasLanguages();
external inner function Boolean HasModTS();
external inner function Boolean HasBranch();
external inner function Boolean HasObjects();
external inner function Boolean HasRoute();
external inner function Boolean HasOfficialSerNr();
external inner function Boolean HasTREO();
external inner function Boolean IsEnterprise();
external inner function Boolean StandardHansa();
external inner function Boolean HasModIN();
external inner function Boolean HasModSL();
external inner function Boolean HasMultiLocations();
external inner function Boolean HasModPO();
external inner function Boolean HasMultiCurrency();
external inner function Boolean HasVarieties();
external inner function Boolean HasBase2();
external inner function Boolean HasApprovals();
external inner function Boolean HasModPL();
external inner function Boolean HasRetGoodsToSupp();
external inner function Boolean HasTaxMatrix();
external inner function Boolean HasQualityControl();
external inner function Boolean HasAdvancedStock();
external inner function Boolean HasModRent();
external inner function Boolean HasExtTax();
external inner function Boolean HasModProd();
external inner function Boolean HasThrouLocation();
external inner function Boolean HasDepartments();
external inner function Boolean HasSecondQuantity();

external inner function Boolean HasJewelleryInterface();
external inner function Boolean HasCharts();
external inner function Boolean HasItemClassification();
external inner function string 255 VATZoneEditFieldLabelENG(Integer);
external inner procedure RateField(real,real,real,string,integer,string,boolean,real,real,string,boolean);

SetLangMode(LangEnglish,"ENG",2);

procedure TSERW2(Boolean gtcol)
begin
  real h,h1,h2,h3,h4,h5,v;

  h = 8; v = 60;
  h1=24; h2=h1+80; h3=h2+80; h4=h3+80; h5=h4+80;
  if (GuiType==kGuiCocoa or GuiType==kGuiiPhone) then begin
    SetWRect(20,80,670,351);
    Sizeable(-1,-1,0,0);
    MatrixBegin(h,v,-31,-20,IVSerRowType,199);
    MatCol(1,h1,"From No.",0,TSerStart,false,0);
    MatCol(1,h2,"To No.",0,TSerEnd,false,0);
    MatCol(1,h3,"From Date",0,StartDate,false,0);
    MatCol(1,h4,"To Date",0,EndDate,false,0);
    MatCol(1,h5,"Comment",0,TSerCom,false,0);
    MatCol(1,-170,"Exp. prefix",0,ExpPrefix,false,0);
    if (gtcol and Left(BuildProductCode,5)!="Books") then begin
      MatCol(1,-100,"#N/L#",0,DonotGenTrans,false,SetSClass);
    end;
  end else begin
    SetWRect(20,80,632,357);
    Sizeable(-1,-1,0,0);
    StaticText(h+h1+5,v-23,"No.",false);
    StaticText(h+h3+5,v-23,"Date",false);
    MatrixBegin(h,v,-31,-20,IVSerRowType,199);
    MatCol(1,h1,"From",0,TSerStart,false,0);
    MatCol(1,h2,"To",0,TSerEnd,false,0);
    MatCol(1,h3,"From",0,StartDate,false,0);
    MatCol(1,h4,"To",0,EndDate,false,0);
    MatCol(1,h5,"Comment",0,TSerCom,false,0);
    MatCol(1,-140,"Exp. prefix",0,ExpPrefix,false,0);
    if (gtcol and Left(BuildProductCode,5)!="Books") then begin
      MatCol(1,-70,"#N/L#",0,DonotGenTrans,false,SetSClass);
    end;
  end;
  /*The name DonotGenTrans is beacause of default value whcich is zero*/
  EndMatrix;
  //SpecialMenu("Magic Serial Help",' ',1,"MagicSerialHelp");
  return;
end;

procedure TSERW_ENG() begin
  TSERW2(HasModNL);
  return;
end;

window PIDClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h2,h3,v,vs;
  WindowBegin("Purchase Item",PIDClass,CGview,-);
  SetWRect(20,80,527,380);
//  Sizeable(-1,-1,0,0);
  UseView(PIVc);
  Tile(0,90,false,"",ItemCode);
  v = 10; vs = 20; h = 80; h2 = 230; h3 = 380;
  EditField(h,v, 82,"Item",Normal,ItemCode,false,INSClass);
  EditField(h2,v,-40,"Desc.",Normal,Comment,false,0);
  EditField(h,v+=vs ,82,"#Supplier#",Normal,VECode,false,VESClass);
  EditField(h2,v,-40,"Name",Normal,VEName,false,0);
  EditField(h,v+=vs ,82,"Location",Normal,Location,false,LocationSClass);
  TileButton(1,"Price");
  TileButton(2,"Texts");
  TileButton(3,"Days"); //EBS
  CheckBox(h2+100,v,0,"Default",DefaultChoice);
  Tile(1,190,false,"1",PurPrice);
  EditField(h=120,v=6 ,82,"Price",Normal,PurPrice,true,0);
  EditField(h3,v ,70,"Default Customs Cost",Normal,PurchaseCost,true,0);
  EditField(h,v+=vs,70,"Currency",Normal,CurncyCode,true,CurncyCodeSClass);
  EditField(h3,v ,70,"Unit Conv.",Normal,PIFactor,true,0);
  EditField(h,v+=vs ,82,"#Supplier# Item",Normal,VEItemCode,false,0);
  EditField(h3,v ,70,"#Supplier# Unit",Normal,VEUnit,false,UnitSClass);
/*  EditField(h,v+=vs ,200,"Comment",Normal,Comment,false,0);*/
  EditField(h,v+=vs ,82,"Norm Ord Qty",Normal,NormPOQty,true,0);
  EditField(h3,v ,70,"Min Ord Qty",Normal,MinPOQty,true,0);
  EditField(h,v+=vs ,82,"Producer",Normal,Manufacturer,false,VESClass);
  EditField(h3,v ,70,"Country of Origin",Normal,OrgCountry,false,CountrySClass);
  if (HasSalesman or HasSalesmanBonus) then begin
    EditField(h,v+=vs,70,"#Salesman#",Normal,SalesMan,false,UserSClass);
  end;
  if (HasSalesGroup) then begin
    EditField(h3,v,70,"Sales Group",Normal,SalesGroup,false,SalesGroupSClass);
  end;
  EditField(h,v+=vs ,70,"Delivery Days",Normal,PlannedDelDays,false,0);
  EditField(h,v+=vs ,70,"Min. best before days",Normal,MinBestBeforeDays,false,0); //EBS
  if (StandardHansa==false) then begin
    ButtonFrame(h3,v+=vs,123,2,"Def. #Stock# Type");
    RadioButton(h3,v,kStockTypePurchased,0,"Purchase",DefStockType);
    RadioButton(h3,v+=16,kStockTypeConsignment,0,"Consignment",DefStockType);
  end;
  Tile(2,100,true,"2",Math);
  MatrixBegin(4,v=24,-32,-20,-,99);
  MatCol(1,24,"Text",0,Text,false,0);
  EndMatrix;
  Tile(3,190,false,"1",MonFlag);
  CheckBox(h=50,v=10,0,"Mondays",MonFlag);
  CheckBox(h,v+=16,0,"Tuesdays",TueFlag);
  CheckBox(h,v+=16,0,"Wednesdays",WedFlag);
  CheckBox(h,v+=16,0,"Thursdays",ThuFlag);
  CheckBox(h,v+=16,0,"Fridays",FriFlag);
  CheckBox(h,v+=16,0,"Saturdays",SatFlag);
  CheckBox(h,v+=16,0,"Sundays",SunFlag);
  EndWindow;
end;

window INDClass:8
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  integer tilenr;
  real h,h1,h2,h3,h4,h5,h6,v,vm,vs;
  string 255 label;
  record CYBlock CYb;

  BlockLoad(CYb);

  WindowBegin("Item",INDClass,CGview,-);
  SetWRect(20,80,830,400);
  Sizeable(-1,-1,-1,0);
  DynamicWindow;
  UseView(INVc);
  if (GuiType==kGuiAndroid) then begin
    ToolBar;
    PushButton(-110,5,-10,25,ToolImagePicker,"Image");
    EndToolBar;
  end;

  if (HasJewelleryInterface) then begin
    Tile(0,107,false,"",Code);
  end else begin
    Tile(0,87,false,"",Code);
  end;
  v = 6; vs = 20; h = 155; h1 = 300; h2 = 385; h3 = 395; h4 = 285; h5 = 433;
  EditField(h,v, 150,"No.",Normal,Code,false,0);
  EditField(h2,v,80,"Group",Normal,Group,false,ITSClass);
  EditField(h,v+=vs,-40,"Description",Normal,Name,false,0);
  if (HasJewelleryInterface) then begin
    EditField(h,v+=vs,150,"Alternative Code",Normal,AlternativeCode,false,0);
  end;
  tilenr = 1;
  TileButton(tilenr,"Pricing"); tilenr = tilenr + 1;
  if (HasJewelleryInterface) then begin
    TileButton(tilenr,"#Jewellery#"); tilenr = tilenr + 1;
    TileButton(tilenr,"Watch"); tilenr = tilenr + 1;
  end;
  TileButton(tilenr,"#Stock#"); tilenr = tilenr + 1;
  if (StandardHansa==false) then begin
    TileButton(tilenr,"Warehouse"); tilenr = tilenr + 1;
  end;
  if (UserCanAction("ViewCostPrice",true)) then begin
    TileButton(tilenr,"Costs"); tilenr = tilenr + 1;
  end;
  TileButton(tilenr,"Recipe"); tilenr = tilenr + 1;
  TileButton(tilenr,"A/C"); tilenr = tilenr + 1;
  if (GuiType==kGuiiPhone) then begin
    TileButton(tilenr,"Image"); tilenr = tilenr + 1;
  end;
  TileButton(tilenr,"Varieties"); tilenr = tilenr + 1;
  TileButton(tilenr,"Texts"); tilenr = tilenr + 1;
  TileButton(tilenr,"Cost Model"); tilenr = tilenr + 1;
  if (StandardHansa==false) then begin
    TileButton(tilenr,"User Values"); tilenr = tilenr + 1;
  end;
  TileButton(tilenr,"Notes"); tilenr = tilenr + 1;
  if (HasCharts) then begin
    TileButton(tilenr,"BI"); tilenr = tilenr + 1;
  end;
  tilenr = 1;
  CheckBox(h,v+=vs,0,"Closed",Terminated);
  CheckBox(h2,v,0,"Not For Sales",NotForSales);
  Tile(tilenr,209,false,tilenr,Unittext); tilenr = tilenr + 1;
  EditField(h,v=6 ,100,"Unit",Normal,Unittext,false,UnitSClass);
  if (HasJewelleryInterface) and (UserCanAction("ViewCostPrice",true)) then begin
    EditField(h,v+=vs,100,"Cost Price",Normal,InPrice,true,0);
  end;
  EditField(h,v+=vs,100,"Base Price",Normal,UPrice1,true,0);
  EditField(h,v+=vs,100,"Base Price Change",ViewOnly,LastBasePriceChange,true,0);
  EditField(h,v+=vs,100,"Price Factor",Normal,PriceFactor,true,0);
  EditField(h,v+=vs,100,"Item Formula",Normal,CalcPrice,false,CPMSClass);
  EditField(h,v+=vs,100,"Markup %",Normal,Markup,true,0);
  EditField(h,v+=vs,100,"Bonus %",Normal,Bonus,true,0);
  EditField(h,v+=vs,-240,"Objects",Normal,Objects,false,ObjSClass);
  if (HasItemClassification) then begin
    EditField(h,v+=vs,-240,"Classification",Normal,DispGroups,false,DISClass);
  end;
  if (StandardHansa==false) then begin
    ButtonFrame(h1,v=24,120,4,"Item Type");
  end else begin
    ButtonFrame(h1,v=24,120,3,"Item Type");
  end;
  RadioButton(h1,v,kItemTypePlain,0,"Plain",ItemType);
  RadioButton(h1,v+=16,kItemTypeStocked,0,"#Stocked# Item",ItemType);
  RadioButton(h1,v+=16,kItemTypeStructured,0,"Structured Item",ItemType);
  if (StandardHansa==false) then begin
    RadioButton(h1,v+=16,kItemTypeService,0,"Service",ItemType);
  end;
  EndFrame;

  Pict_Field(-205,8,-35,178,"");
  if (GuiType==kGuiCocoa) then begin
    PushButton(-160,182,-80,202,ToolImagePicker,"Add picture");
  end;
  if (StandardHansa==false) then begin
    CheckBox(h1,v+=32,0,"Treat Item as Material on Project",ItemMaterial);
  end;
  CheckBox(h1,v+=16,0,"Require best before date",EBS_ReqBestBefore); //EBS
  if (HasJewelleryInterface) then begin
    Tile(tilenr,110,false,tilenr,Metal); tilenr = tilenr + 1;
    EditField(h,v=6, 140,"Metal",Normal,Metal,false,0);
    EditField(h,v+=vs, 140,"Weight",Normal,RowWeight,false,0);
    EditField(h,v+=vs, 140,"Size",Normal,Size,false,0);
    EditField(h,v+=vs, 140,"Length",Normal,Length,false,0);
    EditField(h,v+=vs, 140,"Reference",Normal,Reference,false,0);
    v = 6;
    EditField(h5,v, 140,"Major Stone Detail",Normal,MajStoneDet,false,0);
    EditField(h5,v+=vs, 140,"#Colour#",Normal,Colour,false,0);
    EditField(h5,v+=vs, 140,"Clarity",Normal,Clarity,false,0);
    EditField(h5,v+=vs, 140,"Certificate",Normal,Cert,false,0);
    EditField(h5,v+=vs, 140,"Minor Stone Detail",Normal,MinStoneDet,false,0);
    Tile(tilenr,90,false,tilenr,WatchBrand); tilenr = tilenr + 1;
    EditField(h,v=6, 140,"Watch Brand",Normal,WatchBrand,false,0);
    EditField(h,v+=vs, 140,"Style Name",Normal,StyleName,false,0);
    EditField(h,v+=vs, 140,"Watch Metal",Normal,WatchMetal,false,0);
    EditField(h,v+=vs, 140,"Movement",Normal,Movement,false,0);
    v = 6;
    EditField(h5,v, 140,"Bracelet/Strap",Normal,BrcStr,false,0);
    EditField(h5,v+=vs, 140,"Gender",Normal,Gender,false,0);
    EditField(h5,v+=vs, 140,"Other",Normal,Other,false,0);
    EditField(h5,v+=vs, 140,"Other2",Normal,Other2,false,0);
  end;
  Tile(tilenr,170,false,tilenr,MinLevel);  tilenr = tilenr + 1; // Need to clean this Tile up!
  v = 6;
  vm = v;
  ButtonFrame(h1,v+=24,143,3,"Serial Number Tracking");
  RadioButton(h1,v,0,0,"None",SerNrf);
  RadioButton(h1,v+=16,1,0,"Unit Number",SerNrf);
  RadioButton(h1,v+=16,2,0,"Batch Number",SerNrf);
  CheckBox(h1+200,v,0,"Do not Require Batch No. on POS Invoice",DonotRequireBatchNrOnIVCash);
  EditField(h,v=6,100,"Minimum Level",Normal,MinLevel,true,0);
  EditField(h,v+=vs,100,"Maximum Level",Normal,MaxLevel,true,0);
  EditField(h,v+=vs  ,100,"Department",Normal,Department,false,DepSClass);
  EditField(h,v+=vs  ,100,"Shelf Code",Normal,InvCode,false,0);
  EditField(h,v+=vs,100,"Default Source",Normal,DefaultSource,false,SourceSClass);
  EditField(h5,v ,50,"Environment Tax per #Kilo#",Normal,RepaPricePerWeight,true,0);
  EditField(h6=650,v ,80,"Default Order Type",Normal,DefOrderType,false,SetSClass);
  if (StandardHansa==false) then begin
    EditField(h,v+=vs ,100,"Hazard Level",Normal,HazLevCode,false,HazLevSClass);
    EditField(h5,v ,50,"Alcohol %",Normal,AlcPrc,true,0);
	if (HasLocalization("PRT")) then begin
	EditField(h6,v, 80,"Stock Item Type",Normal,StockItemType,false,SetSClass);
	end;
  end;
  EditField(h,v+=vs ,100,"Unit 2",Normal,Unittext2,false,UnitSClass);
  EditField(h5,v ,50,"Conversion 1",Normal,Conversion1,true,0);
  EditField(h,v+=vs,100,"Unit Coefficient",Normal,UnitCoefficient,true,0);
  EditField(h5,v ,50,"Conversion 2",Normal,Conversion2,true,0);
  if (StandardHansa==true) then begin
    EditField(h,v+=vs ,50,"Item Width",Normal,Width,true,0);
    EditField(h4,v ,50,"Height",Normal,Height,true,0);
    EditField(h5,v ,50,"Depth",Normal,Depth,true,0);
    EditField(h,v+=vs ,50,"Item Volume",Normal,Volume,true,0);
    EditField(h4,v ,50,"Tihedus",Normal,Density,true,0);
    EditField(h5,v ,50,"Weight",Normal,Weight,true,0);
  end;
  if (StandardHansa==false) then begin
    Tile(tilenr,170,false,tilenr,LocArea);  tilenr = tilenr + 1;
    EditField(h,vm=(v=6) ,100,"Default Pallet Item",Normal,DefPalletItem,true,INSClass);
    EditField(h5,v ,80,"Picking Area",Normal,PickArea,false,LocAreaSClass);
    EditField(-120,v ,80,"Def. pick pos.",Normal,EBS_DefPickPos,false,PosSClass); //EBS
    EditField(h,v+=vs ,100,"Default Location Area",Normal,LocArea,false,LocAreaSClass);
    EditField(h5,v ,50,"Pallets In Picking Area",Normal,PalletsInPickArea,true,0);
    EditField(h,v+=vs ,50,"Max. Qty on Pallet",Normal,QtyonPallet,true,0);
    EditField(h4,v ,50,"Pallet Layers",Normal,PalletLayers,true,0);
    EditField(h5,v ,50,"Qty per Layer",Normal,QtyonPalletLayer,true,0);
    EditField(h,v+=vs ,50,"Full Pallet Width",Normal,PalletWidth,true,0);
    EditField(h4,v ,50,"Height",Normal,PalletHeight,true,0);
    EditField(h5,v ,50,"Depth",Normal,PalletDepth,true,0);
    EditField(h,v+=vs ,50,"Default Position Width",Normal,DefPosWidth,true,0);
    EditField(h4,v ,50,"Height",Normal,DefPosHeight,true,0);
    EditField(h5,v ,50,"Depth",Normal,DefPosDepth,true,0);
    EditField(h,v+=vs ,50,"Item Width",Normal,Width,true,0);
    EditField(h4,v ,50,"Height",Normal,Height,true,0);
    EditField(h5,v ,50,"Depth",Normal,Depth,true,0);
    EditField(h,v+=vs ,50,"Item Volume",Normal,Volume,true,0);
    EditField(h4,v ,50,"Density",Normal,Density,true,0);
    EditField(h5,v ,50,"Net Weight",Normal,NetWeight,true,0);
    EditField(h,v+=vs ,50,"Min. pick. area qty",Normal,UserVal1,true,0); //EBS
    EditField(h5,v ,50,"Weight",Normal,Weight,true,0); //EBS edit
  end;
  if (UserCanAction("ViewCostPrice",true)) then begin
  Tile(tilenr,190,false,tilenr,InPrice);  tilenr = tilenr + 1;
  EditField(h,vm=(v=6),100,"Cost Price",Normal,InPrice,true,0);
  if (StandardHansa==false) then begin
    EditField(h5,v,70,"Cost Price Change",ViewOnly,LastPriceChange,true,0);
  end else begin
    EditField(h3,v,70,"Cost Price Change",ViewOnly,LastPriceChange,true,0);
  end;
  if (StandardHansa==false) then begin
    EditField(h,v+=vs ,100,"Cost Price in Base 2",Normal,InPriceB2,true,0);
    ButtonFrame(h1,v+=24,200,4,"Upd. Cost Price at Goods Receipt");
  end else begin
    ButtonFrame(h1,v+=40,210,4,"Upd. Cost Price at Goods Receipt");
  end;
  RadioButton(h1,v,0,0,"No",UpdateCost);
  RadioButton(h1,v+=16,1,0,"Last Purchase Cost (incl. extras)",UpdateCost);
  RadioButton(h1,v+=16,2,0,"Weighted Average",UpdateCost);
  RadioButton(h1,v+=16,3,0,"Last Purchase Cost (excl. extras)",UpdateCost);
  ButtonFrame(h5=540,v=v-3*16,200,3,"Upd. Cost Price at #Stock# Revaluation");
  RadioButton(h5,v,0,0,"No",SRUpdateCost);
  RadioButton(h5,v+=16,1,0,"Last Revaluation Cost",SRUpdateCost);
  RadioButton(h5,v+=16,2,0,"Weighted Average",SRUpdateCost);
  if (StandardHansa==false) then begin
    EditField(h,v=vm+2*vs,100,"Extra Cost",Normal,ExtraCost,true,0);
  end else begin
    EditField(h,v=vm+vs,100,"Extra Cost",Normal,ExtraCost,true,0);
  end;
  EditField(h,v+=vs ,100,"Weighted Average",Normal,WeighedAvPrice,true,0);
  if (StandardHansa==false) then begin
    EditField(h,v+=vs ,100,"Weighted Av., Base 2",Normal,WeighedAvPriceB2,true,0);
  end;
  EditField(h,v+=vs ,100,"Last Pur. Cost (incl. extras)",Normal,LastPurchPrice,true,0);
  EditField(h,v+=vs ,100,"Last Pur. Price (excl. extras)",Normal,LastPurchPrice2,true,0);
  EditField(h,v+=vs ,100,"Last Purchase Currency",Normal,LastPurchCurncyCode,false,CurncyCodeSClass);
  EditField(h,v+=vs ,100,"Fixed Freight",Normal,FixedFreight,true,0);
  CheckBox(h1,v,0,"Include Item Fixed Charge",InclItemFreight);
  CheckBox(h5,v,0,"Has Excise",HasExcise);
  end;
  Tile(tilenr,170,false,tilenr,Recepy);  tilenr = tilenr + 1;
  EditField(h,v=6 ,120,"Recipe",Normal,Recepy,false,RecSClass);
  CheckBox(h1,v,0,"Paste Components during Entry",ExplodeRec); // "Show components on documents" is better English but VERY confusing
  EditField(h,v+=vs ,120,"Invoice Recipe",Normal,InvRecepy,false,RecSClass);
  EditField(h2,v,150,"Barcode",Normal,BarCode,false,0);
  EditField(h,v+=vs ,120,"Contract Item",Normal,ContractItem,false,INSClass);
  EditField(h2,v,150,"Commodity Code",Normal,EUCodex,false,CommoditySClass);
  v = v + vs;
  if (StandardHansa==false) then begin
    EditField(h,v,120,"Rental Invoicing",Normal,RentalItem,false,INSClass);
  end;
  EditField(h2,v,150,"EKN Code",Normal,EKNCode,false,0); // i think it is same as Commodity Code
  if (StandardHansa==false) then begin
    EditField(h2,v+=vs,150,"Classification of Products and Services",Normal,CPSCode,false,0);
  end;
  EditField(h,v+=vs ,120,"Warranty Months",Normal,WarrantyLength,true,0);
  EditField(h2,v,150,"#Colour#",Normal,colnr,false,SetSClass);
  EditField(h,v+=vs,120,"Sort Code",Normal,SortCode,true,0);
  EditField(h,v+=vs,-40,"Alternative Code",Normal,AlternativeCode,false,0);
  EditField(h,v+=vs,-40,"Warning",Normal,WarnText1,false,0);
  Tile(tilenr,170,false,tilenr,SalesAcc);  tilenr = tilenr + 1;
  v = 6;
  vm = v;
  EditField(h,vm,55,"#Dom.# Sales A/C",Normal,SalesAcc,false,AccSClass);
  EditField(h,v+=vs,55,VATZoneNameENG & "Sales A/C",Normal,EUSalesAcc,false,AccSClass);
  EditField(h,v+=vs,55,"Export Sales A/C",Normal,ExpSalesAcc,false,AccSClass);
  if (StandardHansa==false) then begin
    EditField(h,v+=vs,55,"Serv. Invble Sales A/C",Normal,SVOInvbleSalesAcc,false,AccSClass);
//     EditField(h,v+=vs,55,"Serv. Warranty Sales A/C",Normal,SVOWarrantySalesAcc,false,AccSClass);
//     EditField(h,v+=vs,55,"Serv. Contract Sales A/C",Normal,SVOContractSalesAcc,false,AccSClass);
//     EditField(h,v+=vs,55,"Serv. Goodwill Sales A/C",Normal,SVOGoodwillSalesAcc,false,AccSClass);
  end;
  EditField(h,v+=vs,55,"Components Usage",Normal,CompUsage,false,AccSClass);
  EditField(h,v+=vs,55,"Proj. Materials Usage A/C",Normal,ProjMaterialsUsageAcc,false,AccSClass);

  EditField(h2=360,v=vm,55,"#Dom.# Cost A/C",Normal,CostAcc,false,AccSClass);
  EditField(h2,v+=vs,55,VATZoneNameENG & "Cost A/C",Normal,EUCostAcc,false,AccSClass);
  EditField(h2,v+=vs,55,"Export Cost A/C",Normal,ExpCostAcc,false,AccSClass);
  if (StandardHansa==false) then begin
    EditField(h2,v+=vs,55,"Serv. Invble Cost A/C",Normal,SVOInvbleCostAcc,false,AccSClass);
    EditField(h2,v+=vs,55,"Serv. Warranty Cost A/C",Normal,SVOWarrantyCostAcc,false,AccSClass);
    EditField(h2,v+=vs,55,"Serv. Contract Cost A/C",Normal,SVOContractCostAcc,false,AccSClass);
    EditField(h2,v+=vs,55,"Serv. Goodwill Cost A/C",Normal,SVOGoodwillCostAcc,false,AccSClass);
    EditField(h2,v+=vs,55,"Hotel WIP A/C",Normal,HotelWIPAcc,false,AccSClass);
  end;
  EditField(h2=530,v=vm,20,"#Dom.# #VAT# Code",Normal,VATCode,false,VATCodeSClass);
  EditField(h2,v+=vs,20,VATZoneEditFieldLabelENG(1) & "#VAT# Code",Normal,VATCodeEU,false,VATCodeSClass);
  EditField(h2,v+=vs,20,"Export #VAT# Code",Normal,VATCodeExp,false,VATCodeSClass);
  CheckBox(h2,v+=20,0,"Calculate Perception Taxes",Perceptions);
  if (StandardHansa==false) then begin
    CheckBox(h2,v+=16,0,"Calculate Withholding Taxes",Withholdings);
    EditField(h2=670,v=vm,50,"#Dom.# Tax Temp.",Normal,TaxTemplateCode,false,TaxTemplateSClass);
    EditField(h2,v+=vs,50,VATZoneEditFieldLabelENG(1) & "Tax Temp.",Normal,TaxTemplateCodeEU,false,TaxTemplateSClass);
    EditField(h2,v+=vs,50,"Export Tax Temp.",Normal,TaxTemplateCodeExp,false,TaxTemplateSClass);
  end;
  if (HasLocalization("GBR,LTU,POL")) then begin
    EditField(h2=680,v=vm,20,"Reverse VAT code",Normal,RvrsVATCode,false,VATCodeSClass);
  end;
  if (GuiType==kGuiiPhone or GuiType==kGuiAndroid) then begin
    Tile(tilenr,70,false,tilenr,-);  tilenr = tilenr + 1;
    AttachmentDisplay(10,10,200,200);
//    PushButton(30,10,-80,40,ToolImagePicker,"Take picture");
//    ControlLabel(0,0,0,0,"Take picture","SystemFont",17,kTextStyleBold,AdjCenter,patM4ReportsTextBlue);
  end;
  Tile(tilenr,70,false,tilenr,VARMask);  tilenr = tilenr + 1;
  EditField(h,v=6,-40,"Variety Mask",Normal,VARMask,false,VARMasksSClass);
  EditField(h,v+=vs,-40,"Report Order",Normal,VARRepOrder,false,VARMasksSClass);
  EditField(h,v+=vs,-40,"Subsets",Normal,VARSubsets,false,VARSubsetsSClass);
  Tile(tilenr,120,true,tilenr,Math);  tilenr = tilenr + 1;
  v = 24;
  MatrixBegin(4,v,-32,-40,-,99);
  MatCol(1,24,"Language",0,LangCode,false,LangSClass);
  MatCol(1,94,"Text",0,Text,false,0);
  EndMatrix;
  Tile(tilenr,220,false,tilenr,CostPerc);  tilenr = tilenr + 1;
  ButtonFrame(h=100,vm=(v=20),230,6,"Primary Cost Model");
  RadioButton(h,v,0,0,"Default",PrimaryCostModel);
  RadioButton(h,v+=16,1,0,"Cost Price",PrimaryCostModel);
  RadioButton(h,v+=16,2,0,"% _of Base Price",PrimaryCostModel);
  EditField(h+150,v,55,"%",Normal,CostPerc,true,0);
  RadioButton(h,v+=16,3,0,"Weighted Average",PrimaryCostModel);
  RadioButton(h,v+=16,4,0,"Queued",PrimaryCostModel);
  RadioButton(h,v+=16,kCostModelNoneItem,0,"None",PrimaryCostModel);
  ButtonFrame(h,v+=40,230,3,"Queued Cost Model");
  RadioButton(h,v,0,0,"Default",QueuedCostModel);
  RadioButton(h,v+=16,1,0,"F_IFO Price",QueuedCostModel);
  RadioButton(h,v+=16,2,0,"LIFO Price",QueuedCostModel);

  ButtonFrame(h2=380,v=vm,200,3,"Cost Price for Serial Number");
  RadioButton(h2,v,0,0,"Default",FIFOPerSerialNr);
  RadioButton(h2,v+=16,1,0,"Cost Price not for Serial Number",FIFOPerSerialNr);
  RadioButton(h2,v+=16,2,0,"Cost Price for Serial Number",FIFOPerSerialNr);
  ButtonFrame(h2,v+=40,200,3,"Queued Cost Model per Location");
  RadioButton(h2,v,0,0,"Default",FIFOPerLocation);
  RadioButton(h2,v+=16,1,0,"Queued Cost not per Location",FIFOPerLocation);
  RadioButton(h2,v+=16,2,0,"Queued Cost per Location",FIFOPerLocation);
  ButtonFrame(h2,v+=40,200,3,"WA per Location");
  RadioButton(h2,v,0,0,"Default",WAPerLocation);
  RadioButton(h2,v+=16,1,0,"WA not per Location",WAPerLocation);
  RadioButton(h2,v+=16,2,0,"WA per Location",WAPerLocation);
/*5.3
  ButtonFrame(h2,v+=40,200,3,"Cost Price per Location");
  RadioButton(h2,v,0,0,"Default",CostPricePerLocation);
  RadioButton(h2,v+=16,1,0,"Cost Price not per Location",CostPricePerLocation);
  RadioButton(h2,v+=16,2,0,"Cost Price per Location",CostPricePerLocation);
*/
  if (StandardHansa==false) then begin
    Tile(tilenr,240,false,tilenr,-); tilenr = tilenr + 1;
    h = 180; v = 6;
    label = UserDefined("INVc","UserStr1");
    if (nonblank(label)) then begin
      EditField(h,v=6 ,-40,label,Normal,UserStr1,false,0);
    end;
    label = UserDefined("INVc","UserStr2");
    if (nonblank(label)) then begin
      EditField(h,v+=vs,-40,label,Normal,UserStr2,false,0);
    end;
    label = UserDefined("INVc","UserStr3");
    if (nonblank(label)) then begin
      EditField(h,v+=vs,-40,label,Normal,UserStr3,false,0);
    end;
    label = UserDefined("INVc","UserStr4");
    if (nonblank(label)) then begin
      EditField(h,v+=vs,-40,label,Normal,UserStr4,false,0);
    end;
    label = UserDefined("INVc","UserStr5");
    if (nonblank(label)) then begin
      EditField(h,v+=vs,-40,label,Normal,UserStr5,false,0);
    end;
    label = UserDefined("INVc","UserVal1");
    if (nonblank(label)) then begin
      EditField(h,v+=vs,50,label,Normal,UserVal1,true,0);
    end;
    label = UserDefined("INVc","UserVal2");
    if (nonblank(label)) then begin
      EditField(h,v+=vs,50,label,Normal,UserVal2,true,0);
    end;
    label = UserDefined("INVc","UserVal3");
    if (nonblank(label)) then begin
      EditField(h,v+=vs,50,label,Normal,UserVal3,true,0);
    end;
    label = UserDefined("INVc","UserDate1");
    if (nonblank(label)) then begin
      EditField(h,v+=vs,80,label,Normal,UserDate1,true,PasteCurDate);
    end;
    label = UserDefined("INVc","UserDate2");
    if (nonblank(label)) then begin
      EditField(h,v+=vs,80,label,Normal,UserDate2,true,PasteCurDate);
    end;
    label = UserDefined("INVc","UserDate3");
    if (nonblank(label)) then begin
      EditField(h,v+=vs,80,label,Normal,UserDate3,true,PasteCurDate);
    end;
  end;
  Tile(tilenr,400,false,tilenr,Math2); tilenr = tilenr + 1;
  StaticText(50,v=20,"Notes",true);
  TextField(60,v-5,-20,370,Math2,0);
  if (HasCharts) then begin
    Tile(tilenr,400,false,tilenr,-); tilenr = tilenr + 1;
    ChartArea(10,6,-10,390,"$INDCLass_BIChart");
  end;
  if (UserCanReport("INInfoRn","",true)) then begin
    SpecialMenu("Item Status Report",'I',0,"INStatusINDsm");
  end;
//  SpecMenuItem("Recalculate Price List",' ',2);
  if (UserCanReport("INrsRn","INrsRClass",true)) then begin
    SpecialMenu("Item History",'h',3,"INrsRn_INSm");//CMD H DOES HIDE HANSA
  end;
  SpecialMenu("Item Location Status",' ',4,"LocItemStatDsm");
  if (HasJewelleryInterface) and (UserCanReport("INInfoRn","",true)) then begin
    SpecialMenu("Item Status per Alternative Code",'S',5,"ItemStatusAltINDsm");
  end;
  SpecMenuGroup("",kSpecMenuGroupTypeExtendedPlusMenu,0);
  SpecialMenu("Purchase Item",' ',1,"PIFromINDsm");
  SpecialMenu("Recipe",' ',2,"RecFromINDsm");
  EndWindow;
end;

window PUDClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h1,h2,h3,h4,t,v,vm,vs;
  string 255 label;
  record CYBlock CYb;
  Integer tilenr;
  Integer f,flipnr,rn;

  BlockLoad(CYb);
  WindowBegin("Goods Receipt",PUDClass,CGview,-);
  if (HasJewelleryInterface) then begin
    SetWRect(20,80,870,620);
  end else begin
    SetWRect(20,80,750,620);
  end;
  if (HasMultiCurrency or IsEnterprise or HasObjects) then begin
    Sizeable(-1,-1,0,0);
  end;
  UseView(PUVc);
  ActiveFieldOnNew("VECode");
  FormName(PurchaseForm);
  Tile(0,74,false,"",TransDate);
  EditField(75,vm=(v=6),95,"No.",Normal,SerNr,false,TSerSClass);
  EditField(75,v+=20,95,"#Supplier#",Normal,VECode,false,VESClass);
  EnterSkip(TransDate);
  EditField(h=255,v=vm,-40,"Name",Normal,VEName,false,0);

  CheckBox(h4=-100,v+=20,0,"OK",OKFlag);
  if (CYb.UseTaxTemplatesforTaxCalc==0) then begin
    CheckBox(h4,v+=16,0,"Price Incl. #VAT#",InclVAT);
  end else begin
    CheckBox(h4,v+=16,0,"Price Incl. Tax",InclVAT);
  end;
  CheckBox(-200,v-16,0,"Imported",BLT_Importf); //EBS
  CheckBox(-200,v,0,"Exported",BLT_Exportf); //EBS
  tilenr = 1;
  TileButton(tilenr,"Terms"); tilenr = tilenr + 1;
  TileButton(tilenr,"Items"); tilenr = tilenr + 1;
  if (HasMultiCurrency) then begin
    TileButton(tilenr,"Currency"); tilenr = tilenr + 1;
  end;
  if (IsEnterprise) then begin
    if (StandardHansa==false) then begin
      TileButton(tilenr,"Extra Costs"); tilenr = tilenr + 1;
      TileButton(tilenr,"Freight"); tilenr = tilenr + 1;
    end;
    TileButton(tilenr,"Comment"); tilenr = tilenr + 1;
  end;
  tilenr = 1;

  vs = 20; h1 = 110; h2 = 300; h3 = 550; h4 = -100;
  Tile(tilenr,70,false,tilenr,TransDate); tilenr = tilenr + 1;
  EditField(h1,vm=(v=6),82,"Trans. Date",Normal,TransDate,false,PasteCurDate);
  if (IsEnterprise==false) then begin
    EditField(h2,v,-20,"Comment",Normal,Comment,false,0);
  end;
  if (HasMultiLocations) then begin
    v = v + vs;
    EditField(h1,v,82,"Location",Normal,Location,false,LocationSClass);
  end;
  if (HasRoute) then begin
    v = v + vs;
    EditField(h1,v,82,"Route",ViewOnly,Sorting,false,0);
  end;
  v = v + vs;
  // Need a cleaner way to skip to next visible field
  if (HasObjects) then begin
    EnterSkip(Objects);
  end else begin
    if (HasModPO) then begin
      EnterSkip(PONr);
    end else begin
      if (IsEnterprise) then begin
        if (StandardHansa==false) then begin
          EnterSkip(POCOSerNr);
        end else begin
          EnterSkip(PUClass);
        end;
      end else begin
        if (HasLanguages) then begin
          EnterSkip(LangCode);
        end else begin
          if (IsEnterprise) then begin
            EnterSkip(CustomsNr);
          end else begin
            if (HasLocalization("ARG,MEX,USA")) then begin
              EnterSkip(DispatchNumber);
            end else begin
              EnterSkip(Math);
            end;
          end;
        end;
      end;
    end;
  end;
  SoftEditField(h1,v,82,"Scan Barcode",Normal,"scanbarcode",false,0,M4Str,60);
  if (HasObjects) then begin
    if (IsEnterprise) then begin
      EditField(h2,v=vm,135,"Objects",Normal,Objects,false,ObjSClass);
    end else begin
      if (HasMultiLocations) then begin
        EditField(h2,v,135,"Objects",Normal,Objects,false,ObjSClass);
      end else begin
        v = v + vs;
        EditField(h2,v,135,"Objects",Normal,Objects,false,ObjSClass);
      end;
    end;
  end;
  if (HasModPO) then begin
    if (HasObjects) then begin
      v = v + vs;
    end;
    EditField(h2,v,135,"Purch. Order No.",ViewOnly,PONr,false,0);
  end;
  if (IsEnterprise) then begin
    if (StandardHansa==false) then begin
      v = v + vs;
      EditField(h2,v,135,"Purch. Contract",ViewOnly,POCOSerNr,true,POCOSClass);
      EditField(h2,v+=vs,135,"Forklifter",Normal,ForkliftUser,false,UserSClass); //EBS
    end;
    EditField(h3,v=vm,80,"Purch. Order Class",ViewOnly,PUClass,false,0);
  end;
  if (HasLanguages) then begin
    v = v + vs;
    EditField(h3,v,80,"Language",Normal,LangCode,false,LangSClass);
  end;
  if (IsEnterprise) then begin
    v = v + vs;
    EditField(h3,v,80,"Customs Number",Normal,CustomsNr,false,0);
  end;
  if (HasLocalization("ARG,MEX,USA")) then begin
    v = v + vs;
    EditField(h3,v,80,"Dispatch Number",Normal,DispatchNumber,false,0);
  end;
//  CheckBox(h4,v=vm,0,"Price Incl. #VAT#",InclVAT);
  EnterSkip(Math);
  Tile(tilenr,220,true,tilenr,Math); tilenr = tilenr + 1;
  v = 24;
  if (HasSerialNumbers or HasLocalization("ARG,MEX,USA") or HasJewelleryInterface) then begin
    MatrixBegin(4,v,-50,-50,-,200);
  end else begin
    MatrixBegin(4,v,-25,-50,-,200);
  end;
  MatTypedRow(stp);
  MatOverStrike(ovst);
  Flip(0);
  MatCol(1,28,"Item",0,ArtCode,false,INSClass);
//  MatCol(1,84,"Var",0,VARList,true,VARSClass);
//  MatCol(1,144,"Qty",0,Quant,true,0);
  //EBS-->
  // if (HasVarieties) then begin
  //   MatCol(1,94,"Qty",0,Quant,true,MATVARINSClass);
  // end else begin
  //   MatCol(1,94,"Qty",0,Quant,true,0);
  // end;
  // EnterSkip(Spec);
  //EBS <--
  MatText(t=3,28,"Signature",true);
  MatCol(t,100,"",0,Sign,false,0);
  MatText(t,160,"Correction Date",true);
  MatCol(t,290,"UpdDate",0,UpdDate,false,0);
  flipnr = 1;
  Flip(flipnr); flipnr = flipnr + 1;
  //EBS-->
  if (HasVarieties) then begin
    MatCol(1,94,"Qty",0,Quant,true,MATVARINSClass);
  end else begin
    MatCol(1,94,"Qty",0,Quant,true,0);
  end;
  EnterSkip(Spec);
  //EBS <--
  MatColTL(1,154,"Unit",0,M4Code,ViewOnly,5,UnitCode,false,UnitSCLass);
  MatCol(1,194,"Qty 2",0,Quant2,true,0); //EBS
  MatColTL(1,244,"Unit 2",0,M4Code,ViewOnly,5,UnitCode2,false,UnitSCLass); //EBS
  MatCol(1,284,"Description",0,Spec,false,0);
  MatCol(1,-280,"Imp.",0,ImportQuant,true,0); //EBS
  MatCol(1,-240,"Unit Price",0,UPrice,true,0);
  MatCol(1,-160,"Cost Price",0,CostPrice,true,0);
  MatCol(1,-80,"Sum",0,Sum,true,0);
  if (IsEnterprise) then begin
    Flip(flipnr); flipnr = flipnr + 1;
    //EBS-->
    if (HasVarieties) then begin
      MatCol(1,94,"Qty 2",0,Quant2,true,MATVARINSClass);
    end else begin
      MatCol(1,94,"Qty 2",0,Quant2,true,0);
    end;
    EnterSkip(Spec);
    MatColTL(1,164,"Unit 2",0,M4Code,ViewOnly,5,UnitCode2,false,UnitSCLass);
    MatCol(1,204,"Description",0,Spec,false,0);
    // MatCol(1,144,"Description",0,Spec,false,0);
    //EBS <--
    MatCol(1,-350,"Location",0,Location,false,LocationSClass);
    MatCol(1,-280,"Serial No.",0,SerialNr,false,SerialNrSClass);
    MatCol(1,-150,"Best Before",0,BestBefore,false,0);
    MatCol(1,-60,"Batch Status",0,BatchStatus,false,BatchStatusSClass);
    Flip(flipnr); flipnr = flipnr + 1;
    //EBS-->
    if (HasVarieties) then begin
      MatCol(1,94,"Qty",0,Quant,true,MATVARINSClass);
    end else begin
      MatCol(1,94,"Qty",0,Quant,true,0);
    end;
    EnterSkip(Spec);
    //EBS <--
    MatCol(1,144,"Description",0,Spec,false,0);
    MatColTL(1,-404,"Item Cost",0,-1,ViewOnly,-1,InPrice,false,0);
    if (StandardHansa==false) then begin
      MatColTL(1,-324,"Price Varian.",0,-1,ViewOnly,-1,VarianceAmount,false,0);
      MatCol(1,-244,"Unit Price",0,UPrice,true,0);
      MatCol(1,-174,"Extra Cost",0,Extra,true,0);
      MatCol(1,-104,"Cost Price",0,CostPrice,true,0);
    end else begin
      MatCol(1,-324,"Fr. Cost",0,ShipCost,true,0);
      MatCol(1,-244,"Extra Cost",0,Extra,true,0);
      MatCol(1,-164,"Customs",0,CustomsCost,true,0);
    end;
    if (CYb.UseTaxTemplatesforTaxCalc!=0) then begin
      MatCol(1,-34,"T-Cd",0,TaxTemplateCode,false,TaxTemplateSClass);
    end else begin
      MatCol(1,-34,"#V-Cd#",0,VATCode,false,VATCodeSClass);
    end;
    Flip(flipnr); flipnr = flipnr + 1;
    //EBS-->
    if (HasVarieties) then begin
      MatCol(1,94,"Qty",0,Quant,true,MATVARINSClass);
    end else begin
      MatCol(1,94,"Qty",0,Quant,true,0);
    end;
    EnterSkip(Spec);
    //EBS <--
    MatCol(1,144,"Description",0,Spec,false,0);
    MatCol(1,-350,"#Supp.# Item No.",0,VEItemCode,false,PISClass);
    MatColTL(1,-270,"#S.# Unit",0,M4Code,ViewOnly,5,VEUnit,false,UnitSCLass);
    MatCol(1,-200,"#Supp.# Qty",0,VEQuant,true,0);
    if (StandardHansa==false) then begin
      MatCol(1,-140,"Coeff.",0,Coefficient,true,0);
    end;
    MatCol(1,-90,"Base Price",0,BasePrice,false,0);
    Flip(flipnr); flipnr = flipnr + 1;
    //EBS-->
    if (HasVarieties) then begin
      MatCol(1,94,"Qty",0,Quant,true,MATVARINSClass);
    end else begin
      MatCol(1,94,"Qty",0,Quant,true,0);
    end;
    EnterSkip(Spec);
    //EBS <--
    MatCol(1,144,"Description",0,Spec,false,0);
    if (StandardHansa==false) then begin
      MatCol(1,-400,"#Stock# Type",0,StockType,false,SetSClass);
    end;
    if (HasTREO) then begin
      MatCol(1,-310,"TREO",0,TREO,false,SetSClass);
    end;
    MatCol(1,-220,"#Stock# A/C",0,CostAcc,false,AccSClass);
    MatCol(1,-155,"Purch. A/C",0,CredAcc,false,AccSClass);
    MatCol(1,-90,"Objects",0,Objects,false,ObjSClass);
    if (StandardHansa==false) then begin
      Flip(flipnr); flipnr = flipnr + 1;
      //EBS-->
      if (HasVarieties) then begin
        MatCol(1,94,"Qty",0,Quant,true,MATVARINSClass);
      end else begin
        MatCol(1,94,"Qty",0,Quant,true,0);
      end;
      EnterSkip(Spec);
      //EBS <--
      MatCol(1,144,"Customs No.",0,CustomsNr,false,0);
      MatCol(1,-340,"Customs Date",0,CustomsDate,false,PasteCurDate);
      MatCol(1,-240,"Country of O.",0,CountryOfOrg,false,CountrySClass);
      MatCol(1,-140,"From Pos.",0,PosCode,false,PosSClass);
      MatCol(1,-70,"To Position",0,ToPosCode,false,FreePosSClass);
    end;
    Flip(flipnr); flipnr = flipnr + 1;
    //EBS-->
    if (HasVarieties) then begin
      MatCol(1,94,"Qty",0,Quant,true,MATVARINSClass);
    end else begin
      MatCol(1,94,"Qty",0,Quant,true,0);
    end;
    EnterSkip(Spec);
    //EBS <--
    MatCol(1,144,"Description",0,Spec,false,0);
    MatCol(1,-250,"Serial No.",0,SerialNr,false,SerialNrSClass);
    MatCol(1,-135,"Width",0,UnitXval,true,0);
    MatCol(1,-90,"Height",0,UnitYval,true,0);
    MatCol(1,-45,"Depth",0,UnitZval,true,0);
    if (StandardHansa==false) then begin
      Flip(flipnr); flipnr = flipnr + 1;
      //EBS-->
      if (HasVarieties) then begin
        MatCol(1,94,"Qty",0,Quant,true,MATVARINSClass);
      end else begin
        MatCol(1,94,"Qty",0,Quant,true,0);
      end;
      EnterSkip(Spec);
      //EBS <--
      MatCol(1,144,"Extra Cost",0,Extra,true,0);
      MatCol(1,-420,"Freight",0,ShipCost,true,0);
      MatCol(1,-360,"Customs",0,CustomsCost,true,0);
      label = UserDefined("AccBlock","PUCost1");
      if (blank(label)) then begin label = "Cost 1";end;
      MatCol(1,-300,label,0,RowCost1,false,0);
      label = UserDefined("AccBlock","PUCost2");
      if (blank(label)) then begin label = "Cost 2";end;
      MatCol(1,-240,label,0,RowCost2,false,0);
      label = UserDefined("AccBlock","PUCost3");
      if (blank(label)) then begin label = "Cost 3";end;
      MatCol(1,-180,label,0,RowCost3,false,0);
      label = UserDefined("AccBlock","PUCost4");
      if (blank(label)) then begin label = "Cost 4";end;
      MatCol(1,-120,label,0,RowCost4,false,0);
      label = UserDefined("AccBlock","PUCost5");
      if (blank(label)) then begin label = "Cost 5";end;
      MatCol(1,-60,label,0,RowCost5,false,0);
    end;
    Flip(flipnr); flipnr = flipnr + 1;
    //EBS-->
    if (HasVarieties) then begin
      MatCol(1,94,"Qty",0,Quant,true,MATVARINSClass);
    end else begin
      MatCol(1,94,"Qty",0,Quant,true,0);
    end;
    EnterSkip(Spec);
    //EBS <--
    MatCol(1,144,"PO No.",0,PONr,false,POSClass);
    MatCol(1,194,"PO Row",0,OrdRow,false,0);
    MatCol(1,-370,"PO Recon.",0,PORecon,false,0);
    MatCol(1,-310,"Comment",0,POReconComment,false,0);
    MatCol(1,-200,"Inv. Recon.",0,VIRecon,false,0);
    MatCol(1,-130,"Comment",0,VIReconComment,false,0);
  end else begin
    if (HasSerialNumbers) then begin
      Flip(flipnr); flipnr = flipnr + 1;
      //EBS-->
      if (HasVarieties) then begin
        MatCol(1,94,"Qty",0,Quant,true,MATVARINSClass);
      end else begin
        MatCol(1,94,"Qty",0,Quant,true,0);
      end;
      EnterSkip(Spec);
      //EBS <--
      MatCol(1,144,"Description",0,Spec,false,0);
      MatCol(1,-150,"Serial No.",0,SerialNr,false,SerialNrSClass);
    end;
/*
    MatCol(1,-280,"Unit Price",0,UPrice,true,0);
    MatCol(1,-210,"Freight",0,ShipCost,true,0);
    MatCol(1,-140,"Extra Cost",0,Extra,true,0);
    MatCol(1,-70,"Cost Price",0,CostPrice,true,0);
*/
  end;
  if (HasLocalization("ARG,MEX,USA")) then begin
    Flip(flipnr); flipnr = flipnr + 1;
    //EBS-->
    if (HasVarieties) then begin
      MatCol(1,94,"Qty",0,Quant,true,MATVARINSClass);
    end else begin
      MatCol(1,94,"Qty",0,Quant,true,0);
    end;
    EnterSkip(Spec);
    //EBS <--
    MatCol(t=1,144,"Description",0,Spec,false,0);
    MatCol(t,-250,"Dispatch Number",0,DispatchNumber,false,0);
  end;
  //EBS-->
  Flip(flipnr); flipnr = flipnr + 1;
  MatCol(1,94,"Description",0,Spec,false,0);
  if (HasVarieties) then begin
    MatCol(1,-500,"Qty",0,Quant,true,MATVARINSClass);
  end else begin
    MatCol(1,-500,"Qty",0,Quant,true,0);
  end;
  MatColTL(1,-440,"Unit",0,M4Code,ViewOnly,5,UnitCode,false,UnitSCLass);
  if (HasVarieties) then begin
    MatCol(1,-390," Qty 2",0,Quant2,true,MATVARINSClass);
  end else begin
    MatCol(1,-390,"Qty 2",0,Quant2,true,0);
  end;
  MatColTL(1,-330,"Unit 2",0,M4Code,ViewOnly,5,UnitCode2,false,UnitSCLass);
  MatCol(1,-280,"Serial No.",0,SerialNr,false,SerialNrSClass);
  MatCol(1,-150,"Best before",0,BestBefore,false,0);
  MatCol(1,-70,"To pos.",0,ToPosCode,false,FreePosSClass);
  //EBS<--
  InsertRowTest;
  DeleteRowTest;
  RowMenuBegin("");
  if (StandardHansa==false) then begin
    if (HasSerialNumbers) then begin
      RowMenuItem(0,"Open Batch Specification",' ',' ',0,"OpenBatchPUDsm");
    end;
    RowMenuItem(0,"Split Row",' ',' ',0,"SplitRowPUDsm");
  end;
  EndRowMenu;
  EndMatrix;
  vs = 20;
//  v = 18;
  v = v + 1;
  if (flipnr>2) then begin
    for (f=1;f<flipnr;f=f+1) begin
      VTab(-35,v,-16,v+vs,ToolFlip,f,chr(asc("A") + f - 1));
      v = v + vs;
    end;
  end;
  EditField(110,-41,70,"Total Qty",ViewOnly,SumQuant,true,0);
//  EditField(110,-21,70,"Price Subtotal",Normal,SubTotal,true,0); //Shows the same as SumCostPrice?
  EditField(260,-41,70,"Freight",Normal,ShipCost,true,0);
  if (IsEnterprise) then begin
    EditField(260,-21,70,"Customs",Normal,CustomsCost,true,0);
  end;
  if (CYb.UseTaxTemplatesforTaxCalc==0) then begin
    EditField(410,-41,70,"#VAT#",Normal,VATVal,true,0);
    if (HasExtTax) then begin
      EditField(410,-21,70,"Ext. Tax",ViewOnly,TAX1Sum,true,0);
    end;
  end else begin
    EditField(410,-41,70,"Tax",Normal,VATVal,true,0);
  end;
  EditField(-169,-41,118,"Subtotal",ViewOnly,SumCostPrice,true,0);
  EditField(-169,-21,118,"TOTAL",ViewOnly,PayVal,true,0);
  if (HasMultiCurrency or HasBase2) then begin
    Tile(tilenr,70,false,tilenr,FrRate); tilenr = tilenr + 1;
    vs = 20;
    if (HasBase2) then begin
      h1 = h1 + 20;
    end;
    EditField(h1,v=6,50,"Currency",Normal,CurncyCode,false,CurncyCodeSClass);
    if (HasMultiCurrency) then begin
      if (HasBase2) then begin
        EditField(h1,v+vs,50,"Base Currency 1",Normal,BaseRate1,true,0);
      end else begin
        EditField(h1,v+vs,50,"Base Currency",Normal,BaseRate1,true,0);
      end;
      if (HasBase2) then begin
        EditField(h1,v+(vs*2),50,"Base Currency 2",Normal,BaseRate2,true,0);
      end;
      EditField(h2=295,v,50,"Rate",Normal,FrRate,true,0);
      if (HasBase2) then begin
        RateField(h3=360,v,50,":",Normal,"ToRateB1",true,h3+60,v+14,"Base Currency 1",false);
        RateField(h3,v+=vs,50,":",Normal,"ToRateB2",true,h3+60,v+14,"Base Currency 2",false);
      end else begin
        RateField(h3=360,v,50,":",Normal,"ToRateB1",true,h3+60,v+14,"Base Currency",false);
      end;
    end else begin
      EditField(h1,v+=vs,50,"Base Currency 1",Normal,BaseRate1,true,0);
      EditField(h1,v+=vs,50,"Base Currency 2",Normal,BaseRate2,true,0);
    end;
  end;
  if (IsEnterprise and StandardHansa==false) then begin
    Tile(tilenr,120,false,tilenr,Cost1); tilenr = tilenr + 1;
    vs = 20;
    label = UserDefined("AccBlock","PUCost1");
    if (blank(label)) then begin label = "Extra Cost 1";end;
    EditField(h=110,v=6,70,label,Normal,Cost1,false,0);
    label = UserDefined("AccBlock","PUCost2");
    if (blank(label)) then begin label = "Extra Cost 2";end;
    EditField(h2=295,v,70,label,Normal,Cost2,false,0);
    label = UserDefined("AccBlock","PUCost3");
    if (blank(label)) then begin label = "Extra Cost 3";end;
    EditField(h,v+=vs,70,label,Normal,Cost3,false,0);
    label = UserDefined("AccBlock","PUCost4");
    if (blank(label)) then begin label = "Extra Cost 4";end;
    EditField(h2,v,70,label,Normal,Cost4,false,0);
    label = UserDefined("AccBlock","PUCost5");
    if (blank(label)) then begin label = "Extra Cost 5";end;
    EditField(h,v+=vs,70,label,Normal,Cost5,false,0);
    if (HasApprovals) then begin
      SoftEditField(h2,v,123,"Approval Status",ViewOnly,"AcceptanceStatusFlag",false,0,M4Str,255);
    end;
    ButtonFrame(h3=400,v=16,130,2,"Extra Costs Calculation");
    RadioButton(h3,v,0,0,"Value",ExtraCostsCalculation);
    RadioButton(h3,v+=16,1,0,"Weight",ExtraCostsCalculation);
/*
//oldapprovals
    ButtonFrame(h3=-163,v=16,123,6,"Approval Status");
    RadioButton(h3,v,kAcceptanceStateNotRequired,0,"Not Required",AcceptanceStatus);
    RadioButton(h3,v+=16,kAcceptanceStateNotStarted,0,"Not Started",AcceptanceStatus);
    RadioButton(h3,v+=16,kAcceptanceStateNotRequested,0,"Not Reuested",AcceptanceStatus);
    RadioButton(h3,v+=16,kAcceptanceStatePending,0,"Pending",AcceptanceStatus);
    RadioButton(h3,v+=16,kAcceptanceStateApproved,0,"Approved",AcceptanceStatus);
    RadioButton(h3,v+=16,kAcceptanceStateRejected,0,"Rejected",AcceptanceStatus);
*/
    Tile(tilenr,130,false,tilenr,FreightCode); tilenr = tilenr + 1;
    EditField(h1,v=6,80,"Freight Company",Normal,FreightCode,false,FreightCompanySClass);
    EditField(h1,v+=vs,-20,"Name",Normal,FreightCompany,false,0);
    EditField(h1,v+=vs,-20,"#Reg. No.#",Normal,FreightCompanyRegNr,false,0);
    EditField(h1,v+=vs,-20,"Truck Information",Normal,TruckInfo,false,0);
    EditField(h1,v+=vs,-20,"Driver",Normal,Driver,false,0);
    EditField(h1,v+=vs,-20,"CMR",Normal,CMRText,false,0); // International transporting number
    Tile(tilenr,30,false,tilenr,Comment); tilenr = tilenr + 1;
    EditField(h1,v=6,-20,"Comment",Normal,Comment,false,0);
  end;
  if (StandardHansa==true) then begin
    Tile(tilenr,30,false,tilenr,Comment); tilenr = tilenr + 1;
    EditField(h1,v=6,-20,"Comment",Normal,Comment,false,0);
  end;
  if (GuiType==kGuiMetro) then begin // Temporarily disabled on Windows 8
    SpecialMenu("Goods Receipt Status",'r',4,"PUStatusDsm");
    SpecialMenu("Generate Serial No.",' ',2,"GenSerialNosPUDsm");
    if (HasIntegratedNL) then begin
      SpecialMenu("Open #NL# Transaction",'t',4,"OpenTRFromPU");
    end;
    SpecMenuGroup("",kSpecMenuGroupTypeExtendedPlusMenu,0);
    if (HasModPL) then begin
      SpecialMenu("#Purchase Invoice#",'F',3,"VIFromPUDsm");
    end;
    if (HasRetGoodsToSupp and HasModIN) then begin
      SpecialMenu("Returned Goods",'B',7,"RetPUFromPUDsm");
    end;
  end else begin
    if (IsEnterprise) then begin
      SpecialMenu("Item Search",'f',1,"ItemSearchDsm");
      SpecialMenu("Goods Receipt Status",'r',4,"PUStatusDsm");
    end;
    if (HasSerialNumbers) then begin
      SpecialMenu("Generate Serial No.",' ',2,"GenSerialNosPUDsm");
    end;
    if (HasIntegratedNL) then begin
      SpecialMenu("Open #NL# Transaction",'t',4,"OpenTRFromPU");
    end;
    if (HasTaxMatrix) then begin
      SpecialMenu("Open Tax Matrix",' ',25,"OpenVatMatrixPUDsm");
    end;
    SpecialMenu("Print Labels",'e',0,"PrintPULabPUDsm");
    SpecialMenu("Print Pallet Labels",'w',0,"BLT_PrintPUPalletLabPUDsm"); //EBS
    SpecialMenu("Transfer imported quantity",' ',0,"BLT_TransImpQuantPUDsm"); //EBS
    SpecialMenu("Update Prices",' ',1,"UpdatePricesPUDsm");

    if (HasModWHM) then begin
      SpecialMenu("Accept Warehouse #Stock# Movements",' ',9,"OKStockMovPUrDsm");
    end;
    if (HasLocalization("HRV")) then begin
      SpecialMenu("Sales Price Calculation",' ',8,"SPCHRVPUDsm");
    end;
    if (HasApprovals) then begin
      SpecialMenu("Request Approval",' ',6,"PUSendforAcceptancePUDsm");
      SpecialMenu("Cancel Approval Request",' ',2,"CancelApprovalRequestDsm");
    end;
    SpecMenuGroup("",kSpecMenuGroupTypeExtendedPlusMenu,0);
    if (HasModPL) then begin
      SpecialMenu("#Purchase Invoice#",'F',3,"VIFromPUDsm");
    end;
    if (HasQualityControl) then begin
      SpecialMenu("Quality Control",'u',10,"QualConFromPUDsm");
  //  SpecialMenu("Update Mark",' ',6,"UpdateMarkPUDsm");
    end;
    if (HasAdvancedStock or (HasRetGoodsToSupp and HasModIN)) then begin
      SpecialMenu("Returned Goods",'B',7,"RetPUFromPUDsm");
    end;
    if (HasModRent) then begin
  //  SpecialMenu("Create #Stock# Movement",' ',5,"StockMovFromPUSpec");
  //  SpecialMenu("Scan",' ',8,"ScanBarCodePUDsm");
      SpecialMenu("#Stock# Transfer",' ',8,"INTransFromPUsm");
    end;
    SpecialMenu("Add #Supplier#",' ',0,"AddSupplierPUDsm");
    SpecialMenu("Add Item",' ',0,"AddItemPUDsm");
  end;
  EndWindow;
end;

window SHDClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h1,h2,h3,h4,t,v,vm,vs;
  Integer tilenr,f,flipnr,rn;

  WindowBegin("Delivery",SHDClass,CGview,-);
    SetWRect(20,80,750,460);
    Sizeable(-1,-1,0,0);
    UseView(SHVc);
    vs = 20;
    Tile(0,74,false,"",SerNr);
    EditField(75,vm=(v=6),95,"No.",Normal,SerNr,false,TSerSClass);
    EditField(75,v+=20,95,"Customer",ViewOnly,CustCode,false,0);
    EditField(h=255,v=vm,-40,"Name",Normal,Addr0,false,0);
    v = v + vs;
    if (HasOfficialSerNr and (HasLocalization("AGO")==false)) then begin
      EditField(h,vm=v,135,"Official No.",Normal,OfficialSerNr,false,LegalInvNrSClass);
    end;
    if (HasTREO) then begin
      EditField(h+230,vm,95,"TREO No.",Normal,TREONr,false,0);
    end;
    CheckBox(h4=-100,v,0,"OK",OKFlag);
    tilenr = 1;
    if (IsEnterprise) then begin
      TileButton(tilenr,"Terms"); tilenr = tilenr + 1;
      TileButton(tilenr,"Items"); tilenr = tilenr + 1;
      TileButton(tilenr,"Del. Terms"); tilenr = tilenr + 1;
      TileButton(tilenr,"Packaging"); tilenr = tilenr + 1;
      TileButton(tilenr,"Del. Address"); tilenr = tilenr + 1;
      TileButton(tilenr,"Comment"); tilenr = tilenr + 1;
      if (StandardHansa==false) then begin
        TileButton(tilenr,"Freight"); tilenr = tilenr + 1;
      end;
    end else begin
      TileButton(tilenr,"Comment"); tilenr = tilenr + 1;
      TileButton(tilenr,"Items"); tilenr = tilenr + 1;
      TileButton(tilenr,"Address"); tilenr = tilenr + 1;
      if (HasLocalization("PRT")) then begin
        if (HasModIN and HasModSL) then begin
          TileButton(tilenr,"Packaging"); tilenr = tilenr + 1;
        end;
        TileButton(tilenr,"Freight"); tilenr = tilenr + 1;
      end;
    end;
    tilenr = 1;
    Tile(tilenr,70,false,tilenr,ShipDate); tilenr = tilenr + 1;
    vs = 20; h1 = 110; h2 = 290; h3 = 530; h4 = -100;
    EditField(h1,vm=(v=6),82,"Date",Normal,ShipDate,false,PasteCurDate);
    if (HasMultiLocations) then begin
      v = v + vs;
      EditField(h1,v,82,"Location",Normal,Location,false,LocationSClass);
    end;
    if (HasRoute) then begin
      v = v + vs;
      EditField(h1,v,82,"Route",Normal,Sorting,false,DelRouteSClass);
    end;
    if (IsEnterprise) then begin
      v = v + vs;
      SoftEditField(h1,v,82,"Scan Barcode",Normal,"scanbarcode",false,0,M4Str,60);
    end;
    if (HasObjects) then begin
      EditField(h2,v=vm,135,"Objects",Normal,Objects,false,ObjSClass);
    end;
    if (HasBranch) then begin
      v = v + vs;
      EditField(h2,v,135,"Branch",ViewOnly,BranchID,false,0);
    end;
    if (HasMultiLocations or HasModTS) then begin
      v = v + vs;
    end;
    if (HasModTS) then begin
      EditField(h2,v,135,"Project",ViewOnly,PRCode,false,0);
    end;
    if (HasObjects) then begin
      EditField(h3,v=vm,80,"Order No.",ViewOnly,OrderNr,false,0);
    end else begin
      if (IsEnterprise==false) then begin
        if (HasModTS) then begin
          EditField(h3,v=vm,135,"Order No.",ViewOnly,OrderNr,false,0);
        end else begin
          EditField(h2,v=vm,135,"Order No.",ViewOnly,OrderNr,false,0);
        end;
      end;
    end;
    if (IsEnterprise) then begin
      EditField(h3,v+=vs,80,"Order Class",Normal,SHClass,false,OrderClassSClass);
      CheckBox(h4,v=6,0,"Tel. Message",Check1);
    end;
    if (IsEnterprise==false) then begin
      if (HasMultiLocations) then begin
        EditField(h1,v+=2*vs,-40,"Comment",Normal,Comment,false,0);
      end else begin
        EditField(h1,v+=vs,-40,"Comment",Normal,Comment,false,0);
      end;
      if (HasLanguages) then begin
        EditField(h1,v+=vs,82,"Language",Normal,LangCode,false,LangSClass);
      end;
    end;
    CheckBox(h3-190,50,0,"EDI Imported",BLT_EDIImportf);  //EBS
    CheckBox(h3-80,50,0,"Imported",BLT_Importf);  //EBS
    CheckBox(h3+30,50,0,"Exported",BLT_Exportf); //EBS
    HalPushButton(h3,80,-20,100,"SHVc_ReadWeightBtn","Read weight"); //EBS
    Tile(tilenr,190,true,tilenr,Math); tilenr = tilenr + 1;
    v = 20;
    MatrixBegin(4,v,-50,-35,-,200);
    MatTypedRow(stp);
    Flip(0);
    MatCol(1,32,"Item",0,ArtCode,false,ForSaleINSClass);
  //  MatCol(1,94,"Var",0,VARList,false,VARSClass);
  //  MatCol(1,144,"Description",0,Spec,false,0);
    MatCol(1,94,"Description",0,Spec,false,0);
    MatCol(t=kInvoiceRowTypeStructuredItemComponent,32,"Item",0,ArtCode,false,ForSaleINSClass);
  //  MatCol(t,94,"Var",0,VARList,false,VARSClass);
  //  MatCol(t,144,"Description",0,Spec,false,0);
    MatCol(t,94,"Description",0,Spec,false,0);
    MatText(t=kInvoiceRowTypeHidden,32,"This row and all rows below it will be hidden on printout",false);
    t = kInvoiceRowTypePerceptionTax;
    flipnr = 1;
    Flip(flipnr); flipnr = flipnr + 1;
    if (HasCustItem) then begin
      MatCol(1,-350,"Cust. Item No.",0,CustArtCode,false,CUINSClass);
    end;
    MatColTL(1,-280,"Conf.by cust.",0,M45Val,Normal,0,QuantConfByCust,true,0); //EBS
    MatCol(1,-200,"Imp.qty",0,ImportQuant,true,0);
    MatCol(1,-150,"Ordered",0,Ordered,true,0);
    MatCol(1,-98,"Avail.",0,InStock,true,0);
    MatCol(1,-50,"Del. Qty",0,Ship,true,0);
    if (HasCustItem) then begin
      MatCol(t=kInvoiceRowTypeStructuredItemComponent,-230,"Cust. Item No.",0,CustArtCode,false,CUINSClass);
      MatCol(t,-150,"Ordered",0,Ordered,true,0);
    end else begin
      MatCol(t=kInvoiceRowTypeStructuredItemComponent,-147,"Ordered",0,Ordered,true,0);
    end;
    MatCol(t,-98,"Avail.",0,InStock,true,0);
    MatCol(t,-50,"Del. Qty",0,Ship,true,0);
    Flip(flipnr); flipnr = flipnr + 1;
    if (IsEnterprise==false) then begin
      if (HasSerialNumbers) then begin
        MatCol(1,-350,"Serial No.",0,SerialNr,false,SerialNrSClass);
      end;
      if (HasObjects) then begin
        MatCol(1,-250,"Objects",0,Objects,false,ObjSClass);
      end;
      MatCol(1,-98,"#Stock# Value",0,FIFORowVal,false,0);
      if (HasLocalization("RUS")) then begin
        Flip(flipnr); flipnr = flipnr + 1;
        MatCol(1,-230,"Unit",0,UnitCode,false,UnitSClass);
        MatCol(1,-180,"Unit Name",0,UnitComment,false,0);
      end;
    end else begin
      MatCol(1,-350,"Serial No.",0,SerialNr,false,SerialNrSClass);
      MatCol(1,-250,"Best Before",0,BestBefore,false,0);
      MatCol(1,-150,"Location",0,Location,false,LocationSClass);
      if (HasPositions) then begin
        MatCol(1,-50,"Position",0,PosCode,false,UsedPosSClass);
      end;
      MatCol(t=kInvoiceRowTypeStructuredItemComponent,-350,"Serial No.",0,SerialNr,false,SerialNrSClass);
      MatCol(t,-250,"Best Before",0,BestBefore,false,0);
      MatCol(t,-150,"Location",0,Location,false,LocationSClass);
      if (HasPositions) then begin
        MatCol(t,-50,"Position",0,PosCode,false,UsedPosSClass);
      end;
      Flip(flipnr); flipnr = flipnr + 1;
      MatCol(1,-400,"BuyBack Cost",0,BBCostPrice,false,0);
      MatCol(1,-320,"Row FIFO",0,FIFORowVal,false,0);
      if (StandardHansa==false) then begin
        MatCol(1,-220,"W. Av. Base2",0,WAB2,false,0);
      end;
      MatCol(1,-120,"Base Price",0,BasePrice,false,0);
      MatCol(1,-40,"Coeff",0,Coefficient,false,0);
      MatCol(t=kInvoiceRowTypeStructuredItemComponent,-400,"BuyBack Cost",0,BBCostPrice,false,0);
      MatCol(t,-320,"Row FIFO",0,FIFORowVal,false,0);
      if (StandardHansa==false) then begin
        MatCol(t,-220,"W. Av. Base2",0,WAB2,false,0);
      end;
      MatCol(t,-120,"Base Price",0,BasePrice,false,0);
      MatCol(t,-40,"Coeff",0,Coefficient,false,0);
      Flip(flipnr); flipnr = flipnr + 1;
      MatCol(1,-400,"Recipe",0,Recepy,false,0);
      MatCol(1,-320,"Source",0,Source,false,SourceSClass);
      MatCol(1,-240,"Invoiced",0,Invd,false,0);
      if (StandardHansa==false) then begin
        MatCol(1,-160,"#Despatch# Date",0,DespatchRowDate,false,PasteCurDate);
        MatCol(1,-80,"#Despatch# Time",0,DespatchRowTime,false,PasteCurTime);
      end;
      MatCol(t=kInvoiceRowTypeStructuredItemComponent,-400,"Recipe",0,Recepy,false,0);
      MatCol(t,-300,"Source",0,Source,false,SourceSClass);
      MatCol(t,-240,"Invoiced",0,Invd,false,0);
      if (StandardHansa==false) then begin
        MatCol(t,-160,"#Despatch# Date",0,DespatchRowDate,false,PasteCurDate);
        MatCol(t,-80,"#Despatch# Time",0,DespatchRowTime,false,PasteCurTime);
      end;
      Flip(flipnr); flipnr = flipnr + 1;
      MatCol(1,-400,"Sales A/C",0,SalesAcc,false,AccSClass);
      MatCol(1,-330,"Cost A/C",0,CostAcc,false,AccSClass);
      MatCol(1,-250,"Objects",0,Objects,false,ObjSClass);
      MatCol(1,-135,"Width",0,UnitXval,true,0);
      MatCol(1,-90,"Height",0,UnitYval,true,0);
      MatCol(1,-45,"Depth",0,UnitZval,true,0);
      MatCol(t=kInvoiceRowTypeStructuredItemComponent,-400,"Sales A/C",0,SalesAcc,false,AccSClass);
      MatCol(t,-330,"Cost A/C",0,CostAcc,false,AccSClass);
      MatCol(t,-250,"Objects",0,Objects,false,ObjSClass);
      MatCol(t,-135,"Width",0,UnitXval,true,0);
      MatCol(t,-90,"Height",0,UnitYval,true,0);
      MatCol(t,-45,"Depth",0,UnitZval,true,0);
      if (StandardHansa==false) then begin
        Flip(flipnr); flipnr = flipnr + 1;
        MatCol(1,-300,"Packages",0,RowPackages,false,0);
        MatCol(1,-220,"P.Type",0,PackageType,false,PackTypeSClass);
        MatCol(1,-170,"Package Desc",0,PackageDesc,false,0);
        MatCol(1,-70,"Excise",0,ExciseNr,false,0);
        MatCol(t=kInvoiceRowTypeStructuredItemComponent,-300,"Packages",0,RowPackages,false,0);
        MatCol(t,-220,"P.Type",0,PackageType,false,PackTypeSClass);
        MatCol(t,-170,"Package Desc",0,PackageDesc,false,0);
        MatCol(t,-70,"Excise",0,ExciseNr,false,0);
      end;
    end;
    InsertRowTest;
    DeleteRowTest;
    RowMenuBegin("");
    RowMenuItem(0,"Item Status",'I','I',0,"ItemStatusSHDsm");
    if (IsEnterprise) then begin
      if (StandardHansa==false) then begin
        RowMenuItem(0,"Split Row",' ',' ',0,"SplitRowSHDsm");
      end;
    end;
    EndRowMenu;
    EndMatrix;
    vs = 22;
  //  v = 21;
    v = v + 1;
    if (flipnr>2) then begin
      for (f=1;f<flipnr;f=f+1) begin
        VTab(-35,v,-16,v+vs,ToolFlip,f,chr(asc("A") + f - 1));
        v = v + vs;
      end;
    end;

  //  CheckBox(20,-20,0,"OK",OKFlag);
    if (HasLocalization("PRT")) then begin
      EditField(120,-20,150,"Tax Seal",ViewOnly,TaxAdminServSeal,false,0);
  //    SoftEditField(120,-20,150,"Tax Auth. Approval",Normal,"TaxAdminServSeal",false,0,M4Str,200);
    end;
    EditField(-131,-20,80,"Total Qty",ViewOnly,TotQty,true,0);
    if (IsEnterprise) then begin
      Tile(tilenr,90,false,tilenr,ShipMode); tilenr = tilenr + 1;
      vs = 20;
      EditField(h1,v=vm,82,"Del. Mode",Normal,ShipMode,false,DMSClass);
      EditField(h1,v+=vs,80,"Tax Sum",ViewOnly,TAX1Sum,true,0);
      if (StandardHansa==false) then begin
        EditField(h1,v+=vs,80,"Declared Value",Normal,DeclaredVal,true,0);
        EditField(h1,v+=vs,-20,"E-Shipment status",ViewOnly,EShipStatus,false,0);
        if (HasLocalization("BRA,BOL,PRT")) then begin
          EditField(h1,v+=vs,80,"Tax Seal",ViewOnly,TaxAdminServSeal,false,0);
        end;
      end;
      EditField(h2,v=vm,80,"Total Quantity",ViewOnly,TotQty,true,0);
      EditField(h2,v+=vs,80,"Total Weight",Normal,TotWeight,true,0);
      EditField(h2,v+=vs,80,"Total Volume",Normal,TotVolume,true,0);
      CheckBox(473,v=vm,0,"Use Invoice Address",Check2);
      if (StandardHansa==false) then begin
        CheckBox(473,v+=16,0,"Electronic Shipment Created",EShipmentCreated);
        CheckBox(473,v+=16,0,"Electronic Shipment Collected",EShipCollected);
      end;
      Tile(tilenr,110,false,tilenr,Packages); tilenr = tilenr + 1;
      h2 = 310;
      EditField(h1,v=6,82,"Transport No.",Normal,TransportNumber,false,0);
      EditField(h1,v+=vs,82,"Packages",Normal,Packages,true,0);
      if (HasLanguages) then begin
        EditField(h1,v+=vs,82,"Language",Normal,LangCode,false,LangSClass);
      end;
      EditField(h1,v+=vs,82,"Currency",Normal,CurncyCode,false,CurncyCodeSClass);
      if (StandardHansa==false) then begin
        EditField(h1,v+=vs,-20,"Transp. Directives",Normal,TransportDirect,false,0);
        EditField(h1,v+=vs,80,"Plan. Sent Date",Normal,PlanSendDate,false,PasteCurDate);
        EditField(h1,v+=vs,80,"Plan. Sent Time",Normal,PlanSendTime,false,PasteCurTime);
      end;

      EditField(h2,v=6,135,"From City",Normal,FromCity,false,0);
      EditField(h2,v+=vs,135,"To City",Normal,ToCity,false,0);
      EditField(h2,v+=vs,135,"From Dock",Normal,FromDock,false,0);
      EditField(h2,v+=vs,135,"To Dock",Normal,ToDock,false,0);
      if (StandardHansa==false) then begin
        EditField(h2,v+=2*vs,80,"Plan. Arrival Date",Normal,PlanArrDate,false,PasteCurDate);
        EditField(h2,v+=vs,80,"Plan. Arrival Time",Normal,PlanArrTime,false,PasteCurTime);
      end;
    end;
    Tile(tilenr,150,false,tilenr,Addr1); tilenr = tilenr + 1;
    vs = 20;
    if (IsEnterprise) then begin
      if (StandardHansa==false) then begin
        EditField(h1,v=6,80,"Address Code",Normal,DelAddrCode,false,DelAddr3SClass);
        EditField(h1,v+=vs,-20,"Delivery",Normal,Addr1,false,0);
      end else begin
        EditField(h1,v=6,-20,"Delivery",Normal,Addr1,false,0);
      end;
      EditField(h1,v+=vs,-20,"Address",Normal,Addr2,false,0);
    end else begin
      EditField(h1,v=6,-20,"Address",Normal,Addr1,false,0);
      EditField(h1,v+=vs,-20,"",Normal,Addr2,false,0);
    end;
    EditField(h1,v+=vs,-20,"",Normal,Addr3,false,0);
    EditField(h1,v+=vs,-20,"",Normal,DelAddr3,false,0);
    EditField(h1,v+=vs,-20,"",Normal,DelAddr4,false,0);
    if (HasCountryPerCustomer) then begin
      EditField(h1,v+=vs,80,"Country",Normal,DelCountry,false,CountrySClass);
      if (HasLocalization("BRA")) then begin
        EditField(h2-109,v,232,"",ViewOnly,DelCountryName,false,0);
      end;
    end;
    if (IsEnterprise) then begin
      EditField(h3,v,-20,"Region",Normal,Region,false,RegionSClass);
      Tile(tilenr,30,false,tilenr,Comment); tilenr = tilenr + 1;
      EditField(h1+10,v=6,-20,"Comment",Normal,Comment,false,0);
      EditField(h1+10,v+=20,-20,"Sales Contract Type",Normal,ORCOType,false,0);
      if (HasNumberSeries and HasLocalization("PRT")) then begin
        if (HasOfficialSerNr) then begin
          EditField(h1+10,v+=vs,100,"Official Ser No. 2",Normal,OfficialSerNr2,false,0);
          EditField(h2,v,135,"Status",Normal,Status,false,SetSClass);
        end;
      end;
    end else begin
      if (HasLocalization("RUS")) then begin
        EditField(h1,v+=vs,80,"Total Weight",Normal,TotWeight,true,0);
      end;
    end;
    if (IsStandardProduct and HasLocalization("PRT,LTU") and HasModIN and HasModSL) then begin
      Tile(tilenr,110,false,tilenr,PlanSendDate); tilenr = tilenr + 1;
      h2 = 310;
      EditField(h1,v=6,80,"Plan. Sent Date",Normal,PlanSendDate,false,PasteCurDate);
      EditField(h1,v+=vs,80,"Plan. Sent Time",Normal,PlanSendTime,false,PasteCurTime);
      if (HasLocalization("PRT")) then begin
        EditField(h2,v=6,80,"Plan. Arrival Date",Normal,PlanArrDate,false,PasteCurDate);
        EditField(h2,v+=vs,80,"Plan. Arrival Time",Normal,PlanArrTime,false,PasteCurTime);
      end;
    end;
    if (IsEnterprise or HasLocalization("PRT,LTU")) and (StandardHansa==false) then begin
      Tile(tilenr,130,false,tilenr,FreightCode); tilenr = tilenr + 1;
      if (IsEnterprise) then begin
        HalPushButton(473,2,600,22,"UpdateSHPackages","Define Packages");
      end;
      EditField(h1,v=6,80,"Freight Company",Normal,FreightCode,false,FreightCompanySClass);
      EditField(h1,v+=vs,-20,"Name",Normal,FreightCompany,false,0);
      EditField(h1,v+=vs,-20,"#Reg. No.#",Normal,FreightCompanyRegNr,false,0);
      EditField(h1,v+=vs,-20,"Truck Information",Normal,TruckInfo,false,0);
      if (IsEnterprise or HasLocalization("PRT")) then begin
        EditField(h1,v+=vs,-20,"Driver",Normal,Driver,false,0);
        EditField(h1,v+=vs,-20,"CMR",Normal,CMRText,false,0); // International transporting number
      end;
    end;
    if (GuiType==kGuiMetro) then begin // Temporarily disabled on Windows 8
      SpecialMenu("Item Status",'I',2,"ItemStatusSHDsm");
      if (HasIntegratedNL) then begin
        SpecialMenu("Open #NL# Transaction",'t',3,"OpenTRFromSH");
      end;
      SpecialMenu("Print Freight Labels",'l',0,"PrintSHLabSHDsm");
      if (HasReturnedGoods and HasModIN) then begin
        SpecialMenu("Create Returned Goods",'B',5,"RetFromSHSpec");
      end;
    end else begin
    SpecialMenu("Print Freight Labels",'l',0,"PrintSHLabSHDsm");
    SpecialMenu("Transfer imported quantity",' ',0,"BLT_TransImpQuantSHDsm"); //EBS
    if (IsEnterprise) then begin
      SpecialMenu("Recalculate Weight",'w',1,"SHCalcWeightDsm");
    end;
    if (HasIntegratedNL) then begin
      SpecialMenu("Open #NL# Transaction",'t',3,"OpenTRFromSH");
    end;
    if (HasLocalization("SWE")) then begin
      SpecialMenu("ASG Export",' ',4,"ASGEnSHDsm"); /* Specific for Sweden */
    end;
    if (HasLocalization("NOR")) then begin
      SpecialMenu("Winedi Export",' ',4,"WinEDIEnSHDsm"); /* Specific for Norway */
    end;
    if (HasLocalization("PRT")) then begin
      if (HasETaxDocuments) then begin
        SpecialMenu("Send to Tax Authorities",'',10,"EShipPRTDsm");
      end;
    end;
    if (IsEnterprise) then begin
      SpecialMenu("Refill Batch No. Items",' ',6,"INBatchSHSpec");
    end;
    if (HasModWHM) then begin
      SpecialMenu("OK Warehouse #Stock# Movements",' ',8,"OKStockMovSHrDsm");
      SpecialMenu("Warehouse Picking List",' ',9,"PickingListDsm");
    end;
  //  SpecialMenu("Calculate Manually",' ',10,"CalcSHMan"); /* Specific for one customer in Portugal, you may comment it out */
    if (IsEnterprise) then begin
      if (StandardHansa==false) then begin
        SpecialMenu("Register Electronic Shipment",' ',9,"EShipRegisterDsm");
      end;
      if (GuiType==kGuiiPhone) then begin
        SpecialMenu("Sign",' ',10,"SignSHDsm");
      end;
    end;
    SpecMenuGroup("",kSpecMenuGroupTypeExtendedPlusMenu,0);
    if (HasModSL) then begin
      SpecialMenu("Invoice",'F',1,"IVFromSHDsm");
    end;
    if (IsEnterprise or HasReturnedGoods) then begin
      SpecialMenu("Returned Goods",'B',2,"RetFromSHDsm");
    end;
    end;
  EndWindow;

  return;
end;

window ProdDClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h2,h3,h4,v,vm,vs;
  Integer rn,flipnr,f;

  WindowBegin("Production",ProdDClass,CGview,-);
  SetWRect(20,80,620,333);
  Sizeable(-1,-1,0,0);
  UseView(ProdVc);
  FormName(ProdOrderForm);
  ActiveFieldOnNew("Recepy");
  Tile(0,195,false,"",SerNr);
  vs = 20; h = 70; h2 = 390; v = 10; h3 = 500; h4 = 220;
  EditField(h,v,80,"No.",St_i,SerNr,false,TSerSClass);
  EditField(h4,v,250,"Name",Normal,RecName,false,0);
  EditField(h,v+=vs,80,"Recipe",Normal,Recepy,false,RecSClass);
  EditField(h4,v,80,"Start Date",Normal,StartDate,false,PasteCurDate);
  EditField(h2,v,80,"End Date",Normal,ProdDate,false,PasteCurDate);
  EditField(h,vm=(v+=vs),80,"Qty",Normal,Qty,true,0);
  if (IsEnterprise) then begin
  EditField(h4,v,80,"Start Time",Normal,StartTime,false,PasteCurTime);
  EditField(h2,v,80,"End Time",Normal,EndTime,false,PasteCurTime);
  end;
  if (HasMultiLocations) then begin
  EditField(h,v+=vs,80,"Location",Normal,Location,false,LocationSClass);
  end;
  if (IsEnterprise) then begin
    EditField(h4,v,80,"Class",Normal,ProdClass,false,ProdClassSClass);
    EditField(h2,v,80,"Machine",Normal,FixAssCode,false,AT2UnitSClass);
  end;
  if (IsEnterprise) then begin
  EditField(h,v+=vs,80,"Inspector",Normal,Inspector,false,UserSClass);
  end;
  if (HasPersons) then begin
  EditField(h2,v,80,"Person",Normal,Person,false,UserSClass);
  end;
//  EditField(h2,v,80,"In Item Scale",Normal,Scale,false,0);
  if (IsEnterprise) then begin
    EditField(h,v+=vs,80,"Prod. Ord.",ViewOnly,ProdOrder,false,0);
    EditField(h2,v,80,"Discarded Reason",Normal,StandProblem,false,StandProblemsSClass);
  end else begin
    EditField(h2,v+=vs,80,"Discarded Reason",Normal,StandProblem,false,StandProblemsSClass);
  end;
  if (IsEnterprise) then begin
    EditField(h,v+=vs,80,"Actual Qty",ViewOnly,ActualQty,true,0);
    EditField(h2,v,80,"Routing",Normal,Routing,false,RoutingSClass);
  end;
  EditField(h,v+=vs,80,"Box item",Normal,DefBoxItem,false,BLT_BoxItemsSClass); //EBS
  EditField(h2,v,80,"Qty in box",Normal,QtyInBox,true,0); //EBS
//  ButtonFrame(h3,v+=36,80,3,"Inspection");
//  RadioButton(h3,v,0,0,"Not done",InspectStatus);
//  RadioButton(h3,v+=16,1,0,"OK",InspectStatus);
//  RadioButton(h3,v+=16,2,0,"Faulty",InspectStatus);
  TileButton(1,"Items");
  TileButton(2,"Comment");
//  CheckBox(370,v,0,"Reserved",Reserved);
  ButtonFrame(h3,v=20,150,5,"Status");
  RadioButton(h3,v,0,0,"Created",PRStatusFlag);
  RadioButton(h3,v+=16,4,0,"Cancelled",PRStatusFlag);
  RadioButton(h3,v+=16,2,0,"Started",PRStatusFlag);
  RadioButton(h3,v+=16,3,0,"Finished",PRStatusFlag);
  RadioButton(h3,v+=16,5,0,"Finished but Discarded",PRStatusFlag);
  HalPushButton(h3,v+=20,-20,V+20,"ProdVc_ReadWeightBtn","Read weight"); //EBS
  HalPushButton(h3,v+20,-20,v+20,"ProdVc_PrintLabelsBtn","Print labels"); //EBS
  Tile(1,120,true,"1",Math);
  v=20;
  MatrixBegin(4,v,-50,-30,-,300);
  Flip(0);
  MatCol(1,34,"Item",0,Item,false,INSClass);
  MatCol(1,110,"Descr.",0,Comment,false,0);
  flipnr = 1;
  Flip(flipnr); flipnr = flipnr + 1;
  if (HasSerialNumbers) then begin
  MatCol(1,-375,"Serial No.",0,SerialNr,false,SerialNrSClass);
  end;
  MatCol(1,-310,"In",0,InQty,true,MATVARINSClass);
  MatCol(1,-260,"Out",0,OutQty,true,MATVARINSClass);
  if (IsEnterprise) then begin
  MatCol(1,-210,"Rel.",0,RelVal,true,0);
  end;
  MatCol(1,-160,"I-cost",0,ItemCost,true,0);
  if (IsEnterprise) then begin
  MatCol(1,-100,"W-cost",0,ExtraCost,true,0);
  end;
  MatCol(1,-40,"Coeff",0,Coefficient,false,0);
  if (IsEnterprise) then begin
    Flip(flipnr); flipnr = flipnr + 1;
  MatCol(1,-375,"Objects",0,Objects,false,ObjSClass);
  MatCol(1,-310,"In",0,InQty,true,0);
  MatCol(1,-260,"Out",0,OutQty,true,0);
  MatCol(1,-210,"Actual",0,ActualQty,true,0);
  MatCol(1,-160,"Material",0,Material,false,MaterialSClass);
  end;
  if (HasSerialNumbers) then begin
    Flip(flipnr); flipnr = flipnr + 1;
  MatCol(1,-270,"In",0,InQty,true,0);
  MatCol(1,-220,"Out",0,OutQty,true,0);
  MatCol(1,-170,"Serial No.",0,SerialNr,false,SerialNrSClass);
    if (IsEnterprise) then begin
  MatCol(1,-80,"Best Before",0,BestBefore,false,PasteCurDate);
    end;
  end;
  Flip(flipnr); flipnr = flipnr + 1;
  MatCol(1,-270,"In",0,InQty,true,0);
  MatCol(1,-220,"Out",0,OutQty,true,0);
  MatCol(1,-170,"Weight",0,Weight,true,0);
  MatCol(1,-120,"Width",0,UnitXval,true,0);
  MatCol(1,-80,"Height",0,UnitYval,true,0);
  MatCol(1,-40,"Depth",0,UnitZval,true,0);
  if (IsEnterprise) then begin
    Flip(flipnr); flipnr = flipnr + 1;
  MatCol(1,-100,"Dis. Row FIFO",0,OrgProdFIFORowVal,true,0);
  end;
  InsertRowTest;
  DeleteRowTest;
  RowMenuBegin("");
  RowMenuItem(0,"Item Status",'I','I',0,"ItemStatusProdDsm");
  if (IsEnterprise) then begin
  RowMenuItem(0,"Open Batch Specification",' ',' ',0,"OpenBatchProdDsm");
    RowMenuItem(0,"Quality Control",' ',' ',0,"QualConFromProdDsm");
  end;
  EndRowMenu;
  EndMatrix;
  v=v+1;
  if (flipnr>2) then begin
    for (f=1;f<flipnr;f=f+1) begin
      VTab(-35,v,-16,v+vs,ToolFlip,f,chr(asc("A") + f - 1));
      v = v + vs;
    end;
  end;
  if (IsEnterprise) then begin
  EditField(h,-22,60,"In Weight",Normal,TotWeight,false,0);
  EditField(h4,-22,60,"Boxes",Normal,BoxCnt,false,0); //EBS
  EditField(h4+200,-22,60,"Gross Weight",Normal,TotOutWeight,false,0); //EBS edit
  EditField(h4+380,-22,60,"Neto Weight",Normal,NetoWeight,false,0); //EBS
  Tile(2,120,false,"2",Comment);
  EditField(h,v=15,-20,"Comment",Normal,Comment,false,0);
  EditField(h,v+=vs,-20,"",Normal,Comment2,false,0);
  EditField(h,v+=vs,-20,"",Normal,Comment3,false,0);
  EditField(h,v+=vs,-20,"Objects",Normal,Objects,false,ObjSClass);
  EditField(h,v+=vs,60,"Start Time",Normal,StartTime,false,PasteCurTime);
  EditField(210,v,60,"End Time",Normal,EndTime,false,PasteCurTime);
  EditField(h2,v,60,"Break Time",Normal,BreakTime,false,0);
  EditField(h2+200,v,70,"Language",Normal,LangCode,true,LangSCLass);
//  EditField(h2+200,v,80,"AcumCostPrice",ViewOnly,AcumCostPrice,false,0);
  end;
  if (IsEnterprise) then begin
  SpecialMenu("Calculate Cost",' ',0,"ProdFillFIFODsm");
  end;
  if (HasSerialNumbers) then begin
  SpecialMenu("Generate Serial No. for Out Items",' ',1,"GenSerialNosProdDsm");
  end;
  SpecialMenu("Item Search",'f',1,"ItemSearchDsm");
  SpecialMenu("Production Status",'r',4,"ProdStatusFromProdDsm");
  if (HasIntegratedNL) then begin
  SpecialMenu("Open #NL# Transaction",'t',5,"OpenTRFromProd");
  end;
  if (IsEnterprise) then begin
    SpecialMenu("Backflush",' ',6,"ProdBackflushFromProdDsm");
  end;
  SpecMenuGroup("",kSpecMenuGroupTypeExtendedPlusMenu,0);
  SpecialMenu("Disassemble",' ',2,"CreateDisProdFromProd");
  if (HasModCRM) then begin
//    SpecialMenu("Activity",'c',7,"CreateActFromProd");
  end;
  if (HasMultiLocations) then begin
    SpecialMenu("#Stock# Movement",' ',8,"StockMovFromPRDsm");
  end;
  if (IsEnterprise) then begin
    SpecialMenu("Production Operations",' ',9,"ProdOperFromPRDsm");
  end;
  EndWindow;

  return;
end;

window DelRouteDClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vs;
  WindowBegin("Route",DelRouteDClass,CGview,-);
  SetWRect(20,100,530,200);
  UseView(DelRouteVc);
  Sizeable(-1,-1,0,0); //EBS
  h = 120; v = 6; vs = 20;
  EditField(h,v,160,"Code",St_i,Code,false,0);
  EditField(h,v+=vs,-40,"Comment",Normal,Comment,false,0);
  CheckBox(h,v+=30,0,"Mondays",MonFlag);
  CheckBox(h,v+=16,0,"Tuesdays",TueFlag);
  CheckBox(h,v+=16,0,"Wednesdays",WedFlag);
  CheckBox(h,v+=16,0,"Thursdays",ThuFlag);
  CheckBox(h,v+=16,0,"Fridays",FriFlag);
  CheckBox(h,v+=16,0,"Saturdays",SatFlag);
  CheckBox(h,v+=16,0,"Sundays",SunFlag);
  //EBS-->
  MatrixBegin(4,v+=40,-32,-40,-,200);
  MatCol(1,24,"Del. order",0,DelOrder,false,0);
  MatCol(1,94,"Customer",0,CustCode,false,CUSClass);
  MatCol(1,164,"Name",0,Comment,false,0);
  EndMatrix;
  //EBS <--
  EndWindow;
end;

window StockMovDClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h1,h2,h3,h4,v,vm,vs;
  Integer tilenr,f,flipnr;

  WindowBegin("#Stock# Movement",StockMovDClass,CGview,-);
  if (HasJewelleryInterface) then begin
    SetWRect(20,80,850,400);
  end else begin
    SetWRect(20,80,700,400);
  end;
  Sizeable(-1,-1,0,0);
  UseView(StockMovVc);
  ActiveFieldOnNew("SentTransDate");
  Tile(0,90,false,"",TransDate);
  v = 6; vs = 20; h = 110; h2 = 300; h3 = 500; h4 = 620;
  EditField(h,v,80, "No.",Normal,SerNr,false,TSerSClass);
  CheckBox(h2,v,0,"Reserved",Reserved);
  EditField(h3,v,80,"Reason",Normal,Reason,false,StandProblemsSClass);
  EditField(h,v+=vs,80,"Ord. Date",Normal,OrdTransDate,false,PasteCurDate);
  if (HasMultiLocations) then begin
    if (IsEnterprise) then begin
      EditField(h2,v,80,"Sent Date",Normal,SentTransDate,false,PasteCurDate);
    end;
  end;
  EditField(h3,v,80,"Received Date",Normal,TransDate,false,PasteCurDate);
  if (HasMultiLocations) then begin
    EditField(h,v+=vs,80, "From Location",Normal,FrLocation,false,LocationSClass);
    if (IsEnterprise) then begin
      EditField(h2,v,80,"Via Location",Normal,ThrouLocation,false,LocationSClass);
    end;
    EditField(h3,v,80,"To Location",Normal,ToLocation,false,LocationSClass);
  end;
  if (HasLocalization("PRT") and HasConsStockMoveInvoices) then begin
    EditField(h,v+=vs,80, "Invoice nr.",ViewOnly,InvoiceNr,false,0);
    EditField(h2,v,80,"Invoice date",ViewOnly,InvDate,false,0);
    EditField(h3,v,80,"Invoice off.nr.",ViewOnly,InvoiceOfficialSerNr,false,0);
  end;
  tilenr = 1;
  if (HasPositions or HasModWHM or HasLocalization("PRT")) then begin
    TileButton(tilenr,"Positions"); tilenr = tilenr + 1;
  end;
  if (HasObjects) then begin
    TileButton(tilenr,"Objects"); tilenr = tilenr + 1;
  end else begin
    TileButton(tilenr,"Comment"); tilenr = tilenr + 1;
  end;
  TileButton(tilenr,"Items"); tilenr = tilenr + 1;
  if (HasMultiCurrency or HasBase2) then begin
    TileButton(tilenr,"Currency"); tilenr = tilenr + 1;
  end;
  TileButton(tilenr,"Durations"); tilenr = tilenr + 1;
  TileButton(tilenr,"Freight"); tilenr = tilenr + 1;
  TileButton(tilenr,"Address"); tilenr = tilenr + 1;
  tilenr = 1;
  if (HasPositions or HasModWHM or HasLocalization("PRT")) then begin
    Tile(tilenr,60,false,tilenr,FrPos); tilenr = tilenr + 1;
    v = 6;
    if (HasPositions) then begin
      EditField(h,v,80, "From Position",Normal,FrPos,false,UsedPosSClass);
      EditField(h2,v,80,"To Position",Normal,ToPos,false,FreePosSClass);
      EditField(h2,v+20,80,"Forklifter",Normal,ForkliftUser,false,UserSClass); //EBS
    end;
    if (HasModProd) then begin
      EditField(h3,v,80,"For Production",Normal,ProdSerNr,false,ProdSClass); v = v + vs;
      EditField(h3,v,150,"Route",Normal,Sorting,false,DelRouteSClass); v = v + vs;
    end;
    if ((HasLocalization("PRT") and HasModIN and HasMultiLocations) or IsStandardProduct==false) then begin
      EditField(h3,v,150,"Type",Normal,StockMovType,false,SetSClass); v = v + vs;
    end;
    if (HasModWHM) then begin
      v = 6 + vs;
      CheckBox(h,v,0,"Manual Pick",ManualPick);
      CheckBox(h,v+=16,0,"Send To Forklift Queue",ToForkLiftQue);
    end;
  end;
  Tile(tilenr,70,false,tilenr,Comment); tilenr = tilenr + 1;
  v = 6;
  if (HasObjects) then begin
    EditField(h,v,-20,"Objects",Normal,Objects,false,ObjSClass);
    v = v + vs;
  end;
  EditField(h,v,-20,"Comment",Normal,Comment,false,0);
  EditField(h,v+=vs,135,"Official Ser. No.",Normal,OfficialSerNr,false,LegalInvNrSClass);
  EnterSkip(Math);
  Tile(tilenr,79,true,tilenr,Math); tilenr = tilenr + 1;
  v = 24;
  MatrixBegin(4,v,-50,-50,-,199);
  Flip(0);
  flipnr = 1;
  if (HasJewelleryInterface) then begin
    MatCol(1,32,"Serial No.",0,SerialNr,false,SerialNrSClass);
    EnterSkip(Quant);
    MatCol(1,130,"Item",0,ArtCode,false,INSClass);
    Flip(flipnr); flipnr = flipnr + 1;
    if (HasVarieties) then begin
      MatCol(1,200,"Req. Qty",0,OrdQuant,true,MATVARINSClass);
    end else begin
      if (HasThrouLocation) then begin
        MatCol(1,200,"Req. Qty",0,OrdQuant,true,0);
      end;
    end;
    if (HasThrouLocation) then begin
      MatCol(1,250,"Sent Qty",0,SentQuant,true,0);
    end;
    MatCol(1,300,"Rcvd. Qty",0,Quant,true,0);
    MatCol(1,350,"Description",0,Spec,false,0);
  end else begin
    MatCol(1,32,"Item",0,ArtCode,false,INSClass);
    Flip(flipnr);  flipnr = flipnr + 1;
    if (HasVarieties) then begin
      MatCol(1,86,"Req. Qty",0,OrdQuant,true,MATVARINSClass);
    end else begin
      if (HasThrouLocation) then begin
        MatCol(1,86,"Req. Qty",0,OrdQuant,true,0);
      end;
    end;
    if (HasThrouLocation) then begin
      MatCol(1,148,"Sent Qty",0,SentQuant,true,0);
    end;
    MatCol(1,210,"Rcvd. Qty",0,Quant,true,0);
    MatCol(1,272,"Description",0,Spec,false,0);
  end;
  MatCol(1,-260,"R. Old Unit Pr.",0,OldPrice,true,0);
  MatCol(1,-160,"R. Extra Cost",0,ExtraSCost,true,0);
  MatCol(1,-80,"R. New Unit Pr.",0,NewPrice,true,0);
  Flip(flipnr); flipnr = flipnr + 1;
  if (HasVarieties) then begin
    MatCol(1,86,"Req. Qty",0,OrdQuant,true,MATVARINSClass);
  end else begin
    if (HasThrouLocation) then begin
      MatCol(1,86,"Req. Qty",0,OrdQuant,true,0);
    end;
  end;
  if (HasThrouLocation) then begin
    MatCol(1,148,"Sent Qty",0,SentQuant,true,0);
  end;
  MatCol(1,210,"Rcvd. Qty",0,Quant,true,0);
  MatCol(1,272,"Description",0,Spec,false,0);
  MatCol(1,-260,"#S.# Old Unit Pr.",0,SentOldPrice,true,0);
  MatCol(1,-160,"#S.# Extra Cost",0,SentExtraSCost,true,0);
  MatCol(1,-80,"#S.# New Unit Pr.",0,SentNewPrice,true,0);
  Flip(flipnr); flipnr = flipnr + 1;
  MatCol(1,86,"Description",0,Spec,false,0);
  if (HasObjects) then begin
    MatCol(1,-380,"Objects",0,Objects,false,ObjSClass);
  end;
  if (HasSerialNumbers) then begin
    MatCol(1,-280,"Serial No.",0,SerialNr,false,SerialNrSClass);
  end;
  MatCol(1,-140,"Base Price",0,BasePrice,true,0);
  MatCol(1,-40,"Coeff",0,Coefficient,false,0);
  Flip(flipnr); flipnr = flipnr + 1;
  MatCol(1,86,"Description",0,Spec,false,0);
  if (HasSerialNumbers) then begin
    MatCol(1,-280,"Serial No.",0,SerialNr,false,SerialNrSClass);
  end;
  MatCol(1,-180,"Width",0,UnitXval,true,0);
  MatCol(1,-135,"Height",0,UnitYval,true,0);
  MatCol(1,-90,"Depth",0,UnitZval,true,0);
  MatCol(1,-45,"Sales ord. row",0,OrderRowNr,false,0);
  if (HasPositions) then begin
    Flip(flipnr); flipnr = flipnr + 1;
    MatCol(1,86,"Description",0,Spec,false,0);
    MatCol(1,-180,"From Position",0,FrPosCode,false,UsedPosSClass);
    MatCol(1,-90,"To Position",0,ToPosCode,false,FreePosSClass);
  end;
  DeleteRowTest;
  RowMenuBegin("");
  RowMenuItem(0,"Item Status",'I','I',0,"ItemStatusStockMovDsm");
  if (HasQualityControl) then begin
    RowMenuItem(0,"Quality Control",'u','u',0,"QualConFromStockMovDsm");
  end;
  EndRowMenu;
  EndMatrix;
  vs = 20;
  v = 18;
  if (flipnr>2) then begin
    for (f=1;f<flipnr;f=f+1) begin
      VTab(-35,v,-16,v+vs,ToolFlip,f,chr(asc("A") + f - 1));
      v = v + vs;
    end;
  end;
  if (HasThrouLocation) then begin
    CheckBox(20,-52,0,"Confirmed",OrdFlag);
    CheckBox(20,-36,0,"Sent",SentOKFlag);
  end;
  CheckBox(20,-20,0,"Received",OKFlag);
  if (HasThrouLocation) then begin
    EditField(170,-20,62,"Sent Qty",Normal,TotSentQty,true,0);
  end;
  EditField(310,-20,62,"Rcvd. Qty",Normal,TotQty,true,0);
  if (HasLocalization("HRV,PRT")) then begin
    EditField(550,-40,150,"Tax Seal",ViewOnly,TaxAdminServSeal,false,0);
//    SoftEditField(550,-40,150,"Tax Auth. Approval",Normal,"TaxAdminServSeal",false,0,M4Str,200);
  end;
  EditField(550,-20,100,"Non Accounted Extra Costs",Normal,OtherExtraCosts,false,0);
  if (HasMultiCurrency or HasBase2) then begin
    Tile(tilenr,70,false,tilenr,FrRate); tilenr = tilenr + 1;
    h1 = 110; vs = 20;
    if (HasBase2) then begin
      h1 = h1 + 20;
    end;
    EditField(h1,v=6,50,"Currency",Normal,CurncyCode,false,CurncyCodeSClass);
    if (HasMultiCurrency) then begin
      if (HasBase2) then begin
        EditField(h1,v+vs,50,"Base Currency 1",Normal,BaseRate1,true,0);
      end else begin
        EditField(h1,v+vs,50,"Base Currency",Normal,BaseRate1,true,0);
      end;
      if (HasBase2) then begin
        EditField(h1,v+(vs*2),50,"Base Currency 2",Normal,BaseRate2,true,0);
      end;
      EditField(h2=295,v,50,"Rate",Normal,FrRate,true,0);
      if (HasBase2) then begin
        RateField(h3=360,v,50,":",Normal,"ToRateB1",true,h3+60,v+14,"Base Currency 1",false);
        RateField(h3,v+=vs,50,":",Normal,"ToRateB2",true,h3+60,v+14,"Base Currency 2",false);
      end else begin
        RateField(h3=360,v,50,":",Normal,"ToRateB1",true,h3+60,v+14,"Base Currency",false);
      end;
    end else begin
      EditField(h1,v+=vs,50,"Base Currency 1",Normal,BaseRate1,true,0);
      EditField(h1,v+=vs,50,"Base Currency 2",Normal,BaseRate2,true,0);
    end;
  end;
  Tile(tilenr,110,false,tilenr,PlanSendDate); tilenr = tilenr + 1;
  vs = 20; h1 = 130; h2 = 330; h3 = 560;
  EditField(h,v=6,80,"Plan. Sent Date",Normal,PlanSendDate,false,PasteCurDate);
  EnterSkip(PlanSendTime);
  if (HasLocalization("PRT")==false or IsStandardProduct==false) then begin
    EditField(h2,v,40,"Plan. Duration Days",ViewOnly,PlanDurationDays,false,0);
  end;
  EditField(h,v+=vs,80,"Plan. Sent Time",Normal,PlanSendTime,false,PasteCurTime);
  EnterSkip(PlanArrDate);
  if (HasLocalization("PRT")==false or IsStandardProduct==false) then begin
    EditField(h2,v,80,"Plan. Duration Hours",ViewOnly,PlanDurationTime,false,0);
  end;
  EditField(h3,v=6,80,"Plan. Arrival Date",Normal,PlanArrDate,false,PasteCurDate);
  EditField(h3,v+=vs,80,"Plan. Arrival Time",Normal,PlanArrTime,false,PasteCurTime);
  if (HasLocalization("PRT")==false or IsStandardProduct==false) then begin
    EditField(h,vm=(v+=32),80,"Actual Sent Date",Normal,ActSendDate,false,PasteCurDate);
    EnterSkip(ActSendTime);
    EditField(h2,v,40,"Actual Duration Days",ViewOnly,ActDurationDays,false,0);
    EditField(h,v+=vs,80,"Actual Sent Time",Normal,ActSendTime,false,PasteCurTime);
    EnterSkip(ActArrDate);
    EditField(h2,v,80,"Actual Duration Hours",ViewOnly,ActDurationTime,false,0);
    EditField(h3,v=vm,80,"Actual Arrival Date",Normal,ActArrDate,false,PasteCurDate);
    EditField(h3,v+=vs,80,"Actual Arrival Time",Normal,ActArrTime,false,PasteCurTime);
  end;
  Tile(tilenr,110,false,tilenr,FreightCode); tilenr = tilenr + 1;
  vs = 20; h2 = 255;
  EditField(h=130,v=6,60,"Freight Company",Normal,FreightCode,false,FreightCompanySClass);
  EditField(h2,v,-40,"#Reg. No.#",Normal,FreightCompanyRegNr,false,0);
  EditField(h,v+=vs,-40,"Name",Normal,FreightCompany,false,0);
  EditField(h,v+=vs,-40,"Truck Information",Normal,TruckInfo,false,0);
  EditField(h,v+=vs,-40,"Driver",Normal,Driver,false,0);
  EditField(h,v+=vs,-40,"CMR",Normal,CMRText,false,0);
  if (HasNumberSeries and HasLocalization("PRT")) then begin
    if (HasOfficialSerNr) then begin
      EditField(h,v+=vs,100,"Official Ser No. 2",Normal,OfficialSerNr2,false,0);
      EditField(h2+100,v,135,"Status",Normal,Status,false,SetSClass);
    end;
  end;
  Tile(tilenr,200,false,tilenr,FrAddr0); tilenr = tilenr + 1;
  vs = 20; h2 = 255;
  EditField(h=130,v=6,-40,"From Address",Normal,FrAddr0,false,0);
  EditField(h,v+=vs,-40,"",Normal,FrAddr1,false,0);
  EditField(h,v+=vs,-40,"",Normal,FrAddr2,false,0);
  EditField(h,v+=vs,-40,"",Normal,FrAddr3,false,0);
  EditField(h,v+=vs,-40,"",Normal,FrAddr4,false,0);
  if (HasThrouLocation) then begin
    EditField(h,v+=vs,-40,"Via Address",Normal,ThrouAddr0,false,0);
    EditField(h,v+=vs,-40,"",Normal,ThrouAddr1,false,0);
    EditField(h,v+=vs,-40,"",Normal,ThrouAddr2,false,0);
    EditField(h,v+=vs,-40,"",Normal,ThrouAddr3,false,0);
    EditField(h,v+=vs,-40,"",Normal,ThrouAddr4,false,0);
  end;
  EditField(h,v+=vs,-40,"To Address",Normal,ToAddr0,false,0);
  EditField(h,v+=vs,-40,"",Normal,ToAddr1,false,0);
  EditField(h,v+=vs,-40,"",Normal,ToAddr2,false,0);
  EditField(h,v+=vs,-40,"",Normal,ToAddr3,false,0);
  EditField(h,v+=vs,-40,"",Normal,ToAddr4,false,0);
  SpecialMenu("Cost Price in Old Unit Price",'=',0,"StockMovFillFIFODsm");
  SpecialMenu("Item Search",'f',1,"ItemSearchDsm");
  if (HasIntegratedNL) then begin
    SpecialMenu("Open #NL# Transaction Sent",' ',2,"OpenTRFromStockMovSent");
    SpecialMenu("Open #NL# Transaction Received",'t',3,"OpenTRFromStockMov");
  end;
  if (HasLocalization("PRT")) then begin
    if (HasETaxDocuments) then begin
      SpecialMenu("Send to Tax Authorities",'',10,"EShipPRTDsm");
    end;
  end;
  if (HasConsStockMoveInvoices) then begin
     SpecialMenu("Print stock movement invoices",'p',3,"PrintStockMovInvoices");
   end;
  EndWindow;
end;

window StockMovJRClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vm,vs;
  WindowBegin("Specify #Stock# Movement Journal",StockMovJRClass,CGRcW,RcType);
  SetWRect(20,80,460,380);
  vs = 20; h = 160; v = 6;
  EditFieldTL(h,v,150,"No.",   M4Str,Normal,30,f1,false,0);
  PeriodField(h,v+=vs,"Period");
  EditFieldTL(h,v+=vs,80,"From Location",   M4UStr,Normal,30,f2,false,LocationSClass);
  EditFieldTL(h,v+=vs,80,"To Location",   M4UStr,Normal,30,f3,false,LocationSClass);
  if (StandardHansa==false) then begin
    EditFieldTL(h,v+=vs,80,"Via Location",   M4UStr,Normal,10,FirstAcc,false,LocationSClass);
  end;
  EditFieldTL(h,v+=vs,150,"Item",   M4UStr,Normal,41,f4,false,INSClass);
  if (HasItemGroups) then begin
    EditFieldTL(h,v+=vs,150,"Item group",M4UStr,Normal,50,f5,false,ITSClass);
  end;
  if (HasItemClassification) then begin
    EditFieldTL(h,v+=vs,150,"Item class",M4UStr,Normal,100,f6,false,DISClass);
  end;
  EditFieldTL(h,v+=vs,80,"Forklifter",   M4Code,Normal,10,f10,false,UserSClass);
  EditFieldTL(h,v+=vs,80,"For Production", M4Long,Normal,0,long1,false,ProdSClass);
  vm = v+40;
  ButtonFrame(h=20,v = vm,123,2,"Function");
  RadioButton(h,v,0,0,"Overview",ArtMode);
  RadioButton(h,v+=16,1,0,"Detailed",ArtMode);
  RadioButton(h,v+=16,2,0,"Detailed (tasks)",ArtMode);
  ButtonFrame(h+=138,v = vm,123,3,"Values");
  RadioButton(h,v,0,0,"New Unit Price",flags[4]);
  RadioButton(h,v+=16,1,0,"Old Unit Price",flags[4]);
  RadioButton(h,v+=16,2,0,"Base Price",flags[4]);
  vm = v + 48;
  ButtonFrame(h=20,v=vm,123,3,"Confirmed Status");
  RadioButton(h,v,1,0,"Unconfirmed Only",flags[1]);
  RadioButton(h,v+=16,2,0,"Confirmed Only",flags[1]);
  RadioButton(h,v+=16,0,0,"Both",flags[1]);
  if (StandardHansa==false) then begin
    ButtonFrame(h+=138,v=vm,123,3,"Sent Status");
    RadioButton(h,v,1,0,"Not Sent Only",flags[2]);
    RadioButton(h,v+=16,2,0,"Sent Only",flags[2]);
    RadioButton(h,v+=16,0,0,"Both",flags[2]);
    ButtonFrame(h+=138,v=vm,123,3,"Received Status");
    RadioButton(h,v,1,0,"Not Received Only",flags[5]);
    RadioButton(h,v+=16,2,0,"Received Only",flags[5]);
    RadioButton(h,v+=16,0,0,"Both",flags[5]);
    CheckBox(h=20,v+=32,0,"All between Locations",flags[3]);//?
    CheckBox(h=250,v,0,"Received not matching Sent",flags[6]);
  end;
  EndWindow;
end;

window BLT_CreateSHsFSOsVClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h2,v,vm;
  WindowBegin("Specify Create Deliveries from Orders",BLT_CreateSHsFSOsVClass,CGMnt,RcType);
  SetWRect(20,80,450,390);
  v = 6; h = 150; h2 = 270;
  PeriodField(h,v,"Period");
  EditFieldTL(h,v+=20,150,"Orders",M4UStr,Normal,41,f1,false,0);
  EditFieldTL(h,v+=20,150,"No. Srs. Comment",M4Str,Normal,20,AccStr,false,0);
  EditFieldTL(h,v+=20,150,"Item",M4UStr,Normal,40,f3,false,ForSaleINSClass);
  EditFieldTL(h,v+=20,100,"Planned Del.",M4Str,Normal,10,Stext,false,PasteCurDate);
  CheckBox(h2,v+5,0,"Until Date",flags[5]);
  EditFieldTL(h,v+=20,100,"Delivery Date",M4Date,Normal,0,d1,false,PasteCurDate);
  EditFieldTL(h,v+=20,100,"Route",M4Str,Normal,60,f2,false,DelRouteSClass);
  EditFieldTL(h,v+=20,100,"Order Class",M4UStr,Normal,5,FirstAcc,false,OrderClassSClass);
  EditFieldTL(h,v+=20,100,"Location",M4UStr,Normal,10,f6,false,LocationSClass);
  EditFieldTL(h,v+=20,100,"Freight Company",M4Code,Normal,20,f10,false,FreightCompanySClass); //EBS
  EditFieldTL(h,v+=20,100,"Pallet volume",M4UVal,Normal,0,vals0,false,0); //EBS
  ButtonFrame(h=30,vm=(v+=41),140,2,"Orders");
  RadioButton(h,v,0,0,"Only Fully Shippable",ArtMode);
  RadioButton(h,v+=16,1,0,"All Shippable Orders",ArtMode);
  // CheckBox(h=200,v=(vm-10),0,"Reserved first",flags[1]);
  CheckBox(h=200,v=(vm-10),0,"OK Deliveries",flags[10]);
  CheckBox(h,v+=16,0,"Delivery per Location",flags[2]);
  CheckBox(h,v+=16,0,"Skip Customers with Warnings",flags[3]);
  CheckBox(h,v+=16,0,"Don't check credit limit",flags[4]);
  CheckBox(h,v+=16,0,"Skip rows with nothing to deliver",flags[6]);
  EndWindow;
end;

window LocationDClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h2,l,v,vm,vs;
  Integer tilenr;

  WindowBegin("Location",LocationDClass,CGview,-);
  SetWRect(64,80,570,520);
  UseView(LocationVc);
  v = 10; vs = 20; h = 120; h2 = 340; l = -60;
  if (IsEnterprise) then begin
    Tile(0,50+24,false,"",Code);
  end;
  EditField(h,v,120,"Code",Normal,Code,false,0);
  if (IsEnterprise and StandardHansa==false) then begin
    EditField(h2,v,l,"Group",Normal,Group,false,LocGrSClass);
  end;
  EditField(h,v+=vs,l,"Name",Normal,Name,false,0);
  if (IsEnterprise) then begin
    tilenr = 1;
    TileButton(tilenr,"Address"); tilenr = tilenr + 1;
    TileButton(tilenr,"Logistics"); tilenr = tilenr + 1; //EBS
    if (StandardHansa==false) then begin
      TileButton(tilenr,"Warehouse"); tilenr = tilenr + 1;
    end;
    tilenr = 1;
    Tile(tilenr,350,false,tilenr,Addr0); tilenr = tilenr + 1;
    EditField(h,v=6,l,"Address",Normal,Addr0,false,0);
  end else begin
    EditField(h,v+=vs,l,"Address",Normal,Addr0,false,0);
  end;
  EditField(h,v+=vs,l,"",Normal,Addr1,false,0);
  EditField(h,v+=vs,l,"",Normal,Addr2,false,0);
  EditField(h,v+=vs,l,"",Normal,Addr3,false,0);
  EditField(h,v+=vs,l,"",Normal,Addr4,false,0);
  EditField(h,v+=vs,l,"Contact",Normal,Contact,false,0);
  EditField(h,v+=vs,l,"Telephone",Normal,Phone,false,0);
  EditField(h,v+=vs,l,"Fax",Normal,Fax,false,0);
  EditField(h,v+=vs,l,"E-mail",Normal,Email,false,0);
  if (IsEnterprise) then begin
    if (StandardHansa==false) then begin
      EditField(h,v+=vs,l,"Classification",Normal,Classification,false,LocClSClass);
    end;
    EditField(h,v+=vs,100,"Responsible Person",Normal,RespPerson,false,UserSClass);
    EditField(h2,v,l,"Reserv. Access",Normal,ReservLocAccess,false,ReservLocAccessSClass);
  end;
  if (HasModNL) then begin
    EditField(h,v+=vs,100,"#Stock# A/C",Normal,StockAcc,false,AccSClass);
  end;
  if (HasObjects) then begin
    EditField(h2,v,l,"Object",Normal,Objects,false,ObjSClass);
  end;
  if (IsEnterprise) then begin
  //  EditField(h,v+=vs,100,"Price List",Normal,PriceList,false,PLDefSClass);//No Code
    EditField(h,v+=vs,100,"Purchase Location",Normal,PurLoc,false,LocationSClass);
    if (StandardHansa==false) then begin
      EditField(h2,v,l,"Ship-To Account",Normal,ShipToAccount,false,0);
      EditField(h,v+=vs,100,"Via Location",Normal,ThrouLocation,false,LocationSClass);
    end;
    CheckBox(h,vm=(v+=30),0,"Ignore Chronology",IgnoreChronology);
    if (StandardHansa==false) then begin
      CheckBox(h,v+=vs,0,"Require Position",RequirePos);
    end;
    ButtonFrame(h2,v=vm+10,100,2,"Type");
    RadioButton(h2,v,0,0,"Other",Type);
    RadioButton(h2,v+=16,1,0,"Production",Type);
  end;
  //EBS -->
  Tile(tilenr,160,false,tilenr,ILNCode); tilenr = tilenr + 1;
  EditField(h=160,v=6,150,"ILN Code",Normal,ILNCode,false,0);
  EditField(h,v+=vs,150,"Location Code",Normal,LocationCode,false,0);
  EditField(h,v+=vs,-20,"Delivery import folder",Normal,SHImpFolder,false,0);
  EditField(h,v+=vs,-20,"GR import folder",Normal,PUImpFolder,false,0);
  EditField(h,v+=vs,-20,"Sales Orders export folder",Normal,ORExportFolder,false,0);
  EditField(h,v+=vs,-20,"Purchase Orders export folder",Normal,POExportFolder,false,0);
  CheckBox(h,v+=20,0,"Automatically send Sales Orders",AutoExpOR);
  CheckBox(h,v+=16,0,"Automatically send Purchase Orders",AutoExpPO);
  //EBS <--
  if (HasModWHM) then begin
    Tile(tilenr,310,false,tilenr,WHMPalletArea); tilenr = tilenr + 1;
    EditField(h=200,v=6,l=100,"Empty Pallets Area",Normal,WHMPalletArea,false,LocAreaSClass);
    EditField(h,v+=vs,l,"Picking Area",Normal,WHMPickArea,false,LocAreaSClass);
    EditField(h,v+=vs,l,"Position for Goods Receipts",Normal,WHMDefPUPosCode,false,PosSClass);
    EditField(h,v+=vs,l,"Position for Production",Normal,WHMDefProdPosCode,false,PosSClass);
    EditField(h,v+=vs,l,"Wrapping Machine Position",Normal,WHMWraperPosCode,false,PosSClass);
    EditField(h,v+=vs,l,"Delivery Position for Picking",Normal,WHMDeliveryPosCode,false,PosSClass);//the same as WraperPosCode at ethe moment
    EditField(h,v+=vs,l,"Delivery Area",Normal,WHMDeliveryArea,false,LocAreaSClass);
    EditField(h,v+=vs,l,"Express Orders",Normal,WHMExpressOrderClass,false,OrderClassSClass);
    EditField(h,v+=vs,l,"Def. #Supplier#",Normal,WHMDefPUVECode,false,VESClass);
    EditField(h,v+=vs,l,"Def. pallet item",Normal,DefaultPalItem,false,INSClass); //EBS
    CheckBox(h,v+=24,0,"Require Position",RequirePos);
    CheckBox(h,v+=16,0,"Start from Highest Position",WHMHighestPosCodeFirst);
    ButtonFrame(h,v+=40,140,3,"Forklift System");
    RadioButton(h,v,0,0,"O_ff",WHMForkLiftSystem);
    RadioButton(h,v+=16,1,0,"On",WHMForkLiftSystem);
    RadioButton(h,v+=16,2,0,"On, Picking Mode Off",WHMForkLiftSystem);
  end;
  EndWindow;
end;

window ItemSettingTClass:3
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vm,vs;
  WindowBegin("Item Settings",ItemSettingTClass,CGSbl,ItemSettingType);
  SetWRect(64,80,580,500);
  SetBlid(ItemSettingBlock);
  v = 6; vs = 20; h = 200;
  EditField(h,v,60,"Default Item Group",Normal,DefIGroup,false,ITSClass);
  if (HasModSVO) then begin
    if (StandardHansa==false) then begin
      EditField(h,v+=vs,60,"Default Warranty Length",Normal,WarrantyLength,false,0);
    end;
    EditField(h,v+=vs,60,"Default Unit",Normal,Unittext,false,UnitSCLass);
  end;
  EditField(h,v+=vs,60,"Barcode Length Excl. Checksum",Normal,BarCodeLength,false,0);
  if (IsEnterprise and StandardHansa==false) then begin
    EditField(h,v+=vs,120,"Assigned Barcode No.",Normal,YourBarCodeDef,false,0);
    EditField(h,vm=(v+=vs),120,"Start Barcode From",Normal,BarCodeStartFrom,false,0);
  end else begin
    v = v+vs;
    vm = v;
  end;
  CheckBox(h=35,vm=(v=vm+25),0,"Unique Barcode",UniqueBarCode);
  if (IsEnterprise) then begin
    CheckBox(h,v+=16,0,"Show Best Before Dates",BestBefore);
    CheckBox(h,v+=16,0,"Show Batch Status",BatchStatus);
    CheckBox(h,v+=16,0,"Show Item Status",ShowItemStatus);
  end;
  if (HasExtTax) then begin
    CheckBox(h,v+=16,0,"Calculate Perception Taxes",Perceptions);
  end;
  if (HasWithholdingTax) then begin
    CheckBox(h,v+=16,0,"Calculate Withholding Taxes",Withholdings);
  end;
  CheckBox(h,v+=16,0,"Require best before date",EBS_ReqBestBefore); //EBS
  if (IsEnterprise) then begin
    CheckBox(h,v+=16,0,"Update Prices on records with Currency when changing Dates",UpdCurPrWithDate);
    CheckBox(h=250,v=vm,0,"Do not allow Base Price change",NoBasePriceChange);
    if (StandardHansa==false) then begin
      CheckBox(h,v+=16,0,"Item Formula based on price incl. #VAT#",ItemFormulaeInclVAT);
    end;
    CheckBox(h,v+=16,0,"Enable Quantity Calculation",EnCalcDimQty);
    CheckBox(h,v+=16,0,"Require Item Group",DemandItemGroup);
    if (StandardHansa==false) then begin
      CheckBox(h,v+=16,0,"Use Supersession Items",UseSupersessionIN);
    end;
//  CheckBox(h,v+=16,0,"Use Multi-buy Discount",MultiBuyDiscount);
    if (StandardHansa==false) then begin
      ButtonFrame(h=35,vm=(v+=76),173,4,"Default Item Type");
    end else begin
      ButtonFrame(h=35,vm=(v+=76),173,3,"Default Item Type");
    end;
    RadioButton(h,v,0,0,"Plain",DefItemType);
    RadioButton(h,v+=16,1,0,"#Stocked#",DefItemType);
    RadioButton(h,v+=16,2,0,"Structured",DefItemType);
    if (StandardHansa==false) then begin
      RadioButton(h,v+=16,3,0,"Service",DefItemType);
      ButtonFrame(h,v+=40,173,3,"Serial Number Tracking");
    end else begin
      ButtonFrame(h,v+=57,173,3,"Serial Number Tracking");
    end;
    RadioButton(h,v,0,0,"None",SerNrf);
    RadioButton(h,v+=16,1,0,"Unit Number",SerNrf);
    RadioButton(h,v+=16,2,0,"Batch Number",SerNrf);
    ButtonFrame(h=250,v=vm,200,4,"Upd. Cost Price at Goods Receipt");
    RadioButton(h,v,0,0,"No",UpdateCost);
    RadioButton(h,v+=16,1,0,"Last Purchase Cost (incl. extras)",UpdateCost);
    RadioButton(h,v+=16,2,0,"Weighted Average",UpdateCost);
    RadioButton(h,v+=16,3,0,"Last Purchase Cost (excl. extras)",UpdateCost);
    ButtonFrame(h,v+=40,200,3,"Upd. Cost Price at #Stock# Revaluation");
    RadioButton(h,v,0,0,"No",SRUpdateCost);
    RadioButton(h,v+=16,1,0,"Last Revaluation Cost",SRUpdateCost);
    RadioButton(h,v+=16,2,0,"Weighted Average",SRUpdateCost);
  end else begin
    CheckBox(h,v+=16,0,"Do not allow Base Price change",NoBasePriceChange);
    CheckBox(h,v+=16,0,"Item Formula",ItemFormulaeInclVAT);
    CheckBox(h,v+=16,0,"Require Item Group",DemandItemGroup);
  end;
  EndWindow;
end;

window PODClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h1,h2,h3,h4,v,vm,vs;
  record CYBlock CYb;
  string 255 label;
  Integer tilenr,flipnr,f,rn;

  vs = 20;
  BlockLoad(CYb);
  WindowBegin("Purchase Order",PODClass,CGview,-);
  SetWRect(20,80,750,460);
  Sizeable(-1,-1,0,0);
  UseView(POVc);
  CommunicateButton;
  ActiveFieldOnNew("VECode");
  Tile(0,74,false,"",VECode);
  EditField(75,vm=(v=6),95,"No.",Normal,SerNr,false,TSerSClass);
  EditField(75,v+=20,95,"#Supplier#",Normal,VECode,false,VESClass);
  EnterSkip(PayDeal);
  EditField(h=255,v=vm,-40,"Name",Normal,Addr0,false,0);
  if (IsEnterprise) then begin
    EditField(h,vm=(v+=20),95,"Signers",Normal,OKPersons,false,UserSClass);
    CheckBox(h4=-100,v,0,"OK",OKFlag);
  end else begin
    CheckBox(h4=-100,v+=vs,0,"OK",OKFlag);
  end;
  tilenr = 1;
  TileButton(tilenr,"Terms"); tilenr = tilenr + 1;
  TileButton(tilenr,"Items"); tilenr = tilenr + 1;
  if (HasMultiCurrency or HasBase2) then begin
    TileButton(tilenr,"Currency"); tilenr = tilenr + 1;
  end;
  if (HasModIN) then begin
    TileButton(tilenr,"Del. Terms"); tilenr = tilenr + 1;
  end;
  TileButton(tilenr,"Comment"); tilenr = tilenr + 1;
  TileButton(tilenr,"Ord. Address"); tilenr = tilenr + 1;
  TileButton(tilenr,"Del. Address"); tilenr = tilenr + 1;
  if (IsEnterprise and StandardHansa==false) then begin
    TileButton(tilenr,"Extra Costs"); tilenr = tilenr + 1;
  end;
  tilenr = 1;
  Tile(tilenr,90,false,tilenr,TransDate); tilenr = tilenr + 1;
  vs = 20; h1 = 110; h2 = 290; h3 = 530; h4 = -100;
  EditField(h1,vm=(v=6),82,"Date",Normal,TransDate,false,PasteCurDate);
  EditField(h1,v+=vs,25,"Payment Terms",Normal,PayDeal,false,PDSClass);
  if (IsEnterprise) then begin
    EditField(h1,v+=vs,82,"Valid Until",Normal,ValidUntil,false,PasteCurDate);
  end;
  if (HasModIN) then begin
    EditField(h1,v+=vs,82,"Planned Delivery",Normal,PlanShip,false,PasteCurDate);
  end;
  EditField(h2,v=vm,135,"Our Reference",Normal,OurContact,false,0);
  EditField(h2,v+=vs,135,"Attention",Normal,VEContact,false,ContactSClass);
  if (HasObjects) then begin
    EditField(h2,v+=vs,135,"Objects",Normal,Objects,false,ObjSClass);
  end;
  EditField(h2,v+=vs,135,"Reference",Normal,Reference,false,0);
  if (HasSalesman or HasSalesmanBonus) then begin
    EditField(h3,v=vm,80,"#Salesman#",Normal,SalesMan,false,UserSClass);
  end;
  if (HasModTS or IsEnterprise) then begin
    EditField(h3,v+=vs,80,"Project",Normal,PRCode,false,PRSClass);
  end;
  if (IsEnterprise) then begin
    EditField(h3,v+=vs,80,"Purch. Ord. Class",Normal,POClass,false,POrderClassSClass);
    EditField(h3,v+=vs,80,"Order Type",ViewOnly,OrderType,false,0);
  end;
  CheckBox(h4,v=6,0,"Closed",Closed);
  if (CYb.UseTaxTemplatesforTaxCalc==0) then begin
    CheckBox(h4,v+=16,0,"Price Incl. #VAT#",InclVAT);
  end else begin
    CheckBox(h4,v+=16,0,"Price Incl. Tax",InclVAT);
  end;
  CheckBox(h4,v+=16,0,"Sent to log.",BLT_SentToLogistics); //EBS
  EnterSkip(Math);
  Tile(tilenr,120,true,tilenr,Math); tilenr = tilenr + 1;
  if (HasMultiCurrency or HasBase2) then begin
    EditField(110,-41,70,"Currency",Normal,CurncyCode,false,CurncyCodeSClass);
  end;
  if (IsEnterprise and StandardHansa==false) then begin
    EditField(110,-21,70,"Pallets",ViewOnly,TotPalletNr,true,0);
    EditField(260,-41,70,"Freight",Normal,ShipCost,true,0);
    EditField(260,-21,70,"Customs",Normal,CustomsCost,true,0);
  end;
  if (CYb.UseTaxTemplatesforTaxCalc==0) then begin
    EditField(410,-41,70,"#VAT#",ViewOnly,Sum3,true,0);
    if (HasExtTax) then begin
      EditField(410,-21,70,"Ext. Tax",ViewOnly,TAX1Sum,false,0);
    end;
  end else begin
    EditField(410,-41,70,"Tax",ViewOnly,Sum3,true,0);
  end;
  EditField(-169,-41,118,"Subtotal",ViewOnly,Sum1,true,0);
  EditField(-169,-21,118,"TOTAL",ViewOnly,Sum4,true,0);
//  CheckBox(20,-21,0,"OK",OKFlag);
  v = 24;
  if (HasModIN or HasModPL or HasObjects) then begin
    MatrixBegin(3,v,-50,-44,-,199);
  end else begin
    MatrixBegin(3,v,-25,-44,-,199);
  end;
  MatTypedRow(stp);
  Flip(0);
  MatCol(1,28,"Item",0,ArtCode,false,BLT_INSClass); //EBS edit
//  MatCol(1,84,"Var",0,VARList,true,VARSClass);
//  MatCol(1,144,"Qty",0,Quant,true,0);
  // EBS -->
  // if (HasVarieties) then begin
  //   MatCol(1,94,"Qty",0,Quant,true,MATVARINSClass);
  // end else begin
  //   MatCol(1,94,"Qty",0,Quant,true,0);
  // end;
  // EnterSkip(ArtCode);
  // EBS <--
//  MatCol(1,194,"Description",0,Spec,false,0);
  flipnr = 1;
  Flip(flipnr); flipnr = flipnr + 1;
  // EBS -->
  if (HasVarieties) then begin
    MatCol(1,94,"Qty",0,Quant,true,MATVARINSClass);
  end else begin
    MatCol(1,94,"Qty",0,Quant,true,0);
  end;
  EnterSkip(ArtCode);
  // EBS <--
  MatColTL(1,154,"Unit",0,M4Code,ViewOnly,5,UnitCode,false,UnitSCLass);
  MatCol(1,194,"Qty 2",0,Quant2,true,0); //EBS
  MatColTL(1,244,"Unit 2",0,M4Code,ViewOnly,5,UnitCode2,false,UnitSCLass); //EBS
  MatCol(1,284,"Description",0,Spec,false,0);
  if (HasJewelleryInterface) then begin
    MatCol(1,-337,"#Stock# Type",0,StockType,false,SetSClass);
  end;
  MatCol(1,-237,"Unit Price",0,Price,true,0);
  MatCol(1,-151,"%",0,vRebate,true,0);
  MatCol(1,-116,"Sum",0,Sum,true,0);
  if (CYb.UseTaxTemplatesforTaxCalc!=0) then begin
    MatCol(1,-30,"T-Cd",0,TaxTemplateCode,false,TaxTemplateSClass);
  end else begin
    MatCol(1,-30,"#V-Cd#",0,VATCode,false,VATCodeSClass);
  end;
  if (HasObjects) then begin
    Flip(flipnr); flipnr = flipnr + 1;
    // EBS -->
    if (HasVarieties) then begin
      MatCol(1,94,"Qty 2",0,Quant2,true,MATVARINSClass);
    end else begin
      MatCol(1,94,"Qty 2",0,Quant2,true,0);
    end;
    EnterSkip(ArtCode);
    MatColTL(1,164,"Unit 2",0,M4Code,ViewOnly,5,UnitCode2,false,UnitSCLass);
    MatCol(1,204,"Description",0,Spec,false,0);
    // MatCol(1,164,"Description",0,Spec,false,0);
    //EBS <--
    if (IsEnterprise) then begin
      MatCol(1,-310,"Purch. A/C",0,CostAcc,false,AccSClass);
    end;
    MatCol(1,-240,"Objects",0,Objects,false,ObjSClass);
    if (IsEnterprise) then begin
      MatCol(1,-170,"#Supp.# Item",0,VEArtCode,false,PISClass);
      MatColTL(1,-100,"#S.# Unit",0,M4Code,ViewOnly,5,VEUnit,false,UnitSCLass);//MatCol(1,-100,"#S.# Unit",0,VEUnit,false,UnitSCLass);
      MatCol(1,-50,"#S.# Qty",0,VEQuant,true,0);
    end;
  end;
  if (HasModIN) then begin
    Flip(flipnr); flipnr = flipnr + 1;
    // EBS -->
    if (HasVarieties) then begin
      MatCol(1,94,"Qty",0,Quant,true,MATVARINSClass);
    end else begin
      MatCol(1,94,"Qty",0,Quant,true,0);
    end;
    EnterSkip(ArtCode);
    // EBS <--
    MatCol(1,164,"Description",0,Spec,false,0);
    MatCol(1,-330,"Rcvd.",0,Shipd1,true,0);
    MatCol(1,-270,"Rcvd. OK",0,Shipd2,true,0);
    if (HasModPL) then begin
      MatCol(1,-210,"Invoiced",0,Invd,true,0);
    end;
    if (HasModWHM) then begin
      MatCol(1,-150,"Pallet No.",0,PalletNr,true,0);
    end;
    if (HasModTS) then begin
      MatCol(1,-90,"Project",0,PRCode,true,PRSClass);
    end;
    if (HasModSVO) then begin
      MatCol(1,-40,"WS No.",0,WSNr,true,0);
    end;
  end;
  if (IsEnterprise) then begin
    Flip(flipnr); flipnr = flipnr + 1;
    // EBS -->
    if (HasVarieties) then begin
      MatCol(1,94,"Qty",0,Quant,true,MATVARINSClass);
    end else begin
      MatCol(1,94,"Qty",0,Quant,true,0);
    end;
    EnterSkip(ArtCode);
    // EBS <--
    if (StandardHansa==false) then begin
      MatCol(1,164,"Order Type",0,OrderType,false,0);
      MatCol(1,-400,"#Stock# Type",0,StockType,false,SetSClass);
    end else begin
      MatCol(1,164,"Description",0,Spec,false,0);
    end;
    if (HasTREO) then begin
      MatCol(1,-300,"TREO",0,TREO,false,SetSClass);
    end;
    MatCol(1,-200,"Plan. Del.",0,PlanShipRow,true,PasteCurDate);
    MatCol(1,-100,"Comment",0,Comment,true,0);
    if (StandardHansa==false) then begin
      Flip(flipnr); flipnr = flipnr + 1;
      // EBS -->
      if (HasVarieties) then begin
        MatCol(1,94,"Qty",0,Quant,true,MATVARINSClass);
      end else begin
        MatCol(1,94,"Qty",0,Quant,true,0);
      end;
      EnterSkip(ArtCode);
      // EBS <--
      MatCol(1,164,"Description",0,Spec,false,0);
      MatCol(1,-420,"Fr. Cost",0,ShipCost,true,0);
      MatCol(1,-360,"Customs",0,CustomsCost,true,0);
      label = UserDefined("AccBlock","PUCost1");
      if (blank(label)) then begin label = "Cost 1";end;
      MatCol(1,-300,label,0,RowCost1,true,0);
      label = UserDefined("AccBlock","PUCost2");
      if (blank(label)) then begin label = "Cost 2";end;
      MatCol(1,-240,label,0,RowCost2,true,0);
      label = UserDefined("AccBlock","PUCost3");
      if (blank(label)) then begin label = "Cost 3";end;
      MatCol(1,-180,label,0,RowCost3,true,0);
      label = UserDefined("AccBlock","PUCost4");
      if (blank(label)) then begin label = "Cost 4";end;
      MatCol(1,-120,label,0,RowCost4,true,0);
      label = UserDefined("AccBlock","PUCost5");
      if (blank(label)) then begin label = "Cost 5";end;
      MatCol(1,-60,label,0,RowCost5,true,0);
    end;
  end;
  DeleteRowTest;
  InsertRowTest;
  RowMenuBegin("");
  if (HasModIN and GuiType!=kGuiAndroid) then begin
    RowMenuItem(0,"Item Status",'I','I',0,"ItemStatusPODsm");
  end;
  if (IsEnterprise) then begin
    RowMenuItem(0,"Previous Purchase Prices",' ',' ',0,"POLastPPrsm");
  end;
  EndRowMenu;
  EndMatrix;
  vs = 20;
//  v = 18;
  v = v + 1;
  if (flipnr>2) then begin
    for (f=1;f<flipnr;f=f+1) begin
      VTab(-35,v,-16,v+vs,ToolFlip,f,chr(asc("A") + f - 1));
      v = v + vs;
    end;
  end;
  if (HasMultiCurrency or HasBase2) then begin
    Tile(tilenr,70,false,tilenr,FrRate); tilenr = tilenr + 1;
    vs = 20; h = 110; h2 = 295;
    if (HasBase2) then begin
      h1 = h1 + 20;
    end;
    EditField(h1,v=6,50,"Currency",Normal,CurncyCode,false,CurncyCodeSClass);
    if (HasMultiCurrency) then begin
      if (HasBase2) then begin
        EditField(h1,v+vs,50,"Base Currency 1",Normal,BaseRate1,true,0);
      end else begin
        EditField(h1,v+vs,50,"Base Currency",Normal,BaseRate1,true,0);
      end;
      if (HasBase2) then begin
        EditField(h1,v+(vs*2),50,"Base Currency 2",Normal,BaseRate2,true,0);
      end;
      EditField(h2=295,v,50,"Rate",Normal,FrRate,true,0);
      if (HasBase2) then begin
        RateField(h3=360,v,50,":",Normal,"ToRateB1",true,h3+60,v+14,"Base Currency 1",false);
        RateField(h3,v+=vs,50,":",Normal,"ToRateB2",true,h3+60,v+14,"Base Currency 2",false);
      end else begin
        RateField(h3=360,v,50,":",Normal,"ToRateB1",true,h3+60,v+14,"Base Currency",false);
      end;
    end else begin
      EditField(h1,v+=vs,50,"Base Currency 1",Normal,BaseRate1,true,0);
      EditField(h1,v+=vs,50,"Base Currency 2",Normal,BaseRate2,true,0);
    end;
  end;
  if (HasModIN) then begin
    Tile(tilenr,90,false,tilenr,ShipDeal); tilenr = tilenr + 1;
    vs = 20; h1 = 110; h2 = 290; h3 = 530; h4 = -100;
    EditField(h1,v=6,80,"Delivery Terms",Normal,ShipDeal,false,ShipDealSClass);
    if (IsEnterprise) then begin
      EditField(h1,v+=vs,80,"Delivery Mode",Normal,ShipMode,false,DMSClass);
    end;
    if (HasMultiLocations) then begin
      EditField(h1,v+=vs,80,"Location",Normal,Location,false,LocationSClass);
    end;
    if (IsEnterprise) then begin
      if (StandardHansa==false) then begin
        EditField(h1,v+=vs,80,"Branch",ViewOnly,BranchID,false,0);
//  EditField(h2,v=vm,80,"Total Quantity",ViewOnly,TotQty,true,0);
//  EditField(h2,v+=vs,80,"Total Weight",ViewOnly,TotWeight,true,0);
//  EditField(h2,v+=vs,80,"Total Volume",ViewOnly,TotVolume,true,0);
        EditField(h2,v=vm,80,"Serv. Order No.",Normal,SVONr,false,0);
        EditField(h2,v+=vs,80,"Work Order No.",Normal,WONr,false,0);
        EditField(h2,v+=vs,80,"P/O Process No.",Normal,POCQStatNr,true,POCQStatSClass);
        EditField(h2,v+=vs,80,"PO Contract No.",ViewOnly,POCOSerNr,true,0);
      end;
      CheckBox(473,v=vm,0,"Invoice Before Goods Receipt",InvBeforePU);
      CheckBox(473,v+=vs,0,"Set Goods Receipt Quantity to Zero",SetZeroPUQuant);
      EditField(h3,v+=vs,80,"Intrastat Trans. Code",Normal,IntrastatTransCode,false,IntrastatTransCodeSClass);
    end;
  end;
  if (IsEnterprise) then begin
    Tile(tilenr,90,false,tilenr,LangCode); tilenr = tilenr + 1;
    EditField(h1,v=6,80,"Discount Matrix",Normal,RebCode,false,RebSClass);
    if (StandardHansa==false) then begin
      EditField(h1,v+=vs,80,"Factoring",Normal,VEFactoring,false,VESClass);
    end;
    EditField(h1,v+=vs,80,"Order No.",Normal,OrdNr,false,0);
    EditField(h1,v+=vs,-20,"Comment",Normal,Comment,false,0);
    if (HasSalesGroup) then begin
      EditField(h2,v=vm,80,"Sales Group",Normal,SalesGroup,false,SalesGroupSClass);
      EditField(h2,v+=vs,80,"Invoice From",Normal,InvoiceToCode,false,VESClass);
    end;
    EditField(h2,v+=vs,80,"Purchase Cost",Normal,CostPerUnit,true,0);
    if (HasLanguages) then begin
      EditField(h3,v=vm,80,"Language",Normal,LangCode,false,LangSClass);
    end;
  end else begin
    Tile(tilenr,20,false,tilenr,Comment); tilenr = tilenr + 1;
    if (HasAdvancedPricing) then begin
      EditField(h1,v=6,80,"Discount Matrix",Normal,RebCode,false,RebSClass);
    end else begin
      EditField(h1,v=6,-20,"Comment",Normal,Comment,false,0);
    end;
    if (HasLanguages) then begin
      EditField(h1,v+=vs,80,"Language",Normal,LangCode,false,LangSClass);
    end;
  end;
  Tile(tilenr,230,false,tilenr,Addr1); tilenr = tilenr + 1;
  label = UserDefined("CUVc","InvAddr0");
  if (blank(label)) then begin label = "Ordering"; end;
  EditField(h=110,v=6,-20,label,Normal,Addr1,false,0);
  label = UserDefined("CUVc","InvAddr1");
  if (blank(label)) then begin label = "Address"; end;
  EditField(h,v+=vs, -20,label,Normal,Addr2,false,0);
  label = UserDefined("CUVc","InvAddr2");
  EditField(h,v+=vs, -20,label,Normal,Addr3,false,0);
  label = UserDefined("CUVc","InvAddr3");
  EditField(h,v+=vs, -20,label,Normal,InvAddr3,false,0);
  label = UserDefined("CUVc","InvAddr4");
  EditField(h,vm=(v+=vs), -20,label,Normal,InvAddr4,false,0);
  vm = vm + 40;

  if (HasApprovals) then begin
    SoftEditField(h3=h+4,v=vm,123,"Approval Status",ViewOnly,"AcceptanceStatusFlag",false,0,M4Str,255);
  end;
/*
//oldapprovals
  if (HasApprovals) then begin
    ButtonFrame(h3=h+4,v=vm,123,6,"Approval Status");
    RadioButton(h3,v,kAcceptanceStateNotRequired,0,"Not Required",AcceptanceStatus);
    RadioButton(h3,v+=16,kAcceptanceStateNotStarted,0,"Not Started",AcceptanceStatus);
    RadioButton(h3,v+=16,kAcceptanceStateNotRequested,0,"Not Reuested",AcceptanceStatus);
    RadioButton(h3,v+=16,kAcceptanceStatePending,0,"Pending",AcceptanceStatus);
    RadioButton(h3,v+=16,kAcceptanceStateApproved,0,"Approved",AcceptanceStatus);
    RadioButton(h3,v+=16,kAcceptanceStateRejected,0,"Rejected",AcceptanceStatus);
  end;
*/
  if (HasVATZone) then begin
    v = VATZoneButtonsLabelsENG(h3=290,v=vm,170,16);
  end;
  if (IsEnterprise) then begin
    EditField(h2=-170,v=vm,150,"Region",Normal,Region,false,RegionSClass);
//  EditField(h2,v+=vs,150,"#VAT Reg. No.#",Normal,VATNr,false,0);
//  EditField(h2,v+=vs,150,"Telephone",Normal,Phone,false,0);
//  EditField(h2,v+=vs,150,"Fax",Normal,Fax,false,0);
  end;
  Tile(tilenr,130,false,tilenr,ShipAddr0); tilenr = tilenr + 1;
  EditField(h,v=6,-20,"Delivery",Normal,ShipAddr0,false,0);
  EditField(h,v+=vs,-20,"Address",Normal,ShipAddr1,false,0);
  EditField(h,v+=vs,-20,"",Normal,ShipAddr2,false,0);
  EditField(h,v+=vs,-20,"",Normal,ShipAddr3,false,0);
  EditField(h,v+=vs,-20,"",Normal,DelAddr3,false,0);
  EditField(h,v+=vs,-20,"",Normal,DelAddr4,false,0);
  if (IsEnterprise and StandardHansa==false) then begin
    Tile(tilenr,70,false,tilenr,ShipCost); tilenr = tilenr + 1;
    vs = 20; h2 = 290; h3 = 530;
    label = UserDefined("AccBlock","PUCost1");
    if (blank(label)) then begin label = "Extra Cost 1";end;
    EditField(h1,v=6,70,label,Normal,Cost1,true,0);
    label = UserDefined("AccBlock","PUCost2");
    if (blank(label)) then begin label = "Extra Cost 2";end;
    EditField(h2,v,70,label,Normal,Cost2,true,0);
    label = UserDefined("AccBlock","PUCost3");
    if (blank(label)) then begin label = "Extra Cost 3";end;
    EditField(h1,v+=vs,70,label,Normal,Cost3,true,0);
    label = UserDefined("AccBlock","PUCost4");
    if (blank(label)) then begin label = "Extra Cost 4";end;
    EditField(h2,v,70,label,Normal,Cost4,true,0);
    label = UserDefined("AccBlock","PUCost5");
    if (blank(label)) then begin label = "Extra Cost 5";end;
    EditField(h1,v+=vs,70,label,Normal,Cost5,true,0);
    EnterSkip(TransDate);
    ButtonFrame(h3,v=16,130,2,"Extra Costs Calculation");
    RadioButton(h3,v,0,0,"Value",ExtraCostsCalculation);
    RadioButton(h3,v+=16,1,0,"Weight",ExtraCostsCalculation);
  end;
  if (GuiType==kGuiMetro) then begin // Temporarily disabled on Windows 8
/*
    if (IsEnterprise) then begin
      SpecialMenu("Add Planned Payment",' ',9,"PlannedPaymentPODsm");
    end;
*/
    if (HasModIN) then begin
      SpecialMenu("Item Status",'I',2,"ItemStatusPODsm");
    end;
    SpecialMenu("Purchase Order Status",'r',5,"POStatRnPODsm");
    SpecMenuGroup("",kSpecMenuGroupTypeExtendedPlusMenu,0);
    if (HasModIN) then begin
      SpecialMenu("Goods Receipt",'L',0,"PUFromPODsm");
    end;
    if (HasModPL) then begin
      SpecialMenu("#Purchase Invoice#",'F',1,"VIFromPODsm");
    end;
    if (IsEnterprise) then begin
      SpecialMenu("Returned Goods",'B',6,"RetPUFromPODsm");
    end;
/*
  if (HaseMail) then begin
    SpecialMenu("email",'m',3,"CreateMailFromPODsm");
  end;
*/
  end else begin
  SpecialMenu("Item Search",'f',1,"ItemSearchDsm");
  if (HasTaxMatrix) then begin
    SpecialMenu("Open Tax Matrix",' ',25,"OpenVatMatrixPODsm");
  end;
  SpecialMenu("Purchase Order Status",'r',5,"POStatRnPODsm");
  if (IsEnterprise) then begin
    SpecialMenu("Reservations",' ',6,"POReservPODsm");
  end;
  if (HasApprovals) then begin
    SpecialMenu("Request Approval",' ',6,"POSendforAcceptancePODsm");
    SpecialMenu("Cancel Approval Request",' ',2,"CancelApprovalRequestDsm");
  end;
  SpecMenuGroup("",kSpecMenuGroupTypeExtendedPlusMenu,0);
  if (HasModCRM) then begin
//    SpecialMenu("Activity",'c',9,"CreateActFromPODsm");
  end;
  if (HasDownpayments) then begin
    SpecialMenu("Down Payment Invoice",' ',3,"DownPayFromPODsm");
  end;
  if (HaseMail) then begin
    SpecialMenu("Email",'m',3,"CreateMailFromPODsm");
  end;
  if (HasModIN) then begin
    SpecialMenu("Goods Receipt",'L',0,"PUFromPODsm");
  end;
  if (IsEnterprise and StandardHansa==false) then begin
    SpecialMenu("Shipment Notification",'l',0,"DropSHFromPODsm");
  end;
  if (HasModPL) then begin
    SpecialMenu("#Purchase Invoice#",'F',1,"VIFromPODsm");
  end;
  if (HasRetGoodsToSupp and HasModIN) then begin
    SpecialMenu("Returned Goods",'B',6,"RetPUFromPODsm");
  end;
    SpecialMenu("Add #Supplier#",' ',0,"AddSupplierPODsm");
    SpecialMenu("Add Item",' ',0,"AddItemPODsm");
  end;
  EndWindow;
end;

window TmpPODClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v;
  WindowBegin("Create goods receipt",TmpPODClass,CGOther,-);
  Modality(1);
  UseView(TmpPOVc);
  SetWRect(20,80,750,340);
  Sizeable(-1,-1,0,0);
  EditField(h=80,v=10,80,"Nr.",ViewOnly,SerNr,false,0);
  HalPushButton(h+150,10,-50,40,"TmpPODClass_CreatePUVc","Create goods receipt");
  MatrixBegin(20,v+=60,-50,-5,-,599);
  MatColTL(1,30,"Item",0,M4Code,ViewOnly,20,ArtCode,false,INSCLass);
  MatColTL(1,150,"Name",0,M4Str,ViewOnly,200,ArtName,false,0);
  MatCol(1,-300,"Qty",0,Quant,false,0);
  MatCol(1,-220,"Serial nr.",0,SerialNr,false,0);
  MatCol(1,-100,"Best before",0,BestBeforeDate,false,PasteCurDate);
  InsertRowTest;
  DeleteRowTest;
  RowMenuBegin("");
  RowMenuItem(0,"Split Row",' ',' ',0,"SplitRowTmpPODsm");
  EndRowMenu;
  EndMatrix;
  SpecialMenu("Generate Serial No.",' ',2,"GenSerialNoTmpPODsm");
  EndWindow;
end;

window ITDClass:2
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h2,v,vm,vs,tilenr;
  boolean taxtempf;
  WindowBegin("Item Group",ITDClass,CGview,-);
  if (IsEnterprise) then begin
    SetWRect(64,80,680,470);
  //  Sizeable(-1,-1,0,0);
    UseView(ITVc);
    Tile(0,90,false,"",Code);
    v = 6; vs = 20; h = 120;
    EditField(h=120,v, 70,"No.",St_i,Code,false,0);
    EditField(h,v+=20 ,200,"Name",Normal,Comment,false,0);
    CheckBox(h+220,v,0,"Packaging material",PackMaterial); //EBS
    EditField(h,v+=vs ,200,"Class. Types",Normal,ClassType,false,CTypeSClass);
    tilenr = 1;
    TileButton(tilenr,"A/C");  tilenr = tilenr + 1;
    TileButton(tilenr,"Credit A/C");  tilenr = tilenr + 1;
    if (StandardHansa==false) then begin
      TileButton(tilenr,"Service A/C");  tilenr = tilenr + 1;
    end;
    TileButton(tilenr,"Cost Model");  tilenr = tilenr + 1;
    TileButton(tilenr,"Freight");  tilenr = tilenr + 1;
    TileButton(tilenr,"Texts");  tilenr = tilenr + 1;
    if (HasCharts) then begin
      TileButton(tilenr,"BI");  tilenr = tilenr + 1;
    end;
    tilenr = 1;
    Tile(tilenr,260,false,tilenr,SalesAcc);  tilenr = tilenr + 1;
    EditField(h=120,vm=(v=6),55,"#Dom.# Sales A/C",Normal,SalesAcc,false,AccSClass);
    EditField(h,v+=vs,55,VATZoneNameENG & "Sales A/C",Normal,EUSalesAcc,false,AccSClass);
    EditField(h,v+=vs,55,"Export Sales A/C",Normal,ExpSalesAcc,false,AccSClass);
    EditField(h,v+=vs ,55,"#Dom.# Cost A/C",Normal,CostAcc,false,AccSClass);
    EditField(h,v+=vs ,55,VATZoneNameENG & "Cost A/C",Normal,EUCostAcc,false,AccSClass);
    EditField(h,v+=vs ,55,"Export Cost A/C",Normal,ExpCostAcc,false,AccSClass);
    if (StandardHansa==false) then begin
      EditField(h,v+=vs ,55,"WIP A/C",Normal,WIPAcc,false,AccSClass);
    end;
    EditField(h,v+=vs,55,"Components Usage",Normal,CompUsage,false,AccSClass);
    if (StandardHansa==false) then begin
      EditField(h,v+=vs,55,"Production Control",Normal,ProdControl,false,AccSClass);
      EditField(h,v+=vs,55,"Prod. Work A/C",Normal,ProdWCostAcc,false,AccSClass);
      EditField(h,v+=vs,55,"Hotel WIP A/C",Normal,HotelWIPAcc,false,AccSClass);
    end;
    EditField(h=350,v=vm,20,"#Dom.# #VAT# Code",Normal,VATCodeDom,false,VATCodeSClass);
    EditField(h,v+=vs,20,VATZoneEditFieldLabelENG(1) & "#VAT# Code",Normal,VATCodeEU,false,VATCodeSClass);
    EditField(h,v+=vs,20,"Export #VAT# Code",Normal,VATCodeExp,false,VATCodeSClass);
    EditField(h,v+=vs ,55,"#Dom.# Purch. Accruals A/C",Normal,PurchAcc,false,AccSClass);
    EditField(h,v+=vs ,55,VATZoneNameENG & "Purch. Accruals A/C",Normal,EUPurchAcc,false,AccSClass);
    EditField(h,v+=vs ,55,"Import Purch. Accruals A/C",Normal,ExpPurchAcc,false,AccSClass);
    EditField(h,v+=vs ,55,"#Stock# A/C",Normal,InvAcc,false,AccSClass);
    if (StandardHansa==false) then begin
      EditField(h,v+=vs ,55,"Purch. Price Variance A/C",Normal,PriceVarianceAcc,false,AccSClass);
      EditField(h,v+=vs ,55,"Usage Variance A/C",Normal,UsageVarianceAcc,false,AccSClass);
    end;
    EditField(h,v+=vs ,55,"Discount A/C",Normal,DiscountAcc,false,AccSClass);
    EditField(h,v+=vs,55,"Proj. Materials Usage A/C",Normal,ProjMaterialsUsageAcc,false,AccSClass);
    if (StandardHansa==false) then begin
      EditField(h=120,v+=vs,405-120,"Objects",Normal,Objects,false,ObjSClass);
      EditField(h2=530,v=vm,50,"#Dom.# Tax Temp.",Normal,TaxTemplateCode,false,TaxTemplateSClass);
      EditField(h2,v+=vs,50,VATZoneEditFieldLabelENG(1) & "Tax Temp.",Normal,TaxTemplateCodeEU,false,TaxTemplateSClass);
      EditField(h2,v+=vs,50,"Export Tax Temp.",Normal,TaxTemplateCodeExp,false,TaxTemplateSClass);
    end;
    Tile(tilenr,100,false,tilenr,CredSalesAcc); tilenr = tilenr + 1;
    StaticText(h=120,v=7,"#Credit Notes#",false);
    EditField(h,vm=(v+=20),55,"Sales A/C",Normal,CredSalesAcc,false,AccSClass);
    EditField(h,v+=vs,55,VATZoneNameENG & "Sales A/C",Normal,CredEUSalesAcc,false,AccSClass);
    EditField(h,v+=vs,55,"Export Sales A/C",Normal,CredExpSalesAcc,false,AccSClass);
    EditField(h=350,v=vm,20,"#Domestic# #VAT# Code",Normal,CredVATCodeDom,false,VATCodeSClass);
    EditField(h,v+=vs,20,VATZoneEditFieldLabelENG(1) & "#VAT# Code",Normal,CredVATCodeEU,false,VATCodeSClass);
    EditField(h,v+=vs,20,"Export #VAT# Code",Normal,CredVATCodeExp,false,VATCodeSClass);
    if (StandardHansa==false) then begin
      Tile(tilenr,100,false,tilenr,SVOInvbleSalesAcc); tilenr = tilenr + 1;
      EditField(h=170,v=6,55,"Serv. Invoiceable Sales A/C",Normal,SVOInvbleSalesAcc,false,AccSClass);
//       EditField(h,v+=vs,55,"Serv. Warranty Sales A/C",Normal,SVOWarrantySalesAcc,false,AccSClass); // Not being used in code atm
//       EditField(h,v+=vs,55,"Serv. Contract Sales A/C",Normal,SVOContractSalesAcc,false,AccSClass); // Not being used in code atm
//       EditField(h,v+=vs,55,"Serv. Goodwill Sales A/C",Normal,SVOGoodwillSalesAcc,false,AccSClass); // Not being used in code atm
      EditField(h=400,v=6,55,"Serv. Invoiceable Cost A/C",Normal,SVOInvbleCostAcc,false,AccSClass);
      EditField(h,v+=vs,55,"Serv. Warranty Cost A/C",Normal,SVOWarrantyCostAcc,false,AccSClass);
      EditField(h,v+=vs,55,"Serv. Contract Cost A/C",Normal,SVOContractCostAcc,false,AccSClass);
      EditField(h,v+=vs,55,"Serv. Goodwill Cost A/C",Normal,SVOGoodwillCostAcc,false,AccSClass);
    end;
    Tile(tilenr,250,false,tilenr,CostPerc); tilenr = tilenr + 1;
    ButtonFrame(h=30,vm=(v=20),230,6,"Primary Cost Model");
    RadioButton(h,v,0,0,"Default",PrimaryCostModel);
    RadioButton(h,v+=16,1,0,"Cost Price",PrimaryCostModel);
    RadioButton(h,v+=16,2,0,"% _of Base Price",PrimaryCostModel);
    EditField(h+150,v,55,"%",Normal,CostPerc,true,0);
    RadioButton(h,v+=16,3,0,"Weighted Average",PrimaryCostModel);
    RadioButton(h,v+=16,4,0,"Queued",PrimaryCostModel);
    RadioButton(h,v+=16,9,0,"None",PrimaryCostModel);
    ButtonFrame(h,v+=40,230,3,"Queued Cost Model");
    RadioButton(h,v,0,0,"Default",QueuedCostModel);
    RadioButton(h,v+=16,1,0,"F_IFO Price",QueuedCostModel);
    RadioButton(h,v+=16,2,0,"LIFO Price",QueuedCostModel);

    ButtonFrame(h2=280,v=vm,200,3,"Cost Price for Serial Number");
    RadioButton(h2,v,0,0,"Default",FIFOPerSerialNr);
    RadioButton(h2,v+=16,1,0,"Cost Price not for Serial Number",FIFOPerSerialNr);
    RadioButton(h2,v+=16,2,0,"Cost Price for Serial Number",FIFOPerSerialNr);
    ButtonFrame(h2,v+=40,200,3,"Queued Cost Model per Location");
    RadioButton(h2,v,0,0,"Default",FIFOPerLocation);
    RadioButton(h2,v+=16,1,0,"Queued Cost not per Location",FIFOPerLocation);
    RadioButton(h2,v+=16,2,0,"Queued Cost per Location",FIFOPerLocation);
    ButtonFrame(h2,v+=40,200,3,"Weighted Average per Location");
    RadioButton(h2,v,0,0,"Default",WAPerLocation);
    RadioButton(h2,v+=16,1,0,"WA not per Location",WAPerLocation);
    RadioButton(h2,v+=16,2,0,"WA per Location",WAPerLocation);
  /*  5.3
    ButtonFrame(h2,v+=40,200,3,"Cost Price per Location");
    RadioButton(h2,v,0,0,"Default",CostPricePerLocation);
    RadioButton(h2,v+=16,1,0,"Cost Price not per Location",CostPricePerLocation);
    RadioButton(h2,v+=16,2,0,"Cost Price per Location",CostPricePerLocation);
  */
    Tile(tilenr,80,false,tilenr,EUCodex); tilenr = tilenr + 1;
  //  CheckBox(h=90,v+=30,0,"Internal (Not Showing in WebShop)",Internal);
    if (StandardHansa==false) then begin
      CheckBox(h=90,vm=(v=16),0,"Do Not Print Freight Labels for this Group",ExclFrLabPr);
      CheckBox(h,v+=16,0,"Include Item Fixed Charge",InclItemFreight);
      EditField(h+195,v+2 ,55,"",Normal,FixedFreight,true,0);
      EditField(h=140,v+=22,200,"Commodity/EAN",Normal,EUCodex,false,CommoditySClass);
    end else begin
      EditField(h=120,vm=(v=16),200,"Commodity/EAN",Normal,EUCodex,false,CommoditySClass);
    end;
    EditField(h=220,v+=vs,120,"Classification of Products and Services",Normal,CPSCode,false,0);
    ButtonFrame(h=400,v=vm,80,3,"Type");
    RadioButton(h,v,0,0,"Default",Type);
    RadioButton(h,v+=16,1,0,"Transport",Type);
    RadioButton(h,v+=16,2,0,"Packages",Type);
    Tile(tilenr,120,true,tilenr,Math); tilenr = tilenr + 1;
    v = 24;
    MatrixBegin(4,v,-32,-20,INTextRowType,99);
    MatCol(1,24,"Language",0,LangCode,false,LangSClass);
    MatCol(1,84,"Text",0,Text,false,0);
    EndMatrix;
    if (HasCharts) then begin
      Tile(tilenr,400,false,tilenr,-);  tilenr = tilenr + 1;
      ChartArea(10,6,-10,390,"$ITDCLass_BIChart");
    end;
  end else begin
    SetWRect(64,80,470,230);
    UseView(ITVc);
    v = 6; vs = 20; h = 120; h2 = 300;
    EditField(h,v,70,"Code",Normal,Code,false,0);
    EditField(h,v+=vs,-20,"Name",Normal,Comment,false,0);
    if (HasVATZone) then begin
      EditField(h,vm=(v+=vs),20,"#Domestic# #VAT# Code",Normal,VATCodeDom,false,VATCodeSClass);
      EditField(h,v+=vs,20,VATZoneEditFieldLabelENG(1) & "#VAT# Code",Normal,VATCodeEU,false,VATCodeSClass);
      EditField(h,v+=vs,20,"Export #VAT# Code",Normal,VATCodeExp,false,VATCodeSClass);
    end else begin
      if (HasTaxMatrix) then begin
        EditField(h,v+=vs,55,"Tax Temp.",Normal,TaxTemplateCode,false,TaxTemplateSClass); taxtempf = true;
      end else begin
        EditField(h,v+=vs,20,"#VAT# Code",Normal,VATCodeDom,false,VATCodeSClass);
      end;
    end;
    if (HasModNL) then begin
      if (HasVATZone) then begin
        EditField(h2,v=vm,55,"#Domestic# Sales A/C",Normal,SalesAcc,false,AccSClass);
        EditField(h2,v+=vs,55,VATZoneNameENG & "Sales A/C",Normal,EUSalesAcc,false,AccSClass);
        EditField(h2,v+=vs,55,"Export Sales A/C",Normal,ExpSalesAcc,false,AccSClass);
        if (HasModIN) then begin
          EditField(h2,v+=vs,55,"#Stock# A/C",Normal,InvAcc,false,AccSClass);
          EditField(h2,v+=vs ,55,"#Domestic# Purch. Accruals A/C",Normal,PurchAcc,false,AccSClass);
          EditField(h2,v+=vs ,55,VATZoneNameENG & "Purch. Accruals A/C",Normal,EUPurchAcc,false,AccSClass);
          EditField(h2,v+=vs ,55,"Import Purch. Accruals A/C",Normal,ExpPurchAcc,false,AccSClass);
        end else begin
//          EditField(h,v+=vs,55,"#Stock# A/C",Normal,InvAcc,false,AccSClass);
        end;
      end else begin
        EditField(h,v+=vs,70,"Sales A/C",Normal,SalesAcc,false,AccSClass);
        if (HasModIN) then begin
          EditField(h,v+=vs,70,"#Stock# A/C",Normal,InvAcc,false,AccSClass);
          EditField(h,v+=vs,70,"Purch. Accruals A/C",Normal,PurchAcc,false,AccSClass);
        end;
      end;
      if (HasLocalization("PRT")) then begin
        StaticText(h,v+=40,"#Credit Notes#",false);
        EditField(h,v+=vs,55,"Sales A/C",Normal,CredSalesAcc,false,AccSClass);
        EditField(h,v+=vs,vs,"#VAT# Code",Normal,CredVATCodeDom,false,VATCodeSClass);
      end;
      if (HasLocalization("BRA,HRV") or HasTaxMatrix) then begin
        if (HasVATZone) then begin
          if (taxtempf==false) then begin
            EditField(h,v+=vs,55,"#Dom.# Tax Temp.",Normal,TaxTemplateCode,false,TaxTemplateSClass);
          end;
          EditField(h,v+=vs,55,VATZoneEditFieldLabelENG(1) & "Tax Temp.",Normal,TaxTemplateCodeEU,false,TaxTemplateSClass);
          EditField(h,v+=vs,55,"Export Tax Temp.",Normal,TaxTemplateCodeExp,false,TaxTemplateSClass);
        end else begin
          if (taxtempf==false) then begin
            EditField(h,v+=vs,55,"Tax Temp.",Normal,TaxTemplateCode,false,TaxTemplateSClass);
          end;
        end;
      end;
    end;
    if (HasLocalization("BRA,KEN,POL")) then begin
      EditField(h+100,v+=vs,120,"Classification of Products and Services",Normal,CPSCode,false,0);
    end;
    if (HasLanguages) then begin
      v = v+54;
      MatrixBegin(4,v,-32,-20,-,99);
      MatCol(1,24,"Language",0,LangCode,false,LangSClass);
      MatCol(1,84,"Text",0,Text,false,0);
      EndMatrix;
    end;
  end;
  EndWindow;
end;

window BLT_PUPalletLabRClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,l,v,vm;
  WindowBegin("Specify Goods Receipt Labels",PULabRClass,CGRcW,RcType);
  SetWRect(20,80,400,320);
  EditFieldTL(h=150,v=6,153,"Goods Receipt",   M4Str,Normal,30,f1,false,0);
  if (HasModProd) then begin
    EditFieldTL(h,v+=20,153,"Productions",   M4Str,Normal,30,f7,false,0);
  end;
  EditFieldTL(h,v+=20,100,"Item",M4UStr,Normal,41,f3,false,INSClass);
  if (HasItemGroups) then begin
    EditFieldTL(h,v+=20,100,"Item Group",M4UStr,Normal,5,f5,false,ITSClass);
  end;
  if (HasItemClassification) then begin
    EditFieldTL(h,v+=20,100,"Item Classification",M4UStr,Normal,100,f4,false,DISClass);
  end;
  if (HasMultiLocations) then begin
    EditFieldTL(h,v+=20,100,"Location",M4UStr,Normal,10,f6,false,LocationSClass);
  end;
  if (IsEnterprise) then begin
    EditFieldTL(h,v+=20,100,"#Supplier#",M4UStr,Normal,10,LastAcc,false,VESClass);
  end;
  if (HasSerialNumbers) then begin
    EditFieldTL(h,v+=20,100,"Serial Number",M4UStr,Normal,60,FirstAcc,false,SerialNrSClass);
  end;
  EditFieldTL(h,v+=20,50,"Vertical Margin",M4Int,Normal,0,flags[29],false,0);
  if (IsEnterprise) then begin
    EditFieldTL(h,v+=20,100,"Label No.",M4Str,Normal,30,f2,false,0);
  end;
  ButtonFrame(h=100,vm=(v+=40) /*v=vm*/,l=60,5,"Layout");
  RadioButton(h,v    ,0,0,"1*1",ArtMode);
  RadioButton(h,v+=16,2,0,"2*8",ArtMode);
  RadioButton(h,v+=16,1,0,"3*8",ArtMode);
  RadioButton(h,v+=16,4,0,"2*_4",ArtMode);
  RadioButton(h,v+=16,5,0,"2*_7",ArtMode); v = vm; h = 200;
  if (IsEnterprise) then begin
    CheckBox(h,v,0,"Only with Balance",flags[0]); v = v + 16;
  end;
  EndWindow;
end;

window ShipableRClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vm,vs;
  WindowBegin("Specify Deliverable List",ShipableRClass,CGRcW,RcType);
  SetWRect(20,80,510,390);
  v= 6; vs = 20;h =110;
  EditFieldTL(h,v, 150,"Order",   M4Str,Normal,30,f1,false,0);
  EditFieldTL(h,v+=vs ,150,"Item",M4UStr,Normal,41,LastAcc,false,INSClass);
  EditFieldTL(h,v+=vs ,150,"Customer",M4UStr,Normal,41,f2,false,CUSClass);
  EditFieldTL(h,v+=vs ,150,"Route",M4Code,Normal,20,f12,false,DelRouteSClass); //EBS
  if (HasSalesman or HasSalesmanBonus) then begin
    EditFieldTL(h,v+=vs ,50,"#Salesman#",M4UStr,Normal,10,AccStr,false,UserSClass);
  end;
  if (IsEnterprise) then begin
    EditFieldTL(h,v+=vs ,50,"Order Class",M4UStr,Normal,5,FirstAcc,false,OrderClassSClass);
  end;
  if (HasObjects) then begin
    EditFieldTL(h,v+=vs ,150,"Object",M4UStr,Normal,60,ObjStr,false,ObjSClass);
  end;
  if (HasMultiLocations) then begin
    EditFieldTL(h,v+=vs, 150,"Location",M4UStr,Normal,10,f4,false,LocationSClass);
  end;
  if (HasItemGroups) then begin
    EditFieldTL(h,v+=vs ,50,"Item Group",M4UStr,Normal,5,f3,false,ITSClass);
  end;
  if (HasItemClassification) then begin
    EditFieldTL(h,v+=vs, 150,"Item Classification", M4UStr,Normal,100,f8,false,DISClass);
  end;
  if (IsEnterprise) then begin
    EditFieldTL(h,v+=vs ,150,"Planned Delivery",M4UStr,Normal,21,Stext,false,PasteCurDate);
    EditFieldTL(h,vm=(v+=vs) ,150,"Order Type",M4Str,Normal,433,f7,false,SetSClass);
  end;
  CheckBox(h-5,v+=25,0,"Allow Part Deliveries",OnlyUnprntd);
  if (HasItemGroups) then begin
    CheckBox(h-5,v+=16,0,"Show Items from selected Group only",Comparison);
  end;
  ButtonFrame(h-5,vm=(v+=40),123,2,"Status");
  CheckBox(h-5,v,0,"Not OKed",flags[7]);
  CheckBox(h-5,v+=16,0,"OKed",flags[8]);
  if (IsEnterprise) then begin
    ButtonFrame(h+=150,v=vm,170,3,"Function");
    RadioButton(h,v,0,0,"All Customers",flags[9]);
    RadioButton(h,v+=16,1,0,"Exclude Customers on Hold",flags[9]);
    RadioButton(h,v+=16,2,0,"Only Customers on Hold",flags[9]);
  end;
  ButtonFrame(h=300,v=24,160,4,"Function");
  RadioButton(h,v,0,0,"Overview",ArtMode);
  if (HasSalesman or HasSalesmanBonus) then begin
    RadioButton(h,v+=16,3,0,"Overview per #Salesman#",ArtMode);
  end;
  RadioButton(h,v+=16,1,0,"Detailed",ArtMode);
  RadioButton(h,v+=16,2,0,"Order rows",ArtMode);
  RadioButton(h,v+=16,4,0,"By routes",ArtMode); //EBS
  EndFrame;
  ButtonFrame(h,v+=40,150,3,"Function");
  RadioButton(h,v,0,0,"Amount",flags[10]);
  RadioButton(h,v+=16,1,0,"Qty",flags[10]);
  CheckBox(h+10,v+=16,0,"Inc. #Stock# Level",flags[11]);
  EndWindow;
end;

window IVRClass:2
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h1,v,vs;

  WindowBegin("Specify Invoices",IVRClass,CGRcW,RcType);
  SetWRect(20,80,440,300);
  PeriodField(h=100,v=6,"Period");
  EditFieldTL(h,v+=20, 150,"No.",   M4Str,Normal,30,f1,false,0);
  EditFieldTL(h,v+=20, 150,"Offical No.",   M4Str,Normal,60,f3,false,0);
  EditFieldTL(100,v+=20,150,"Customer",M4UStr,Normal,41,f2,false,CUSClass);
  EditFieldTL(100,v+=20,150,"Route",M4Code,Normal,20,f10,false,DelRouteSClass); //EBS
  EditFieldTL(100,v+=20,50,"Language",   M4Str,Normal,5,Language,false,LangSClass);
  ButtonFrame(h=30,v=147,175,3,"Status"); //EBS edit
  RadioButton(h,v,0,0,"Unprinted Only",OnlyUnprntd);
  RadioButton(h,v+=16,1,0,"All",OnlyUnprntd);
  RadioButton(h,v+=16,2,0,"Original",OnlyUnprntd);
  ButtonFrame(h,v=230,175,5,"Row Layout");
  RadioButton(h,v,0,0,"Default",flags[15]);
  RadioButton(h,v+=16,1,0,"By Item Group",flags[15]);
  RadioButton(h,v+=16,2,0,"By Item Group - Single Row",flags[15]);
  RadioButton(h,v+=16,3,0,"By Room Package",flags[15]);
  RadioButton(h,v+=16,4,0,"Single Row",flags[15]);
  CheckBox(h1=225,v=140,0,"Only Open Invoices",flags[10]);
  CheckBox(h1,v+=16,0,"Skip Invalidated Invoices",flags[11]);
  CheckBox(h1,v+=16,0,"Include _EDI Invoices",flags[28]);
  CheckBox(h1,v+=16,0,"Include E-Invoices",flags[5]);
  ButtonFrame(h1,v=230,165,4,"Invoice Type");
  CheckBox(h1,v,0,"Invoice",flags[1]);
  CheckBox(h1,v+=16,0,"Cash Note",flags[2]);
  CheckBox(h1,v+=16,0,"C_redit Note",flags[3]);
  CheckBox(h1,v+=16,0,"I_nterest Invoice",flags[4]);
  EndWindow;
end;

window BLT_PUToScannerVClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h2,v,vm;

  WindowBegin("Export goods receipt",BLT_PUToScannerVClass,CGMnt,RcType);
    SetWRect(20,80,450,150);
    PeriodField(h=100,v=10,"Period");
    EditFieldTL(h,v+=20,100,"Goods receipt",M4Long,Normal,10,long1,false,PUSClass);
    ButtonFrame(h,v+=40,140,2,"Include");
    CheckBox(h,v,0,"Exported",flags[0]);
    CheckBox(h,v+=16,0,"Not exported",flags[1]);
  EndWindow;

  return;
end;

window BLT_SHToScannerVClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h2,v,vm;

  WindowBegin("Export deliveries",BLT_SHToScannerVClass,CGMnt,RcType);
    SetWRect(20,80,450,150);
    PeriodField(h=100,v=10,"Period");
    EditFieldTL(h,v+=20,100,"Delivery nr.",M4Long,Normal,10,long1,false,SHSClass);
    ButtonFrame(h,v+=40,140,2,"Include");
    CheckBox(h,v,0,"Exported",flags[0]);
    CheckBox(h,v+=16,0,"Not exported",flags[1]);
  EndWindow;

  return;
end;

window BLT_ORToScannerVClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h2,v,vm;

  WindowBegin("Export deliveries",BLT_ORToScannerVClass,CGMnt,RcType);
    SetWRect(20,80,450,150);
    PeriodField(h=100,v=10,"Period");
    EditFieldTL(h,v+=20,100,"Sales order nr.",M4Long,Normal,10,long1,false,ORSClass);
    ButtonFrame(h,v+=40,140,2,"Include");
    CheckBox(h,v,0,"Exported",flags[0]);
    CheckBox(h,v+=16,0,"Not exported",flags[1]);
  EndWindow;

  return;
end;

window BLT_ScannerSetTClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vm,vs;
  v = 6; vs = 20; h = 150;

  WindowBegin("Barcode scanner folders",BLT_ScannerSetTClass,CGSbl,ItemSettingType);
  Sizeable(-1,-1,-1,0);
  SetWRect(20,80,480,320);
  SetBlid(BLT_ScannerSetBlock);
  EditField(h,v=10,-20,"Goods rec. file name",Normal,PUFileName,false,0);
  EditField(h,v+=vs,-20,"Goods rec. export folder",Normal,PUExpFolder,false,0);
  EditField(h,v+=vs,-20,"Goods rec. import folder",Normal,PUImpFolder,false,0);
  EditField(h,v+=vs,-20,"Delivery file name",Normal,SHFileName,false,0);
  EditField(h,v+=vs,-20,"Delivery export folder",Normal,SHExpFolder,false,0);
  EditField(h,v+=vs,-20,"Delivery import folder",Normal,SHImpFolder,false,0);
  EditField(h,v+=vs,-20,"Item file name",Normal,ItemFileName,false,0);
  EditField(h,v+=vs,-20,"Item exprot folder",Normal,ItemExpFolder,false,0);
  EndWindow;
end;

window SHSClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  WindowBegin("Deliveries",SHSClass,CGslist,-);
  SpawnClass(SHDClass);
  SetWRect(20,80,880,298);
  Sizeable(-1,-1,0,0);
  UseView(SHVc);
  RecordList(4,17,-21,-39);
  RlColKey(4,4,"No.",SerNr,false,SerNr);
  RlColKey(79,79,"OK",OKFlag,false,OKFlag);
  RlColKey(111,111,"Date",ShipDate,false,ShipDate);
  if (HasMultiLocations) then begin
    RlCol(191,191,"Location",Location,false);
    RlColKey(251,251,"Order No.",OrderNr,false,OrderKey);
  end else begin
    RlColKey(191,191,"Order No.",OrderNr,false,OrderKey);
  end;
  if (HasOfficialSerNr) then begin
    RlColKey(321,321,"Official No.",OfficialSerNr,false,OfficialSerNr);
  end;
  RlColKey(411,411,"Customer",CustCode,false,CustCode);
  RlColKey(471,471,"Name",Addr0,false,CustName);
  if (IsEnterprise) then begin
    RlColKey(-180,-180,"Transport No.",TransportNumber,false,TransportNumber);
    RlColKey(-80,-80,"Del. Mode",ShipMode,false,ShipMode);
  end else begin
    RlColKey(-180,-180,"Comment",Comment,false,Comment);
  end;
  SearchField("Search");
  EndWindow;
end;

window BLT_PUFromScannerVClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h2,v,vm;

  WindowBegin("Goods receipt import",BLT_PUFromScannerVClass,CGMnt,RcType);
    SetWRect(20,80,450,150);
    EditFieldTL(h=100,v=10,-20,"File name",M4Str,Normal,255,f1,false,BLT_FileSClass);
  EndWindow;

  return;
end;

window BLT_SHFromScannerVClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h2,v,vm;

  WindowBegin("Delivery note import",BLT_SHFromScannerVClass,CGMnt,RcType);
    SetWRect(20,80,450,150);
    EditFieldTL(h=100,v=10,-20,"File name",M4Str,Normal,255,f1,false,BLT_FileSClass);
  EndWindow;

  return;
end;

window BLT_FileSClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin

  WindowBegin("Insert",BLT_FileSClass,CGother,HBlRecType);
    SetWRect(240,80,500,299);
    Sizeable(-1,-1,0,0);
    StringList(9,9,-40,-10);
  EndWindow;

  return;
end;

window BLT_INToScannerVClass:1
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h2,v,vm;

  WindowBegin("Item export",BLT_INToScannerVClass,CGMnt,RcType);
    SetWRect(20,80,450,150);
  EndWindow;

  return;
end;

window ProdSettingsTClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h2,v,vs;
  WindowBegin("Production Settings",ProdSettingsTClass,CGSbl,-);
  SetBlid(ProdSettingsBlock);
  SetWRect(20,80,470,420);
  Sizeable(-1,-1,0,0);
  Tile(0,30,false,"",-);
  TileButton(1,"Options");
  TileButton(2,"Cost Items");
  Tile(1,120,true,"1",DayBuffer);
  h = 120; v = 6; vs = 20; h2 = 350;
  EditField(h,v,100,"Buffer Days",Normal,DayBuffer,false,0);
  CheckBox(h,v+=30,0,"Production Lines hold Actual Qty",ProdRowsHoldActualQty);
  CheckBox(h,v+=17,0,"Always create Normal Production Qty from Planned",SetNormalPlanned);
  CheckBox(h,v+=17,0,"Create #Stock Depreciation# from Discarded Production",MakeSDFromDiscard);
  CheckBox(h,v+=17,0,"Round odd Hours to One Day",RoundUpToOneDay);
  if (StandardHansa==false) then begin
    CheckBox(h,v+=17,0,"Transfer Order Class to Production Class",OrdClassToProd);
  end;
//  CheckBox(h,v+=17,0,"Update Production In Qty from #Stock# Movement",UpdProdInQtyFromStockMov);
//we will finish it in 6.2
  h=h-100;
  if (HasAdvancedProduction) then begin
    ButtonFrame(h,v+=41,380,2,"Sequence of Production Operations");
    RadioButton(h,v,0,0,"Allow to work with Next Sequence while current one is not finished",CompleteSequence);
    RadioButton(h,v+=16,1,0,"Complete Sequence before next one",CompleteSequence);
  end;
  ButtonFrame(h,v+=41,123,2,"Generate Planned");
  RadioButton(h,v,0,0,"Productions",AutoGenProd);
  RadioButton(h,v+=16,1,0,"Production Orders",AutoGenProd);
  Tile(2,140,true,"2",MachineCostItem);
  h = 120; v = 3; vs = 20; h2 = 350;
  EditField(h,v,100,"Machine Cost Item",Normal,MachineCostItem,false,INSClass);
  EditField(h,v+=vs,100,"Labour Cost Item",Normal,LabourCostItem,false,INSClass);
  EditField(h2,v,60,"Run Time Act. Type",Normal,ActType,false,ActTypeSClass);
  EditField(h,v+=vs,100,"Setup Cost Item",Normal,SetupCostItem,false,INSClass);
  EditField(h2,v,60,"Setup Act. Type",Normal,SetupActType,false,ActTypeSClass);
  EditField(h,v+=vs,100,"Move Cost Item",Normal,MoveCostItem,false,INSClass);
  EditField(h2,v,60,"Move Act. Type",Normal,MoveActType,false,ActTypeSClass);
  EditField(h,v+=vs,100,"Queue Cost Item",Normal,QueueCostItem,false,INSClass);
  EditField(h2,v,60,"Queue Act. Type",Normal,QueueActType,false,ActTypeSClass);
  EditField(h,v+=vs,60,"Box item class",Normal,BoxItemClass,false,DISClass); //EBS
  h=h-100;
  ButtonFrame(h,v+=40,123,2,"Time");
  RadioButton(h,v,0,0,"Actual Time",FixedTime);
  RadioButton(h,v+=16,1,0,"Fixed Time",FixedTime);
  CheckBox(h,v+=30,0,"Auto Calculate Cost of produced Items",AutoCalcCostf);
  CheckBox(h,v+=17,0,"Add Work Cost",AddWorkCost);
  EditField(350,v,60,"Work Cost per Hour",Normal,WorkCostPerHour,true,0);
  CheckBox(h,v+=17,0,"Add Discarded Cost",AddDiscardedCost);
/*
  EditField(h,v,100,"Machine Cost Item",Normal,MachineCostItem,false,INSClass);
  EditField(h2,v,60,"Prod. Act. Type",Normal,ActType,false,ActTypeSClass);
  EditField(h,v+=vs,100,"Labour Cost Item",Normal,LabourCostItem,false,INSClass);
  EditField(h2,v,60,"Setup Act. Type",Normal,SetupActType,false,ActTypeSClass);
  EditField(h,v+=vs,100,"Buffer Days",Normal,DayBuffer,false,0);
  CheckBox(h=h-100,v+=30,0,"Auto Calc.Cost of produced items",AutoCalcCostf);
  CheckBox(h,v+=17,0,"Round odd Hours to One Day",RoundUpToOneDay);
  CheckBox(h,v+=17,0,"Add Work Cost",AddWorkCost);
  EditField(350,v,60,"Work Cost per Hour",Normal,WorkCostPerHour,true,0);
  CheckBox(h,v+=17,0,"Add Discarded Cost",AddDiscardedCost);

  CheckBox(h,v+=17,0,"Create #Stock Depreciation# from Discarded Production",MakeSDFromDiscard);
  CheckBox(h,v+=17,0,"Always create Normal Production Qty from Planned",SetNormalPlanned);
  CheckBox(h,v+=17,0,"Production Lines hold Actual Qty",ProdRowsHoldActualQty);
  ButtonFrame(h,v+=41,123,2,"Generate Planned");
  RadioButton(h,v,0,0,"Productions",AutoGenProd);
  RadioButton(h,v+=16,1,0,"Production Orders",AutoGenProd);
  ButtonFrame(h,v+=41,380,0,"Production Operations");
  ButtonFrame(h,v+=20,380,2,"Sequence");
  RadioButton(h,v,0,0,"Allow to work with Next Sequence while current one is not finished",CompleteSequence);
  RadioButton(h,v+=16,1,0,"Complete Sequence before next one",CompleteSequence);
*/
  EndWindow;
end;

window BLT_BoxItemsSClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin

  WindowBegin("Insert",BLT_BoxItemsSClass,CGother,HBlRecType);
    SetWRect(240,80,500,299);
    Sizeable(-1,-1,0,0);
    StringList(9,9,-40,-10);
  EndWindow;

  return;
end;

window RecDClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h2,h3,v,vm,vs;
  WindowBegin("Recipe",RecDClass,CGview,-);
  SetWRect(20,80,600,340);
  Sizeable(-1,-1,0,0);
  UseView(RecVc);
  FormName(RecForm);
  vs = 20;
  h = 130; h2 = 350; h3 = 570;
  EditField(h,v=10,50,"Code",St_i,Code,false,0);
  EditField(h2,v,-40,"Comment",Normal,Comment,false,0);
  if (HasAdvancedProduction) then begin
    EditField(h,v+=vs,85,"Normal Prod Qty",Normal,NormProdQty,true,0);
    EditField(h2,v,85,"Time to Setup",Normal,SetUpTime,true,0);
    EditField(h3,v,85,"Language",Normal,LangCode,true,LangSCLass);
    EditField(h,v+=vs,85,"Min Prod Qty",Normal,MinProdQty,true,0);
    EditField(h2,v,85,"Days to Produce",Normal,QtyAssemblyDays,true,0);
  end;
  if (IsStandardProduct) then begin
    CheckBox(h3,v+=vs,0,"Closed",Closed);
  end else begin
    CheckBox(h3,v,0,"Closed",Closed);
  end;
  if (HasAdvancedProduction) then begin
    EditField(h,v+=vs,85,"Fixed Assembly Days",Normal,FixedAssembDays,true,0);
  //  EditField(h,v+=vs,85,"In Item Scale",Normal,Scale,false,0);
    EditField(h2,v,85,"Hours to Produce",Normal,HrsToProd,true,0);
    EditField(h2+160,v,50,"Minutes",Normal,MinsToProd,true,0);
    EditField(h2+280,v,50,"Seconds",Normal,SecsToProd,true,0);
    EditField(h,v+=vs,85,"Res. mgr. #Colour#",Normal,ResMgrColNr,false,SetSClass);
    EditField(h2,v,85,"Number Produced",Normal,NumProd,true,0);
    EditField(h,v+=vs,85,"Standard Batch",Normal,StdBatch,true,0);
    EditField(h2,v,85,"Extra Prod Qty",Normal,ExtraProdQty,false,0);
    EditField(h2+220,v,85,"Time class",Normal,TimeClass,false,TimeClassSClass); //EBS
    EditField(h,v+=vs,85,"Default Routing",Normal,DefaultRouting,false,RoutingSClass);
    EditField(h2,v,85,"Def. box item",Normal,DefBoxItem,false,BLT_BoxItemsSClass); //EBS
    EditField(h2+220,v,85,"Qty in box",Normal,QtyInBox,true,0); //EBS
    EditField(h,v+=vs,-40,"Instructions",Normal,Instr0,false,0);
    EditField(h,v+=vs,-40,"",Normal,Instr1,false,0);
    EditField(h,v+=vs,-40,"",Normal,Instr2,false,0);
  end;
  CheckBox(30,-21,0,"Locked",OKFlag);
  EnterSkip(Math);
  h=4; v=v+(vs+17);
  MatrixBegin(4,v,-50,-49,-,300);
  InsertRowTest;
  DeleteRowTest;
  vm = v;
  Flip(0);
  MatCol(1,30,"Item",0,Item,false,INSClass);
  MatCol(1,114,"Specification",0,Comment,false,0);
  Flip(1);
  MatCol(1,-350,"In",0,InQty,true,MATVARINSClass);
  MatCol(1,-290,"Out",0,OutQty,true,MATVARINSClass);
  MatCol(1,-230,"Unit",0,Unittext,false,UnitSClass);
  if (HasAdvancedProduction) then begin
    MatCol(1,-180,"Rel.",0,RelVal,true,0);
  end;
  MatCol(1,-120,"I-cost",0,ItemCost,true,0);
  if (HasAdvancedProduction) then begin
    MatCol(1,-60,"W-cost",0,ExtraCost,true,0);
  end;
  if (HasAdvancedProduction) then begin
    Flip(2);
    MatCol(1,-400,"Description",0,Desc,false,0);
    MatCol(1,-240,"Material",0,Material,false,MaterialSClass);
    MatCol(1,-100,"Recipe",0,Recipe,false,SetSClass); // Bad name for field, will be confused with the Recepy of the item
  end;
  EndMatrix;
  vs = 20;
  if (HasAdvancedProduction) then begin
    VTab(-35,v,-16,v+vs,ToolFlip,1,"A");
    v=v+vs;  VTab(-35,v,-16,v+vs,ToolFlip,2,"B");
  end;
  EditField(-370,  -21,85,"Cost of In-Items",ViewOnly,InSum,true,0);
  EditField(-150,  -21,85,"Value of Out-Items",ViewOnly,OutSum,true,0);
  if (HasAdvancedProduction) then begin
    SpecialMenu("Open Production Item Alternative",' ',0,"RecShowMachineDsm");
  end;
  SpecialMenu("Item Search",'f',1,"ItemSearchDsm");
  EndWindow;
end;

window PLDClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vm,vs;
  WindowBegin("Price",PLDClass,CGview,-);
  SetWRect(64,80,709,330);
  UseView(PLVc);
  v = 10; vs = 20; h = 120;
  EditField(h,v, 100,"Item",Normal,ArtCode,false,INSClass);
  EditField(h,v+=vs,50,"Price List",Normal,PLCode,false,PLDefSClass);
  EditField(h,v+=vs,-40,"Comment",Normal,Comment,false,0);
  EditField(h,v+=vs ,70,"Price",Normal,ExVatPrice,true,0);
  if (HasModNL) then begin
    EditField(h,vm=(v+=vs),70,"Sales A/C",Normal,SalesAcc,false,AccSClass);
  end;
//  EditField(h,v+=vs,70,"#VAT# Code",Normal,VATCode,false,VATCodeSClass);
  if (HasStandardCRM) then begin
    EditField(h,v+=vs,70,"Customer",Normal,CustCode,false,CUSClass);
  end;
  if (HasBuyBack) then begin
    EditField(h,v+=vs ,70,"BuyBack Cost",Normal,CostPrice,true,0);
    EditField(h,v+=20,70,"BuyBack Accr. A/C",Normal,BBVarAcc,false,AccSClass);
  end;
  //EBS -->
  EditField(h,v+=vs,70,"Camp. start date",Normal,CampStartDate,false,PasteCurDate);
  EditField(h,v+=vs,70,"Camp. end date",Normal,CampEndDate,false,PasteCurDate);
  EditField(h,v+=vs,70,"Camp. price",Normal,CampPrice,true,0);
  //EBS <--
  if (IsEnterprise) then begin
    CheckBox(80,v+=30,0,"Use this price, don't use any other Pricing Calculations",NoOtherPricing);
    CheckBox(80,v+=16,0,"Do not Recalculate",DonotRecalculate);
  end;
  if (HasBuyBack) then begin
    CheckBox(80,v+=16,0,"Generate BuyBack Transaction",BBGenTrans);
  end;
  EndWindow;
end;

window InvoiceBalticXMLExpVClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  integer h,v,vs,vs2;

  WindowBegin("Invoice (Edisoft XML) export",InvoiceBalticXMLExpVClass,CGMnt,RcType);
  SetWRect(20,80,450,240);
  v = 20; vs = 20; vs2 = 40; h = 145;
  PeriodField(h,v,"Period");
  EditFieldTL(h,v+=vs,150,"Customer",M4Code,Normal,10,f1,false,CUSClass);
  EditFieldTL(h,v+=vs,150,"Invoice",M4Long,Normal,0,long1,false,IVSClass);
  h = h-10;
  ColourPushButton(h,v+=vs+10,h+170,v+vs2,"StartInvoiceBalticXMLExpSm","Export",2);
  StaticText(h,v+60,"",false);
  EndWindow;

  return;
end;

window InvBalXMLExpFolTClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  integer h,v,vs,vs2;

  WindowBegin("Invoice (Edisoft XML) export settings",InvBalXMLExpFolTClass,CGSbl,-);
  SetBlid(InvBalXMLExpFolBlock);
  SetWRect(64,80,570,260);
  h=160;v=10; vs =20;
  EditField(h,v,130,"Senders ILN code",Normal,DefSendILN,false,0);
  EditField(h,v+=vs,130,"Senders client code",Normal,DefSendCustCode,false,CUSClass);
  EditField(h,v+=vs,130,"Receivers ILN code",Normal,DefRecvILN,false,0);
  EditField(h,v+=vs,130,"Receivers client code",Normal,DefRecvCustCode,false,CUSClass);
  EditField(h,v+=vs,130,"Logistics company ILN code",Normal,LogistCompILN,false,0);
  EditField(h,v+=vs,130,"Senders veterinary cert. No",Normal,VetCertNo,false,0);
  EditField(h,v+=vs,130,"Cust. code in logistics company",Normal,LogisticCustCode,false,0);
  //h=70;
  EditField(h,v+=vs*2,340,"Edisoft export folder",Normal,Folder,false,0);
  EndWindow;

  return;
end;

window ORXMLImpErrorDClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vs;

  WindowBegin("Sales Order import - errors",ORXMLImpErrorDClass,CGview,-);
  SetWRect(20,80,500,200);
  UseView(ORXMLImpErrorVc);
  vs=20; h=75;
  EditField(h,v=15,80,"No.",Normal,SerNr,false,0);
  EditField(h+150,v,80,"Sales Order",Normal,ORSerNr,false,0);
  EditField(h,v+=vs,80,"Date",Normal,TransDate,false,0);
  EditField(h+150,v,80,"Time",Normal,TransTime,false,0);
  EditField(h,v+=vs*2,-40,"Error",Normal,Comment,false,0);
  SpecialMenu("",'',0,"");
  EndWindow;

  return;
end;

window ORXMLImpErrorLClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin

  WindowBegin("Sales Order import - errors",ORXMLImpErrorLClass,CGmlist,-);
  SpawnClass(ORXMLImpErrorDClass);
  Sizeable(-1,-1,0,0);
  SetWRect(64,80,550,300);
  UseView(ORXMLImpErrorVc);
  RecordList(4,17,-20,-39);
  RlColKey(4,4,"No.",SerNr,false,SerNr);
  RlColKey(80,80,"Sales Order",ORSerNr,false,ORSerNr);
  RlColKey(160,160,"Date",TransDate,false,TransDate);
  RlCol(225,225,"Time",TransTime,false);
  RlColKey(280,280,"Error",Comment,false,Comment);
  SearchField("Search");
  EndWindow;

  return;
end;

window ORXMLImpCUTClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v;

  WindowBegin("Sales Order import - customer codes",ORXMLImpCUTClass,CGHbl,HBlRecType);
  SetBlid(ORXMLImpCUBlock);
  SetWRect(20,80,500,400);
  Sizeable(-1,-1,0,0);
  h = 8; v = 25;
  MatrixBegin(h,v,-31,-10,-,1000);
  MatCol(1,h=30,"Imp. customer ILN code",0,ImpCustCode,false,0);
  MatCol(1,h=210,"HansaWorld customer code",0,CustCode,false,VESClass);
  EndMatrix;
  EndWindow;

  return;
end;

window ORXMLImpArtGTClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v;

  WindowBegin("Sales Order import - item groups",ORXMLImpArtGTClass,CGHbl,HBlRecType);
  SetBlid(ORXMLImpArtGBlock);
  SetWRect(20,80,500,400);
  Sizeable(-1,-1,0,0);
  h = 8; v = 25;
  MatrixBegin(h,v,-31,-10,-,100);
  MatCol(1,h=30,"Item Group",0,ArtGroup,false,ITSClass);
  EndMatrix;
  EndWindow;

  return;
end;

window DelAddrDClass:2
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h2,h3,v,vm,vs;
  string 255 label;
  WindowBegin("Delivery Address",DelAddrDClass,CGview,DelAddrView);
  DynamicWindow;
  SetWRect(64,80,650,420);
  UseView(DelAddrVc);
  v = 10; vs = 20; h = 100; h2 = 350; h3 = 360;
  // if (HasModRent) then begin //EBS
    Tile(0,90,false,"",DelCode);
    TileButton(1,"Address");
  if (HasModRent) then begin
    TileButton(2,"Rental");
  end;
  EditField(h,v, 80,"Customer",Normal,CustCode,false,AllCUSClass);
  EditField(h2,v,-40,"Name",Normal,Name,false,0);
  EditField(h,v+=vs, 80,"Del.Code",Normal,DelCode,false,0);
  EditField(h2,v,-40,"Comment",Normal,Comment,false,0);
  EditField(h,v+=vs, 80,"Freight comp.",Normal,BLT_FreightComp,false,FreightCompanySClass);
  EditField(h2,v,-40,"Del. address code",Normal,BLT_FreightCompAddr,false,0);
  EditField(h,v+=vs, 80,"Default location",Normal,DefaultLocation,false,LocationSClass);
  // if (HasModRent) then begin //EBS
    Tile(1,250,false,"1",DelAddr0);
  // end; //EBS
  label = UserDefined("CUVc","InvAddr0");
  EditField(h,v=6,-40,label,Normal,DelAddr0,false,0);
  label = UserDefined("CUVc","InvAddr1");
  EditField(h,v+=vs,-40,label,Normal,DelAddr1,false,0);
  label = UserDefined("CUVc","InvAddr2");
  EditField(h,v+=vs,-40,label,Normal,DelAddr2,false,0);
  label = UserDefined("CUVc","InvAddr3");
  EditField(h,v+=vs,-40,label,Normal,DelAddr3,false,0);
  label = UserDefined("CUVc","InvAddr4");
  EditField(h,v+=vs,-40,label,Normal,DelAddr4,false,0);
  EditField(h,vm = (v+=vs),150,"Contact",Normal,Contact,false,0);
  EditField(h3,v,-40,"Email",Normal,Email,false,0);
  EditField(h,v+=vs,150,"Telephone",Normal,Phone,false,0);
  EditField(h3,v,-40,"Fax",Normal,Fax,false,0);
  EditField(h,v+=vs,50,"Country",Normal,DelCountry,false,CountrySClass);
  EditField(h3,v,-40,"Region",Normal,Region,false,RegionSClass);

  EditField(h,v+=vs,150,"GLN",Normal,RecipientGLN,false,0);
  EditField(h,v+=vs, 150,"Objects",Normal,Objects,false,ObjSClass); //EBS
  EditField(h3,v,-40,"Department",Normal,RecipientDepartment,false,0);
  v = v + vs;
  if (HasFreightAdvanced) then begin
    EditField(h,v,50,"Freight Code",Normal,FreightCode,false,WebFreightSClass);
  end;
  if (HasRoute) then begin
    EditField(h3,v,-40,"Route",Normal,Sorting,false,DelRouteSClass);
  end;
  if (HasTaxMatrix) then begin
    if (UseTaxTemplatesforTaxCalc) then begin
      EditField(h3,v+=vs,50,"Sales Tax Temp.",Normal,TaxTemplateCode,false,TaxTemplateSClass);
    end else begin
      EditField(h3,v+=vs,50,"#VAT# Code",Normal,VATCode,false,VATCodeSClass);
    end;
  end;
  if (HasLocalization("GBR")) then begin
    HalPushButton(-40-100,v+=20,-40,v+20,"UpdAddressDelAddrDsm","Update Address");
  end;
  VATZoneButtonsLabelsENG(h,v=v+38,170,16);
  if (HasModRent) then begin
    Tile(2,250,false,"2",PriceList);
    v = 6; h = 50; vs = 20; h2 = 350;
    ButtonFrame(h,vm=(v=20),250,3,"Invoice Contents");
    RadioButton(h,v,0,0,"One Line per Item per Reservation",InvoiceBase);
    RadioButton(h,v+=16,1,0,"One Line per Reservation",InvoiceBase);
    RadioButton(h,v+=16,2,0,"One Line per Agreement",InvoiceBase);
    ButtonFrame(h2,v=vm,200,3,"Period");
    RadioButton(h2,v,0,0,"Don't Include",IncludePeriod);
    RadioButton(h2,v+=16,1,0,"One Line Above Item",IncludePeriod);
    RadioButton(h2,v+=16,2,0,"Same Line, After the Item Name",IncludePeriod);
    ButtonFrame(h,vm=(v+=40),250,3,"Quantity (One Line per Reservation Only)");
    RadioButton(h,v,0,0,"Days as Quantity",UseAsQty);
    RadioButton(h,v+=16,1,0,"Items as Quantity",UseAsQty);
    RadioButton(h,v+=16,2,0,"Multiply Items with Quantity",UseAsQty);
    ButtonFrame(h2,v=vm,200,3,"Group Invoicing");
    RadioButton(h2,v,0,0,"None",GroupInvoice);
    RadioButton(h2,v+=16,1,0,"One Invoice per Customer",GroupInvoice);
    RadioButton(h2,v+=16,2,0,"One Invoice per Customer/Site",GroupInvoice);
    EditField(h2,v+32,100,"Price List",Normal,PriceList,false,PLDefSClass);
    CheckBox(h,vm=(v+=32),0,"Include Original Item",IncludeOriginalItem);
    CheckBox(h,v+=16,0,"Include Agreement and Site",IncludeSite);
    CheckBox(h,v+=16,0,"Include Customer Order No.",InclCustOrdNr);
    CheckBox(h,v+=16,0,"Include Rental Reservation No.",InclRentResNo);
    CheckBox(h,v+=16,0,"Add Empty Line as a Separator",AddEmptyLine);
  end;
  EndWindow;
end;

window IVDClass:2
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h1,h2,h3,h4,hm,hs,t,v,v2,v3,vm,vs,width,h5;
  string 255 label;
  Integer rn;

  WindowBegin("Invoice",IVDClass,CGview,-);
  Sizeable(-1,-1,0,0);
  UseView(IVVc);

  ActiveFieldOnNew("CustCode");
  SetWRect(20,80,750,460);
  CommunicateButton;
  Tile(0,74,false,"",CustCode);
  EditField(75,vm=(v=6),95,"No.",Normal,SerNr,false,TSerSClass);
  EditField(75,v+=20,95,"Customer",Normal,CustCode,false,CUSClass);
  EnterSkip(PayDeal);
  EditField(h=255,v=vm,-40,"Name",Normal,Addr0,false,0);
  if (StandardHansa==false) then begin
    if (HasLocalization("FIN")) then begin
      EditField(h,vm=(v+=20),180,"Payment Ref",ViewOnly,CalcFinRef,false,0);
    end else begin
      EditField(h,vm=(v+=20),135,"Official No.",Normal,OfficialSerNr,false,LegalInvNrSClass);
    end;
    if (HasLocalization("BRA")) then begin
      EditField(500,vm,135,"Bank Receipt No.",ViewOnly,BankReceiptNr,false,0);
    end;
  end else begin
    v = v + 20;
    vm = v;
  end;
  CheckBox(h4=-80,v,0,"OK",OKFlag);
  TileButton(1,"Terms");
  TileButton(2,"Items");
  TileButton(3,"Currency");
  TileButton(4,"Del. Terms");
  TileButton(5,"Identifiers");
  TileButton(6,"Price List");
  TileButton(7,"Inv. Address");
  TileButton(8,"Del. Address");
  Tile(1,110,false,"1",InvDate);
  vs = 20; h1 = 110; h2 = 290; h3 = 530; h4 = -100;
  EditField(h1,vm=(v=6),82,"Invoice Date",Normal,InvDate,false,PasteCurDate);
  EditField(h1,v+=vs,25,"Payment Terms",Normal,PayDeal,false,PDSClass);//PDMSClass);
  EditField(h1,v+=vs,82,"Due Date",Normal,PayDate,false,PasteCurDate);
  EditField(h1,v+=vs,82,"Trans. Date",Normal,TransDate,false,PasteCurDate);
  EditField(h1,v+=vs,82,"Service Del. Date",Normal,ServiceDelDate,false,PasteCurDate);
  EditField(h2,v=vm,135,"Our Reference",Normal,OurContact,false,0);
  EditField(h2,v+=vs,135,"Attention",Normal,ClientContact,false,ContactSClass);
  EditField(h2,v+=vs,135,"Tags/Objects",Normal,Objects,false,ObjSClass);
  EditField(h2,v+=vs,135,"Reference",Normal,RefStr,false,0);
  EditField(h2,v+=vs,135,"Cust. Ord. No.",Normal,CustOrdNr,false,0);
  EditField(h3,v=vm,80,"#Salesman#",Normal,SalesMan,false,UserSClass);
  if (StandardHansa) then begin
    EditField(h3,v+=vs,80,"Location",Normal,Location,false,LocationSClass);
  end else begin
    EditField(h3,v+=vs,80,"Project",Normal,PRCode,false,0);
  end;
  EditField(h3,v+=vs,80,"Credit Reason",Normal,Reason,false,StandProblemsSClass);
  if (HasLocalization("MEX")) then begin
    EditField(h3,v+=vs,80,"Payment Mode",Normal,PMCode,false,PMSClass);
  end;
  if (HasLocalization("BRA")) then begin
    EditField(h3,v+=vs,80,"Invoice Type",Normal,BrazilEInvType,false,BrazilEInvTypeSClass);
  end;
  if (HasLocalization("BOL,BRA,HRV,MEX")) then begin
    EditField(h3,v+=vs,130,"Tax Seal",ViewOnly,TaxAdminServSeal,false,0);
  end;
  if (HasLocalization("MEX")) then begin
    EditField(h3,v+=vs,80,"No. Pay. Acc.",Normal,PayAccNo,false,0);
  end;
  if (HasLocalization("RUS")) then begin
    EditField(h3,v+=vs,-20,"Receipt Info",Normal,ReceiptInfo,false,0);
  end;
  CheckBox(-80,v=6,0,"Disputed",DisputedFlag);
  CheckBox(-80,v+=16,0,"Sent to EDI",SentToEDI); //EBS
  CheckBox(-80,v+=16,0,"Confirmed",ConfirmedEDI); //EBS
  if (StandardHansa) then begin
    CheckBox(h4,v+=16,0,"Update #Stock#",UpdStockFlag);
  end;
  EnterSkip(Math);
  Tile(2,220,true,"2",Math);
  //  CheckBox(20,-20,0,"OK",OKFlag);
  if (CompileType!=ctiPhone) then begin
    EditField(-150,-61,95,"Gross weight",ViewOnly ,BLT_TotalWeight,true,0); //EBS
    EditField(410,-61,70,"Net weight",ViewOnly ,BLT_TotalNetWeight,true,0); //EBS
    EditField(55,-41,50,"Currency",Normal,CurncyCode,false,CurncyCodeSClass);
    if (UseTaxTemplatesforTaxCalc==false) then begin
      if (UserCanAction("ViewCostPrice",true)) then begin
        EditField(160,-41,70,"GP %",Normal,GPProc,true,0);
        EditField(160,-21,70,"Total GP",ViewOnly,TotGP,true,0);
      end;
      if (HasLocalization("GBR,LTU,POL")) then begin
        EditField(310,-41,50,"Reverse #VAT#",ViewOnly,RvrsVAT,true,0);
        EditField(290,-21,70,"Ext. Tax",ViewOnly,TAX1Sum,true,0);
      end else begin
        EditField(290,-41,70,"Tax2",ViewOnly,TAX2Sum,true,0);
        EditField(290,-21,70,"Ext. Tax",ViewOnly,TAX1Sum,true,0);
      end;
      EditField(410,-41,95,"#VAT#",ViewOnly ,Sum3,true,0);
    end else begin
      if (UserCanAction("ViewCostPrice",true)) then begin
        EditField(290,-41,70,"GP %",Normal,GPProc,true,0);
        EditField(290,-21,70,"Total GP",ViewOnly,TotGP,true,0);
      end;
      EditField(410,-41,95,"Tax",ViewOnly ,Sum3,true,0);
    end;
    EditField(410,-21,95,"Base",ViewOnly,BaseSum4,true,0);
    EditField(-150,-41,95,"Subtotal",ViewOnly ,Sum1,true,0);
    EditField(-150,-21,95,"TOTAL",ViewOnly ,Sum4,true,0);
  end else begin
    EditField(55,-41,80,"Currency",Normal,CurncyCode,false,CurncyCodeSClass);
    EditField(55,-21,80,"#VAT#",ViewOnly ,Sum3,true,0);
    EditField(-120,-41,80,"Ext. Tax",ViewOnly,TAX1Sum,true,0);
    EditField(-120,-21,80,"TOTAL",ViewOnly ,Sum4,true,0);
  end;
  v = 24;
  MatrixBegin(4,v,-50,-69,-,200);
  MatTypedRow(stp);
  MatOverStrike(ovst);
  Flip(0);
  MatCol(t=kInvoiceRowTypeNormal,32,"Item",0,ArtCode,false,BLT_INSClass); //EBS edit
  //  MatCol(t,94,"Var",0,VARList,true,VARSClass);
  //  MatCol(t,144,"Qty",0,Quant,true,0);
  if (HasVarieties) then begin
    MatCol(t,94,"Qty",0,Quant,true,MATVARINSClass);
  end else begin
    MatCol(t,94,"Qty",0,Quant,true,0);
  end;
  EnterSkip(ArtCode);
  MatCol(t=kInvoiceRowTypeStructuredItemComponent,32,"Item",0,ArtCode,false,ForSaleINSClass);
  if (HasVarieties) then begin
    MatCol(t,94,"Qty",0,Quant,true,MATVARINSClass);
  end else begin
    MatCol(t,94,"Qty",0,Quant,true,0);
  end;
  EnterSkip(ArtCode);
  MatText(t=kInvoiceRowTypeCredit,32,"Credit of Invoice",true);
  MatCol(t,208,"",0,OrdRow,false,ARSClass);
  MatCol(t,-216,"",0,Spec,false,0);//MatText(t,-216,"",true);
  MatText(t=kInvoiceRowTypeDebit,32,"Debit of Invoice",true);
  MatCol(t,208,"",0,OrdRow,false,0);
  MatCol(t,-216,"",0,Spec,false,0);
  MatText(t=kInvoiceRowTypeInterest,32,"Interest",true);
  MatCol(t,98,"",0,ArtCode,false,0);
  MatCol(t,153,"",0,Quant,true,0);
  MatCol(t,188,"",0,Spec,false,0);
  MatText(t=kInvoiceRowTypeDownpayment,32,"Down Payment",true);
  MatColTL(t,122,"",0,-1,ViewOnly,0,ArtCode,true,0);
  MatColTL(t,188,"",0,-1,ViewOnly,0,Quant,true,0);
  MatCol(t,238,"",0,Spec,false,0);
  MatColTL(t,-240,"",0,-1,ViewOnly,0,Price,true,0);
  MatColTL(t,-180,"",0,-1,ViewOnly,0,vRebate,true,0);
  MatColTL(t,-140,"",0,-1,Normal,0,Sum,true,0); //?? TL?
  if (UseTaxTemplatesforTaxCalc) then begin
    MatCol(t,-100,"",0,SalesAcc,false,AccSClass);
    MatCol(t,-54,"",0,TaxTemplateCode,false,TaxTemplateSClass);
  end else begin
    MatCol(t,-70,"",0,SalesAcc,false,AccSClass);
    MatCol(t,-24,"",0,VATCode,false,VATCodeSClass);
  end;
  MatText(t=kInvoiceRowTypePrepayment,32,"Prepayment Number",true);
  MatCol(t,208,"",0,CUPNr,false,ARPay3SClass);
  MatCol(t,-216,"",0,BasePrice,false,0);
  MatCol(t,-170,"",0,Price,true,0);// Price holds the #VAT# sum, Recipe holds the date of prepaym. BasePrice holds amount in base 1, TAX1Reb holds TAX1Sum
  MatCol(t,-100,"",0,Sum,true,0);
  MatText(t=kInvoiceRowTypeLoan,32,"Loan",true);
  MatCol(t,98,"",0,CuAccCode,true,CuAccSClass);
  MatCol(t,-350,"",0,SalesAcc,true,AccSClass);
  MatCol(t,-230,"",0,Objects,false,0);
  MatCol(t,-110,"",0,Sum,true,0);
  MatCol(t,-30,"",0,VATCode,false,VATCodeSClass);
  MatText(t=kInvoiceRowTypeLoanInterest,32,"Loan Int.",true);
  MatCol(t,98,"",0,CuAccCode,true,CuAccSClass);
  MatCol(t,-350,"",0,SalesAcc,true,AccSClass);
  MatCol(t,-230,"",0,Objects,false,0);
  MatCol(t,-110,"",0,Sum,true,0);
  MatCol(t,-30,"",0,VATCode,false,VATCodeSClass);
  MatText(t=kInvoiceRowTypeUpdateMark,32,"Signature",false);
  MatColTL(t,94,"Sign",0,-1,ViewOnly,0,VoidedSign,false,0);
  MatCol(t,144,"Description",0,Spec,false,0);
  MatText(t=kInvoiceRowTypeVoid,32,"Void",false);
  MatColTL(t,65,"Sign",0,-1,ViewOnly,0,VoidedSign,false,0);
  MatCol(t,100,"Item",0,ArtCode,false,ForSaleINSClass);
  if (HasVarieties) then begin
    MatCol(t,150,"Qty.",0,Quant,true,MATVARINSClass);
  end else begin
    MatCol(t,150,"Qty.",0,Quant,true,0);
  end;
  MatCol(t,190,"Price",0,Price,true,0);
  MatCol(t,250,"Description",0,Spec,false,0);
  MatCol(t,-195,"Ser. No",0,SerialNr,false,SerialNrSClass);
  MatCol(t,-110,"%",0,vRebate,true,0);
  MatCol(t,-80,"Sum",0,Sum,true,0);
  MatText(t=kInvoiceRowTypeSubtotal,32,"Subtotal",true);
  MatCol(t,100,"",0,Spec,false,0);
  MatColTL(t,-140,"Sum",0,-1,ViewOnly,0,Sum,true,0);
  //  MatCol(t,-70,"Cost",0,Cost,true,0);
  MatText(t=kInvoiceRowTypeHidden,32,"This row and all rows below it will be hidden on printout",false);
  MatText(t=kInvoiceRowTypeCorrection,32,"K",true);
  MatCol(t,45,"Item",0,ArtCode,false,ForSaleINSClass);
  MatCol(t,91,"Qty",0,Quant,true,0);
  MatText(t=kInvoiceRowTypeRetention,32,"Retention",true);
  MatCol(t,100,"",0,Spec,false,0);
  MatColTL(t,-210,"SalesAcc",0,-1,0,0,SalesAcc,false,AccSClass);
  MatColTL(t,-110,"Sum",0,-1,0,0,Sum,true,0);
  MatCol(t,-30,"",0,VATCode,false,VATCodeSClass);
  MatText(t=kInvoiceRowTypeGiftVoucherSold,32,"GV",true);
  MatCol(t,58,"",0,GCNr,false,GCSClass);
  MatCol(t,-416,"",0,Spec,false,0);
  MatCol(t,-84,"Sum",0,Sum,true,0);
  MatCol(t,-24,"",0,VATCode,false,VATCodeSClass);
  MatText(t=kInvoiceRowTypeGiftVoucherPayment,32,"GVR",true);
  MatCol(t,58,"",0,GCNr,false,GCSSClass);
  MatCol(t,-316,"",0,Spec,false,0);
  MatCol(t,-84,"Sum",0,Sum,true,0);
  MatCol(t,-24,"",0,VATCode,false,VATCodeSClass);
  MatText(t=kInvoiceRowTypeCashPayment,32,"CASH",true);
  MatCol(t,94,"Sum",0,Sum,true,0);
  MatCol(t,198,"P. Mode",0,PayMode,true,PMSClass);
  MatCol(t,250,"Spec",0,Spec,false,0);
  MatText(t=kInvoiceRowTypeLoyaltyPointsPayment,32,"LOYPA",true);
  MatCol(t,68,"Sum",0,Sum,true,0);
  MatCol(t,108,"Points",0,Points,true,0);
  MatCol(t,148,"Currency",0,CurncyCode,true,CurncyCodeSClass);
  MatCol(t,-280,"Spec",0,Spec,false,0);
  MatText(t=kInvoiceRowTypeLoyaltyPointsBonus,28,"LOYBO",true);
  MatCol(t,68,"Points",0,Points,true,0);
  MatCol(t,141,"Spec",0,Spec,false,0);
  MatText(t=kInvoiceRowTypeCreditCardPayment,32,"CC",true);
  MatCol(t,94,"Sum",0,Sum,true,0);
  MatCol(t,198,"P. Mode",0,PayMode,true,PMSClass);
  MatCol(t,250,"Spec",0,Spec,false,0);
  MatCol(t,-280,"",0,CreditCard,false,CreditCardSClass);
  MatCol(t,-84,"Authorization",0,AuthorizationCode,false,0);
  MatText(t=kInvoiceRowTypeHeader,32,"Header",true);
  MatCol(t,100,"",0,Spec,false,0);
  MatText(t=kInvoiceRowType18,28,"Reserved",true); // Don't use this number
  MatCol(t,100,"",0,Spec,false,0);
  MatText(t=kInvoiceRowType19,28,"Reserved",true); // Don't use this number
  MatCol(t,100,"",0,Spec,false,0);
  MatText(t=kInvoiceRowTypePerceptionTax,32,"Perception Tax",true);
  MatCol(t,132,"",0,CuAccCode,false,0);
  MatCol(t,252,"",0,TAX2Prc,true,0);
  MatCol(t,292,"",0,Sum,true,0);
  MatCol(t,372,"",0,SalesAcc,false,AccSClass);
  MatCol(t,452,"",0,Spec,false,0);
  MatText(t=kInvoiceRowTypeWithholdingTax,32,"Withholding Tax",true);
  MatCol(t,132,"",0,WHTax,false,WHTaxSClass);
  MatCol(t,172,"",0,SalesAcc,false,AccSClass);
  MatCol(t,292,"",0,Sum,true,0);
  MatCol(t,392,"",0,Spec,false,0);
  if (StandardHansa==false) then begin
    MatText(t=kInvoiceRowTypeMultiBuyDiscount,32,"Multi-buy Discount",true);
  end;
  MatCol(t,152,"",0,MBRCode,false,0);
  MatCol(t,192,"",0,ArtCode,false,ForSaleINSClass);
  MatCol(t,-400,"",0,Spec,false,0);
  MatCol(t,-270,"",0,Quant,true,0);
  MatCol(t,-235,"",0,Price,true,0);
  MatCol(t,-135,"",0,vRebate,true,0);
  MatCol(t,-100,"",0,Sum,true,0);
  MatText(t=kInvoiceRowTypeDebtorsTransfer,32,"DBT TRSF",true);
  MatCol(t,94,"Spec",0,Spec,false,0);
  MatCol(t,-235,"Debtors A/C",0,SalesAcc,false,0);
  MatCol(t,-135,"Sum",0,Sum,true,0);
  MatCol(t,-30,"#V-Cd#",0,VATCode,false,0);
  /*
  MatText(t=kInvoiceRowTypePreviousDownpayment,32,"Prev. Down Payment",true);
  MatColTL(t,152,"",0,-1,ViewOnly,0,CUPNr,true,0);
  MatColTL(t,222,"",0,-1,ViewOnly,0,ServiceDelDate,true,0);
  MatColTL(t,-200,"",0,-1,Normal,0,Price,true,0);
  MatColTL(t,-100,"",0,-1,Normal,0,Sum,true,0);
  */
  //t = 21 kInvoiceRowTypeChequePayment
  MatText(t=kInvoiceRowTypeActivationDate,32,"Activation Date",true);
  MatCol(t,130,"",0,ServiceDelDate,false,PasteCurDate);
  Flip(1);
  //  MatCol(t=kInvoiceRowTypeNormal,194,"Description",0,Spec,false,0);
  t=kInvoiceRowTypeNormal;
  MatCol(t,144,"Description",0,Spec,false,0);
  MatCol(t,-235,"Unit Price",0,Price,true,0);
  //  MatColTL(t,-235,"",0,M45Val,Normal,0,Price,true,0);
  MatCol(t,-135,"%",0,vRebate,true,0);
  MatCol(t,-100,"Sum",0,Sum,true,0);
  MatCol(t=kInvoiceRowTypeStructuredItemComponent,144,"Description",0,Spec,false,0);
  MatCol(t,-235,"Unit Price",0,Price,true,0);
  //  MatColTL(t,-235,"",0,M45Val,Normal,0,Price,true,0);
  MatCol(t,-135,"%",0,vRebate,true,0);
  MatCol(t,-100,"Sum",0,Sum,true,0);
  MatCol(t=kInvoiceRowTypeInterest,-260,"",0,OrdRow,true,0);
  MatCol(t,-235,"",0,BasePrice,true,0);
  MatCol(t,-135,"",0,vRebate,true,0);
  MatCol(t,-100,"",0,Sum,true,0);
  MatCol(t=kInvoiceRowTypeCorrection,144,"Description",0,Spec,false,0);
  MatCol(t,-235,"Unit Price",0,Price,true,0);
  MatCol(t,-135,"%",0,vRebate,true,0);
  MatCol(t,-100,"Sum",0,Sum,true,0);
  Flip(2);
  MatCol(t=kInvoiceRowTypeNormal,144,"Description",0,Spec,false,0);
  MatCol(t,-360,"A/C",0,SalesAcc,false,AccSClass);
  if (StandardHansa==false) then begin
    MatCol(t,-310,"Accrual",0,PeriodCode,false,AutSimPerSClass);
  end;
  MatCol(t,-255,"Location",0,Location,false,LocationSClass);
  MatCol(t,-180,"Position",0,PosCode,false,UsedPosSClass);
  if (UseTaxTemplatesforTaxCalc) then begin
    MatCol(t,-144,"Tags/Objects",0,Objects,false,ObjSClass);
    MatCol(t,-70,"T-Cd",0,TaxTemplateCode,false,TaxTemplateSClass);
  end else begin
    MatCol(t,-124,"Tags/Objects",0,Objects,false,ObjSClass);
    if (HasLocalization("GBR,LTU,POL") and IsEnterprise) then begin
      MatCol(t,-60,"#V-Cd#",0,VATCode,false,VATCodeSClass);
      MatCol(t,-30,"Rvrs",0,RvrsVATCode,false,VATCodeSClass);
    end else begin
      MatCol(t,-30,"#V-Cd#",0,VATCode,false,VATCodeSClass);
    end;
  end;
  MatCol(t=kInvoiceRowTypeStructuredItemComponent,144,"Description",0,Spec,false,0);
  MatCol(t,-360,"A/C",0,SalesAcc,false,AccSClass);
  if (StandardHansa==false) then begin
    MatCol(t,-310,"Accrual",0,PeriodCode,false,AutSimPerSClass);
  end;
  MatCol(t,-255,"Location",0,Location,false,LocationSClass);
  if (StandardHansa==false) then begin
    MatCol(t,-180,"Position",0,PosCode,false,UsedPosSClass);
  end;
  if (UseTaxTemplatesforTaxCalc) then begin
    MatCol(t,-144,"Tags/Objects",0,Objects,false,ObjSClass);
    MatCol(t,-70,"T-Cd",0,TaxTemplateCode,false,TaxTemplateSClass);
  end else begin
    MatCol(t,-124,"Tags/Objects",0,Objects,false,ObjSClass);
    MatCol(t,-30,"#V-Cd#",0,VATCode,false,VATCodeSClass);
  end;
  MatCol(t=kInvoiceRowTypeInterest,-70,"",0,SalesAcc,false,AccSClass);
  MatCol(t,-24,"",0,VATCode,false,VATCodeSClass);
  //  MatCol(t=kInvoiceRowTypePrepayment,-224,"",0,SalesAcc,false,AccSClass);
  //  MatCol(t,-24,"",0,VATCode,false,VATCodeSClass);
  MatCol(t=kInvoiceRowTypeCorrection,144,"Description",0,Spec,false,0);
  MatCol(t,-250,"A/C",0,SalesAcc,false,AccSClass);
  if (StandardHansa==false) then begin
    MatCol(t,-170,"Accrual",0,PeriodCode,false,AutSimPerSClass);
  end;
  MatCol(t,-104,"Tags/Objects",0,Objects,false,ObjSClass);
  if (UseTaxTemplatesforTaxCalc) then begin
    MatCol(t,-35,"T-Cd",0,TaxTemplateCode,false,TaxTemplateSClass);
  end else begin
    MatCol(t,-30,"#V-Cd#",0,VATCode,false,VATCodeSClass);
  end;
  Flip(3);
  t=kInvoiceRowTypeNormal;
  MatCol(t,144,"Description",0,Spec,false,0);
  if (UserCanAction("ViewCostPrice",true)) then begin
    MatCol(t,-380,"Unit Price",0,Price,true,0);
    MatCol(t,-315,"%",0,vRebate,true,0);
    MatCol(t,-280,"Cost B2",0,BasePriceB2,true,0);
    MatCol(t,-210,"Cost",0,BasePrice,true,0);
    MatCol(t,-140,"GP",0,rowGP,true,0);
    MatCol(t,-70,"FIFO",0,FIFO,true,0);
  end else begin
    MatCol(t,-235,"Unit Price",0,Price,true,0);
    MatCol(t,-135,"%",0,vRebate,true,0);
    MatCol(t,-100,"Sum",0,Sum,true,0);
  end;
  MatCol(t=kInvoiceRowTypeStructuredItemComponent,144,"Description",0,Spec,false,0);
  if (UserCanAction("ViewCostPrice",true)) then begin
    MatCol(t,-380,"Unit Price",0,Price,true,0);
    MatCol(t,-315,"%",0,vRebate,true,0);
    MatCol(t,-280,"Cost B2",0,BasePriceB2,true,0);
    MatCol(t,-210,"Cost",0,BasePrice,true,0);
    MatCol(t,-140,"GP",0,rowGP,true,0);
    MatCol(t,-70,"FIFO",0,FIFO,true,0);
  end else begin
    MatCol(t,-235,"Unit Price",0,Price,true,0);
    MatCol(t,-135,"%",0,vRebate,true,0);
    MatCol(t,-100,"Sum",0,Sum,true,0);
  end;
  MatCol(t=kInvoiceRowTypeCorrection,144,"Description",0,Spec,false,0);
  if (UserCanAction("ViewCostPrice",true)) then begin
    MatCol(t,-315,"Unit Price",0,Price,true,0);
    MatCol(t,-245,"%",0,vRebate,true,0);
    MatCol(t,-210,"Cost",0,BasePrice,true,0);
    MatCol(t,-140,"GP",0,rowGP,true,0);
    MatCol(t,-70,"FIFO",0,FIFO,true,0);
  end else begin
    MatCol(t,-235,"Unit Price",0,Price,true,0);
    MatCol(t,-135,"%",0,vRebate,true,0);
    MatCol(t,-100,"Sum",0,Sum,true,0);
  end;
  Flip(4);
  t=kInvoiceRowTypeNormal;
  MatCol(t=kInvoiceRowTypeNormal,144,"Description",0,Spec,false,0);
  MatCol(t,-370,"#Salesmen#",0,Salesmen,false,UserSClass);
  MatCol(t,-300,"Serial No",0,SerialNr,false,SerialNrSClass);
//  MatCol(t,-240,"Main Serial No.",0,MotherNr,true,0);
  MatCol(t,-220,"P.Factor",0,PriceFactor,true,0);
  MatCol(t,-170,"Recipe",0,Recepy,false,RecSClass);
  if (UserCanAction("ViewCostPrice",true)) then begin
    MatCol(t,-70,"Row FIFO",0,FIFORowVal,true,0);
  end else begin
  end;
  MatCol(t=kInvoiceRowTypeStructuredItemComponent,144,"Description",0,Spec,false,0);
  MatCol(t,-310,"Serial No",0,SerialNr,false,SerialNrSClass);
  MatCol(t,-240,"P.Factor",0,PriceFactor,true,0);
  MatCol(t,-180,"Recipe",0,Recepy,true,0);
  if (UserCanAction("ViewCostPrice",true)) then begin
    MatCol(t,-110,"Row FIFO",0,FIFORowVal,true,0);
  end else begin
  end;
  MatCol(t,-40,"Coeff",0,Coefficient,true,0);
  MatCol(t=kInvoiceRowTypeCorrection,144,"Description",0,Spec,false,0);
  MatCol(t,-310,"Serial No",0,SerialNr,false,SerialNrSClass);
  MatCol(t,-240,"P.Factor",0,PriceFactor,true,0);
  MatCol(t,-180,"Recipe",0,Recepy,true,0);
  if (UserCanAction("ViewCostPrice",true)) then begin
    MatCol(t,-110,"Row FIFO",0,FIFORowVal,true,0);
  end else begin
  end;
  MatCol(t,-80,"",0,MotherArtCode,false,0);
  MatCol(t,-40,"",0,RecipeQuant,false,0);
  //  MatCol(t,-40,"Coeff",0,Coefficient,true,0);
  Flip(5);
  t=kInvoiceRowTypeNormal;
  MatCol(t=kInvoiceRowTypeNormal,144,"Description",0,Spec,false,0);
  MatCol(t,-315,"Unit",0,UnitCode,false,UnitSClass);
  MatCol(t,-260,"Unit Qty",0,UnitFactQuant,true,0);
  MatCol(t,-200,"Width",0,UnitXval,true,0);
  MatCol(t,-160,"Height",0,UnitYval,true,0);
  MatCol(t,-120,"Depth",0,UnitZval,true,0);
  MatCol(t,-80,"Unit Pr. of Unit",0,UnitFactPrice,true,0);
  MatCol(t=kInvoiceRowTypeStructuredItemComponent,144,"Description",0,Spec,false,0);
  MatCol(t,-315,"Unit",0,UnitCode,false,UnitSClass);
  MatCol(t,-260,"Unit Qty",0,UnitFactQuant,true,0);
  MatCol(t,-200,"Width",0,UnitXval,true,0);
  MatCol(t,-160,"Height",0,UnitYval,true,0);
  MatCol(t,-120,"Depth",0,UnitZval,true,0);
  MatCol(t,-80,"Unit Pr. of Unit",0,UnitFactPrice,true,0);
  MatCol(t=kInvoiceRowTypeCorrection,144,"Description",0,Spec,false,0);//New Row Type..
  MatCol(t,-315,"Unit",0,UnitCode,false,UnitSClass);
  MatCol(t,-260,"Unit Qty",0,UnitFactQuant,true,0);
  MatCol(t,-200,"Width",0,UnitXval,true,0);
  MatCol(t,-160,"Height",0,UnitYval,true,0);
  MatCol(t,-120,"Depth",0,UnitZval,true,0);
  MatCol(t,-80,"Units Unit Price",0,UnitFactPrice,true,0);
  Flip(6);
  t = kInvoiceRowTypeNormal;
  MatCol(t,144,"Description",0,Spec,false,0);
  MatCol(t,-390,"Cust. Item No.",0,CustArtCode,false,CUINSClass);
  MatCol(t,-300,"Coeff.",0,Coefficient,true,0);
  MatCol(t,-260,"P.Factor",0,PriceFactor,true,0);
  if (UserCanAction("HWContractAdmin",false) or UserCanAction("HWContractCUServiceHistEdit",false) or UserCanAction("HWContract_LocalAdmin",false)) then begin
    MatCol(t,-210,"Serv. Co. Hist.",0,CUServiceHistNr,false,0);
  end;
  MatCol(t,-130,"Cred. Row",0,CreditedRow,false,0);
  MatCol(t,-70,"Environ. Tax",0,RepaExVAT,true,0);
  MatCol(t=kInvoiceRowTypeStructuredItemComponent,144,"Description",0,Spec,false,0);
  MatCol(t,-390,"Cust. Item No.",0,CustArtCode,false,CUINSClass);
  MatCol(t,-300,"Coeff.",0,Coefficient,true,0);
  MatCol(t,-260,"P.Factor",0,PriceFactor,true,0);
  if (UserCanAction("HWContractAdmin",false) or UserCanAction("HWContractCUServiceHistEdit",false) or UserCanAction("HWContract_LocalAdmin",false)) then begin
    MatCol(t,-210,"Serv. Co. Hist.",0,CUServiceHistNr,false,0);
  end;
  MatCol(t,-130,"Cred. Row",0,CreditedRow,false,0);
  MatCol(t,-70,"Environ. Tax",0,RepaExVAT,true,0);
  MatCol(t=kInvoiceRowTypeCorrection,144,"Description",0,Spec,false,0);
  MatCol(t,-80,"Environ. Tax",0,RepaExVAT,true,0);
  Flip(7);
  t = kInvoiceRowTypeNormal;
  if (GuiType!=kGuiiPhone) then begin
    MatCol(t,144,"Description",0,Spec,false,0);
  end;
  MatCol(t,-240,"Customs No.",0,CustomsNr,false,0);
  MatCol(t,-100,"Country of Origin",0,CountryOfOrg,false,CountrySClass);
  MatCol(t=kInvoiceRowTypeStructuredItemComponent,144,"Description",0,Spec,false,0);
  MatCol(t,-240,"Customs No.",0,CustomsNr,false,0);
  MatCol(t,-100,"Country of Origin",0,CountryOfOrg,false,CountrySClass);
  MatCol(t=kInvoiceRowTypeCorrection,144,"Description",0,Spec,false,0);
  MatCol(t,-240,"Customs No.",0,CustomsNr,false,0);
  MatCol(t,-100,"Country of Origin",0,CountryOfOrg,false,CountrySClass);
  InsertRowTest;
  DeleteRowTest;
  RowMenuBegin("");
  RowMenuItem(0,"Item Status",'I','I',0,"ItemStatusIVDsm");
  RowMenuItem(0,"Previous Sales Prices",' ',' ',0,"IVLastSPrsm");
  RowMenuItem(0,"Add Header Line",' ',' ',0,"HeaderLineIVDsm");
  RowMenuItem(0,"Add Hidden Line",' ',' ',0,"HiddenLineIVDsm");
  if (HasLocalization("SVN")==false) then begin
    RowMenuItem(0,"Add Cash Line",' ',' ',0,"CashLineIVDsm");
    RowMenuItem(0,"Add Credit Card Line",' ',' ',0,"CreditCardLineIVDsm");
  end;
  if (StandardHansa==false) then begin
    RowMenuItem(0,"Add Retention",' ',' ',0,"RetentionLineIVDsm");
  end;
  RowMenuItem(0,"Add Subtotal",' ',' ',0,"SubTotalLineIVDsm");
  RowMenuItem(0,"Apple Warranty Status Check",'w',' ',0,"WarrantyStatusIVDsm");
  if (FileExists("hob/hmdatadef.hob")) then begin//??? why here and not it ahansamail ?
    RowMenuItem(0,"Add license start date",' ',' ',0,"LicStartIVDsm");
  end;
  EndRowMenu;
  EndMatrix;
  vs = 22;
  v = 18; VTab(-35,v,-16,v+vs,ToolFlip,1,"A");
  v=v+ vs; VTab(-35,v,-16,v+vs,ToolFlip,2,"B");
  v=v+ vs; VTab(-35,v,-16,v+vs,ToolFlip,3,"C");
  v=v+ vs; VTab(-35,v,-16,v+vs,ToolFlip,4,"D");
  v=v+ vs; VTab(-35,v,-16,v+vs,ToolFlip,5,"E");
  v=v+ vs; VTab(-35,v,-16,v+vs,ToolFlip,6,"F");
  v=v+ vs; VTab(-35,v,-16,v+vs,ToolFlip,7,"G");
  Tile(3,70,false,"3",FrRate);
  vs = 20;
  EditField(h=110,v=6,50,"Currency",Normal,CurncyCode,false,CurncyCodeSClass);
  EditField(h,v+vs,50,"Base Currency 1",Normal,BaseRate1,true,0);
  EditField(h,v+(vs*2),50,"Base Currency 2",Normal,BaseRate2,true,0);
  EditField(h2=295,v,50,"Rate",Normal,FrRate,true,0);
  RateField(h3=360,v,50,":",Normal,"ToRateB1",true,h3+60,v+14,"Base Currency 1",false);
  RateField(h3,v+=vs,50,":",Normal,"ToRateB2",true,h3+60,v+14,"Base Currency 2",false);
  Tile(4,110,false,"4",ShipDeal);
  vs = 20; h1 = 110; h2 = 310; h3 = 530; h4 = -100;
  EditField(h1,v=6,80,"Delivery Terms",Normal,ShipDeal,false,ShipDealSClass);
  EditField(h1,v+=vs,80,"Delivery Mode",Normal,ShipMode,false,DMSClass);
  if (StandardHansa==false) then begin
    EditField(h1,v+=vs,80,"Route",Normal,Sorting,false,DelRouteSClass);
    EditField(h1,v+=vs,80,"Location",Normal,Location,false,LocationSClass);
    EditField(h1,v+=vs,80,"Plan. Sent Date",Normal,PlanSendDate,false,PasteCurDate);
    EditField(h1,v+=vs,80,"Plan. Sent Time",Normal,PlanSendTime,false,PasteCurTime);
  end;
  EditField(h1,v+=vs,80,"Branch",Normal,BranchID,false,AllCUSClass);
  EditField(h2,v=vm,80,"Total Quantity",ViewOnly,TotQty,true,0);
  EditField(h2,v+=vs,80,"Total Weight",ViewOnly,TotWeight,true,0);
  EditField(h2,v+=vs,80,"Total Volume",ViewOnly,TotVolume,true,0);
  EditField(h2,v+=vs,80,"Freight",Normal,FrPrice,true,0);
  if (StandardHansa==false) then begin
    EditField(h2,v+=vs,80,"Plan. Arrival Date",Normal,PlanArrDate,false,PasteCurDate);
    EditField(h2,v+=vs,80,"Plan. Arrival Time",Normal,PlanArrTime,false,PasteCurTime);
    EditField(h2,v+=vs,80,"Freight Comp.",Normal,FreightCode,false,FreightCompanySClass);
    CheckBox(h3,v=vm,0,"Update #Stock#",UpdStockFlag);
    EditField(h3,v+=2*vs,80,"Freight #V-Cd#",Normal,FrVATCode,true,VATCodeSClass);
    EditField(h3,v+=vs,80,"Intrastat Trans. Code",Normal,IntrastatTransCode,true,IntrastatTransCodeSClass);
    EditField(h3,v+=vs,80,"Global Transport No.",Normal,GlobalTransportNr,false,0);
    EditField(h3,v+=vs,80,"Global Transport Date",Normal,GlobalTransportDate,false,PasteCurDate);
  end;
  Tile(5,170,false,"5",OrderNr);
  EditField(h1,v=vm,80,"Order No.",ViewOnly,OrderNr,false,0);
  if (StandardHansa==false) then begin
    EditField(h1,v+=vs,80,"Service Order No.",ViewOnly,SVONr,false,0);
    EditField(h1,v+=vs,80,"Cred. Man. No.",ViewOnly ,CredManNr,false,0);
  end;
  EditField(h1,v+=vs,135,"Official No. 2",Normal,OfficialSerNr2,false,0);
  if (HasLocalization("FIN")) then begin
    EditField(h1,v+=vs,135,"Delivery Site Code",Normal,DeliverySiteCode,false,0);
    EditField(h1,v+=vs,135,"Work Site Number",Normal,WorkSiteNumber,false,0);
  end;
  if (HasLocalization("BRA")) then begin
    EditField(h1,v+=vs,80,"Federal Service",Normal,FedServCode,false,FederalSerSClass);
  end;
  if (HasLocalization("ARG,BOL")) then begin
    EditField(h1,v+=vs,135,"CAE/CAEA",Normal,CAE,false,0);
    EditField(h1,v+=vs,135,"CAE Expiry",Normal,CAEExpiry,false,0);
    EditField(h1,v+=vs,70,"CAEA Start",ViewOnly,CAEAStartDate,false,0);
  end;

  EditField(h2=350,v=vm,80,"Stat. Value",Normal,StatVal,true,0);
  EditField(h2,v+=vs,80,"Trans. Time",Normal,TransTime,false,SetSClass);
  EditField(h2,v+=vs,80,"Print Date",ViewOnly,PrintDate,false,0);
  EditField(h2,v+=vs,80,"Oprt. Comment",ViewOnly,OYDescription,false,0);
  if (FileExists("hob/hmdatadef.hob")) then begin//??? why here and not it ahansamail ?
    EditField(h2,v+=vs,80,"ToBe Inv.Nr",ViewOnly,ToBeIVNr,false,0);
  end;
  //  ColourPushButton(-100,v,-20,v+60,"TestIVDClassCardData","Test" & chr(10) & "CardData",4);
  //  SoftEditField(h3+50,v,100,"Control Code"  ,ViewOnly ,"TaxAuthIDCC",false,0,M4Str,60);
  if (StandardHansa==false) then begin
    if (HasLocalization("ARG,BOL")) then begin
      EditField(h2,v+=vs,135,"Tax Auth. ID",Normal,TaxAuthID,false,0);
      EditField(h2,v+=vs,135,"Control Code",ViewOnly ,TaxAuthIDCC,false,0);
    end;
    if (HasLocalization("PRT")) then begin
      EditField(h2,v+=vs,135,"Status",Normal,Status,false,SetSClass);
    end;
    if (HasLocalization("ARG,PRT")) then begin
      EditField(h2,v+=vs,135,"Tax Type",Normal,TaxInvType,false,SetSClass);
    end;
    if (HasLocalization("ARG")) then begin
      EditField(h2,v+=vs,70,"CAEA Expiry",ViewOnly,CAEAExpiryDate,false,0);
    end;
    if (HasLocalization("SVN")) then begin
      EditField(h2,v+=vs,180,"E-Inv. Conf. No.",ViewOnly,TaxAdminReceiptNr,false,0);
      EditField(h2,v+=vs,180,"Tax Seal",ViewOnly,TaxAdminServSeal,false,0);
    end;
  end;
  //  EditField(h2,v+=vs,135,"E-Inv Exp. Date",ViewOnly,EInvExpDate,false,0);//Tx server
  //  EditField(h2,v+=vs,135,"E-Inv Exp. Qty",ViewOnly,EInvExpQty,false,0);
  CheckBox(h3=450,v=vm,0,"No Reminder",NoRemndrFlag);
  CheckBox(h3,v+=16,0,"No Interest",NoInterestFlag);
  CheckBox(h3,v+=16,0,"No Collection",NoColectionFlag);
  CheckBox(h3,v+=16,0,"Fiscal Invoice",FiscalFlag);
  CheckBox(h3+130,v=vm,0,"Cust. _Info on Trans.",ARonTR);
  CheckBox(h3+130,v+=16,0,"Don't send as E-Invoice",NoEInvoice);
  CheckBox(h3+130,v+=16,0,"Self Billing",SelfBilling);
  CheckBox(h3+130,v+=16,0,"Post Receipt #VAT#",IPBookVAT);
  if (HasLocalization("LTU")) then begin
    CheckBox(h3+130,v+=16,0,"Exclude from Exports",ExcludeFromExports);
  end;
//    CheckBox(h3,v+=16,0,"Including VAT",InclVAT);
  //  CheckBox(h3,v+=16,0,"E-Invoice Exported",EInvExpFlag);
  Tile(6,150,false,"6",PriceList); vs = 20; h3=550;
  EditField(h1,v=vm,80,"Price List",Normal,PriceList,false,PLDefSClass);
  EditField(h1,v+=vs,80,"Discount Matrix",Normal,RebCode,false,0);
  //  EditField(h1,v+=vs,80,"Disc. %",ViewOnly,DiscPerc,false,0);
  //  EditField(h1,v+=vs,80,"Disc. Amount",ViewOnly,DiscSum,false,0);
  EditField(h1,v+=vs,80,"Original Customer",ViewOnly,OrgCust,false,0);
  if (StandardHansa==false) then begin
    EditField(h1,v+=vs,80,"Credit Card",Normal,CreditCard,false,CreditCardSClass);
    EditField(h1,v+=vs,80,"#Authorisation#",Normal,AuthorizationCode,false,0);
  end;
  EditField(h1,v+=vs,80,"Debtors",Normal,ARAcc,false,AccSClass);
  EditField(h1,v+=vs,-20,"Comment",Normal,InvComment,false,0);
  if (HasSalesGroup) then begin
    EditField(h2=310,v=vm,80,"Sales Group",ViewOnly,SalesGroup,true,0);
    EditField(h2,v+=vs,80,"Language",Normal,LangCode,false,LangSClass);
  end else begin
    EditField(h2,v=vm,80,"Language",Normal,LangCode,false,LangSClass);
  end;
  EditField(h2,v+=vs,80,"Commission",Normal,Commision,true,0);
  EditField(h2,v+=vs,80,"Total Incl. Com.",ViewOnly,SumIncCom,true,0);
  EditField(h2,v+=vs,80,"Interest",Normal,IntCode,true,IntSClass);
  if (StandardHansa==false) then begin
    EditField(h2,v+=vs,80,"Orig. No.",Normal,CredInv,false,0);
    EditField(h3,v=vm,80,"Reminder Level",Normal,LastRemndr,false,0);
  end else begin
    EditField(h3,v=vm,80,"Orig. No.",Normal,CredInv,false,0);
    EditField(h3,v+=vs,80,"Reminder Level",Normal,LastRemndr,false,0);
  end;
  EditField(h3,v+=vs,80,"Last Reminder Date",Normal,LastRemDate,false,PasteCurDate);
  if (StandardHansa==false) then begin
    EditField(h3,v+=vs,80,"Loyalty Card",Normal,LoyaltyCardNr,false,LoyaltyCardSClass);
  end;
  EnterSkip(Math);
  if (StandardHansa==false) then begin
    EditField(h3,v+=vs,80,"Membership Level",ViewOnly,LCMLevel,false,LCMemberLevelSClass);
    EditField(h3,v+=vs,80,"Loyalty Points",ViewOnly,Points,true,0);
  end;
  if (HasTREO) then begin
    EditField(h3,v+=vs,80,"TREO No.",Normal,TREONr,false,0);
  end;
  Tile(7,250,false,"7",Addr1); vs = 20;
  label = UserDefined("CUVc","InvAddr0");
  if (blank(label)) then begin label = "Invoice"; end;
  EditField(h=110,v=6,-20,label,Normal,Addr1,false,0);
  label = UserDefined("CUVc","InvAddr1");
  if (blank(label)) then begin label = "Address"; end;
  EditField(h,v+=vs, -20,label,Normal,Addr2,false,0);
  label = UserDefined("CUVc","InvAddr2");
  EditField(h,v+=vs, -20,label,Normal,Addr3,false,0);
  label = UserDefined("CUVc","InvAddr3");
  EditField(h,v+=vs, -20,label,Normal,InvAddr3,false,0);
  label = UserDefined("CUVc","InvAddr4");
  EditField(h,v+=vs, -20,label,Normal,InvAddr4,false,0);
  EditField(h,vm=(v+=vs),80,"Country",Normal,InvCountry,false,CountrySClass);
  if (HasLocalization("BRA")) then begin
    EditField(h2-89,v,232,"",ViewOnly,InvCountryName,false,0);
    h5 = -170;
    width = 150;
  end else begin
    h5 = -270;
    width = 135;
  end;
  EditField(h5,v,width,"Account Op.",Normal,BankCode,false,BankSClass);
  if (StandardHansa==false) then begin
    if (HasApprovals) then begin
      SoftEditField(h3=h+4,v=(vm+=40),123,"Approval Status",ViewOnly,"AcceptanceStatusFlag",false,0,M4Str,255);
    end;
/*
//oldapprovals
    ButtonFrame(h3=h+4,v=(vm+=40),123,6,"Approval Status");
    RadioButton(h3,v,kAcceptanceStateNotRequired,0,"Not Required",AcceptanceStatus);
    RadioButton(h3,v+=16,kAcceptanceStateNotStarted,0,"Not Started",AcceptanceStatus);
    RadioButton(h3,v+=16,kAcceptanceStateNotRequested,0,"Not Reuested",AcceptanceStatus);
    RadioButton(h3,v+=16,kAcceptanceStatePending,0,"Pending",AcceptanceStatus);
    RadioButton(h3,v+=16,kAcceptanceStateApproved,0,"Approved",AcceptanceStatus);
    RadioButton(h3,v+=16,kAcceptanceStateRejected,0,"Rejected",AcceptanceStatus);
*/
    v = VATZoneButtonsLabelsENG(h3=290,v=vm,170,16);
  end else begin
    v = VATZoneButtonsLabelsENG(h3=290,v=vm+40,170,16);
  end;
  EditField(h2=-170,v=vm,150,"Region",Normal,Region,false,RegionSClass);
  EditField(h2,v+=vs,150,"#VAT Reg. No.#",Normal,VATNr,false,0);
  EditField(h2,v+=vs,150,"#Reg. No.# 1",Normal,RegNr1,false,0);
  EditField(h2,v+=vs,150,"GLN",ViewOnly,RecipientGLN,false,0);
  EditField(h2,v+=vs,150,"Telephone",Normal,Phone,false,0);
  EditField(h2,v+=vs,150,"Fax",Normal,Fax,false,0);
  Tile(8,170,false,"8",ShipAddr0); vs = 20;
  if (StandardHansa==false) then begin
    EditField(h1,v=6,80,"Address Code",Normal,DelAddrCode,false,DelAddr3SClass);
    EditField(h1,v+=vs,-20,"Delivery",Normal,ShipAddr0,false,0);
  end else begin
    EditField(h1,v=6,-20,"Delivery",Normal,ShipAddr0,false,0);
  end;
  EditField(h1,v+=vs,-20,"Address",Normal,ShipAddr1,false,0);
  EditField(h1,v+=vs,-20,"",Normal,ShipAddr2,false,0);
  EditField(h1,v+=vs,-20,"",Normal,ShipAddr3,false,0);
  EditField(h1,v+=vs,-20,"",Normal,DelAddr3,false,0);
  EditField(h1,v+=vs,-20,"",Normal,DelAddr4,false,0);
  EditField(h1,v+=vs,80,"Country",Normal,DelCountry,false,CountrySClass);
  if (HasLocalization("BRA")) then begin
    EditField(h1+91,v,232,"",ViewOnly,DelCountryName,false,0);
  end;
  EditField(h2,v,150,"Delivery GLN",ViewOnly,DelRecipientGLN,false,0);
  EnterSkip(InvDate);
  if (GuiType==kGuiMetro) then begin // Temporarily disabled on Windows 8
    SpecialMenu("Invoice Status",'r',2,"IVInfoIVDsm");
    SpecialMenu("Item Status",'I',0,"ItemStatusIVDsm");
    SpecialMenu("Open #NL# Transaction",'t',8,"OpenTRFromIV");
    SpecialMenu("Create #Credit Note#",' ',20,"CreateCreditNoteIVDsm");
    SpecialMenu("Add Subtotal",' ',12,"SubTotalLineIVDsm");
    SpecialMenu("Connect to Prepayment",' ',4,"ConnectToPrepayIVDsm");
/*not working yet
    SpecialMenu("Create Email",'m',23,"CreateMailFromIVDsm");
*/
  end else begin
//    SpecialMenu("Item Status",'I',0,"ItemStatusIVDsm");
    if (HasCustomerStatusReport) then begin
      SpecialMenu("Customer Status",'e',0,"CUStatusIVDsm");
    end;
    SpecialMenu("Item Search",'f',1,"ItemSearchDsm");
    SpecialMenu("Invoice Status",'r',2,"IVInfoIVDsm");
    SpecialMenu("Add Environment Tax",' ',19,"RepaIVsm");
    if (GuiType==kGuiiPhone) then begin
//      SpecialMenu("Sign",' ',10,"SignIVDsm");//what is that ?
    end;
    SpecialMenu("Change to Base 1",' ',14,"SwitchToBase1IVDsm");
    SpecialMenu("Connect to Prepayment",' ',4,"ConnectToPrepayIVDsm");
    SpecialMenu("Recalculate Discount",' ',11,"RecalcDiscountIVDsm");
    SpecialMenu("Recalculate Weight and Volume",' ',10,"RecalcWeightIVDsm");
    SpecialMenu("Update Currency Price List Items",' ',5,"UpdatePricesIVDsm");
    SpecialMenu("Print Cash IN-OUT",' ',7,"PrintCashInOutIVDsm");
    if (HasLocalization("PRT")==false) then begin
      SpecialMenu("Print Proforma Invoice",' ',3,"PrintProformaIVDsm");
    end;
    if (StandardHansa==false) then begin
      SpecialMenu("Send to Fiscal Device",' ',19,"PrintToFiscPrntIVDsm");
      SpecialMenu("Credit Card Payment",' ',22,"CCPayIVDsm");
      SpecialMenu("Edit #Instalments#",' ',24,"EditInstalmentIVDsm");
    end;
    if (HasLocalization("EST")) then begin
      SpecialMenu("Resend E-Invoice",' ',21,"ResendEstEIVDsm");
    end else begin
      SpecialMenu("Resend E-Invoice",' ',21,"ResendEIVDsm");
    end;
    if (HasLocalization("ARG")) then begin
      SpecialMenu("Send Argentinean E-Invoice",'n',17,"SendArgEInvIVDsm");
      SpecialMenu("Retrieve CAE/CAEA",'',17,"RetriveCAEArgEInvIVDsm");
    end;
    if (HasLocalization("MEX")) then begin
      SpecialMenu("Send Mexican E-Invoice",'e',17,"SendMexEInvIVDsm");
    end;
    if (HasLocalization("BRA")) then begin
      SpecialMenu("Send Brazilian E-Invoice",' ',27,"SendBraEInvIVDsm");
      SpecialMenu("Get Bank Receipt",' ',28,"GetBankReceiptDsm");
    end;
    if (HasLocalization("FIN")) then begin
      SpecialMenu("Export Finvoice",' ',28,"ExportFinvoiceIVDsm");
    end;
    if (HasLocalization("USA")) then begin
      SpecialMenu("Get Tax Rates",' ',0,"IVGetTaxRatesDsm");
    end;

    SpecialMenu("Open #NL# Transaction",'t',8,"OpenTRFromIV");
    if (StandardHansa==false) then begin
      SpecialMenu("Manager's Discount Override",' ',24,"MgrsDiscOverrideIVDsm");
      if (HasTaxMatrix) then begin
        SpecialMenu("Open Tax Matrix",' ',25,"TestVatMatrixIVDsm");
      end;
    end;
    if (HasApprovals) then begin
      SpecialMenu("Request Approval",' ',6,"IVSendforAcceptanceIVDsm");
      SpecialMenu("Cancel Approval Request",' ',2,"CancelApprovalRequestDsm");
    end;
    SpecMenuGroup("",kSpecMenuGroupTypeExtendedPlusMenu,0);
    if (HasModCRM) then begin
//      SpecialMenu("Activity",'c',9,"CreateActFromIVDsm");
    end;
    SpecialMenu("Cash In",' ',1,"DoCLInFromIVD");
    SpecialMenu("#Credit Note#",' ',20,"CreateCreditNoteIVDsm");
    if (StandardHansa==false) then begin
      SpecialMenu("Credit Agreement",' ',25,"CreateCredManIVsm");
    end;
    SpecialMenu("Contract",' ',13,"COFromIVDsm");
    if (StandardHansa==false) then begin
      if (HasLocalization("PRT")==false) then begin
        SpecialMenu("Correction Invoice",' ',16,"CorrectionIVsm");
      end;
      SpecialMenu("Debit Note",' ',20,"CreateDebitNoteIVDsm");
      SpecialMenu("EDI Invoice",' ',9,"DoEDIInvFromIVD");
    end;
    SpecialMenu("Email",'m',23,"CreateMailFromIVDsm");
    if (HasLocalization("UKR")) then begin
      SpecialMenu("First Event",' ',18,"FirstEventIVDsm");
    end;
    if (StandardHansa==false) then begin
      SpecialMenu("#Instalment# Receipts",' ',6,"CreateInstalmentsIVDsm");
      if (HasLocalization("HRV,POL,RUS,SRB,SVN,UKR")) then begin
        SpecialMenu("#VAT# Correction #S/L#",' ',17,"VATCorrectionIVsm");
      end;

    //  SpecialMenu("GSXAutoEnrollmentIVDsm",'w',26,"GSXAutoEnrollmentIVDsm");

    //  SpecialMenu("TESTSendArgEInvoiceFECAESolicitar",' ',25,"TESTSendArgEInvoiceFECAESolicitar");
    //  SpecialMenu("Test Mex E-Invoices",'1',0,"TestMexEInvoices");
    end;
    SpecialMenu("Add Customer",' ',0,"AddCustomerIVDsm");
    SpecialMenu("Add Item",' ',0,"AddItemIVDsm");
  end;

  EndWindow;
end;

window BLT_EDISetTClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h2,v,vm,vs;
  v = 6; vs = 20; h = 150; h2=200;

  WindowBegin("EDI settings",BLT_EDISetTClass,CGSbl,ItemSettingType);
  Sizeable(-1,-1,-1,0);
  SetWRect(20,80,480,520);
  SetBlid(BLT_EDISetBlock);
  EditField(h,v=10,-20,"EDI export folder",Normal,ExpFolder,false,0);
  EditField(h,v+=vs,-20,"EDI import folder",Normal,ImpFolder,false,0);
  EditField(h,v+=vs,-20,"Series comment",Normal,SerComment,false,0);
  EditField(h,v+=vs,100,"EDI order class",Normal,OrderClass,false,OrderClassSClass);
  CheckBox(h,v+=vs,0,"Ignore best before dates with import",DoNotCheckBesfBef);
  StaticText(h=50,v+=39,"Automatic sales order imports",false);
  CheckBox(h,v+=12,0,"Monday",MonFlag);
  EditField(h2,v,70,"Time",Normal,MonTime,false,0);
  CheckBox(h,v+=vs,0,"Tuesday",TueFlag);
  EditField(h2,v,70,"Time",Normal,TueTime,false,0);
  CheckBox(h,v+=vs,0,"Wednesday",WedFlag);
  EditField(h2,v,70,"Time",Normal,WedTime,false,0);
  CheckBox(h,v+=vs,0,"Thursday",ThuFlag);
  EditField(h2,v,70,"Time",Normal,ThuTime,false,0);
  CheckBox(h,v+=vs,0,"Friday",FriFlag);
  EditField(h2,v,70,"Time",Normal,FriTime,false,0);
  CheckBox(h,v+=vs,0,"Saturday",SatFlag);
  EditField(h2,v,70,"Time",Normal,SatTime,false,0);
  CheckBox(h,v+=vs,0,"Sunday",SunFlag);
  EditField(h2,v,70,"Time",Normal,SunTime,false,0);
  EndWindow;

end;

window IVLClass:8
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real pos;
  Boolean acptf;

  WindowBegin("Invoices",IVLClass,CGmlist,-);
  pos = 920;
  acptf = AcceptanceStatusColumnTest("IVVc");
  if (acptf) then begin
    pos = pos + 40;
  end;
  SetWRect(20,80,pos,298);
  Sizeable(-1,-1,0,0);
  SpawnClass(IVDClass);
  UseView(IVVc);
  FormName(PrintIVL);
  RecordList(4,17,-21,-39);
  RlColKey(4,4,"No.",SerNr,false,SerNr);
  RlColKey(79,79,"OK",OKFlag,false,OKFlag);
  RlColKey(111,111,"EDI",SentToEDI,false,SentToEDI);
  RlColKey(141,141,"Invoice Date",InvDate,false,InvDate);
  RlColKey(221,221,"Deliv. date",ServiceDelDate,false,ServiceDelDate);
  RlColKey(291,291,"Official No.",OfficialSerNr,false,OfficialSerNr);
  RlColKey(381,381,"Order No.",OrderNr,false,OrderNr);
  pos = 451;
  RlColKey(pos,pos,"Del. Address",ShipAddr1,false,ShipAddr1); pos = pos + 150; //EBS
  RlColKey(pos,pos,"Customer",CustCode,false,CustCode); pos = pos + 60;
  RlColKey(pos,pos,"Name",Addr0,false,Name);
  if (acptf) then begin
    CalculatedColumn(-230,-230,"Appr.","IVLClassAcceptanceStatus",false);
  end;
  CalculatedColumn(-190,-190,"Brutto","IVLClassCalcBruttoWeight",true);
  RlColKey(-130,-130,"Total",Sum1,true,Sum1);
  RlCol(-60,-60,"",CredMark,true);
  if (HasMultiCurrency or HasBase2) then begin
    RlCol(-40,-40,"Cur.",CurncyCode,true);
  end;
  RlCol(-1,-1,"",Invalid,true);
  SearchField("Search");
  if (HasLimitedAccess) then begin
    BrowseSubsetButton(-40,-15);
  end;
  SpecialMenu("OK",'G',0,"OKIVLsm");
  SpecialMenu("Print Proforma Invoices",' ',1,"PrintIVLsm");
  SpecialMenu("Invoice Status",'r',2,"IVInfoIVLsm");
  EndWindow;
end;

window BLT_ProdLabelsRClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real v;
  WindowBegin("Specify Productions",ProdOrderRClass,CGRcW,RcType);
  SetWRect(20,80,400,148);
  EditFieldTL(150,v=6,153,"Production",M4Str,Normal,30,f1,false,0);
  EndWindow;
end;

window ORDClass:2
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h1,h2,h3,h4,t,v,vm,vs,h5,flipnr,width;
  string 255 label;
  Integer rn;

  WindowBegin("Order",ORDClass,CGview,-);
  SetWRect(20,80,750,460);
  Sizeable(-1,-1,0,0);
  UseView(ORVc);
  ActiveFieldOnNew("CustCode");
  CommunicateButton;
  Tile(0,74,false,"",CustCode);
  EditField(75,vm=(v=6),95,"No.",Normal,SerNr,false,TSerSClass);
  EditField(75,v+=20,95,"Customer",Normal,CustCode,false,CUSClass);
  EnterSkip(PayDeal);
  EditField(h=255,v=vm,-40,"Name",Normal,Addr0,false,0);
  if (StandardHansa==false) then begin
    EditField(h,vm=(v+=20),135,"Official No.",Normal,OfficialSerNr,false,LegalInvNrSClass);
    CheckBox(h4=-100,v,0,"OK",OKFlag);
  end else begin
    CheckBox(h4=-100,vm=(v+=20),0,"OK",OKFlag);
  end;
//  CheckBox(h+120,vm,0,"Closed",Closed);
//  CheckBox(h+240,vm,0,"Reserved",Reserved);
  TileButton(1,"Terms");
  TileButton(2,"Items");
  TileButton(3,"Currency");
  TileButton(4,"Del. Terms");
  TileButton(5,"Price List");
  TileButton(6,"Inv. Address");
  TileButton(7,"Del. Address");
  Tile(1,110,false,"1",OrdDate);
  vs = 20; h1 = 110; h2 = 290; h3 = 530; h4 = -100;
  EditField(h1,vm=(v=6),82,"Date",Normal,OrdDate,false,PasteCurDate);
  EditField(h1,v+=vs,25,"Payment Terms",Normal,PayDeal,false,PDSClass);
  EditField(h1,v+=vs,82,"Planned Delivery",Normal,PlanShip,false,PasteCurDate);
  EditField(h1,v+=vs,82,"#Despatch# Date",Normal,DespatchDate,false,PasteCurDate);
  EditField(h1,v+=vs,82,"#Despatch# Time",Normal,DespatchTime,false,PasteCurTime);
  EditField(h2,v=vm,135,"Our Reference",Normal,OurContact,false,0);
  EditField(h2,v+=vs,135,"Attention",Normal,CustContact,false,ContactSClass);
  EditField(h2,v+=vs,135,"Tags/Objects",Normal,Objects,false,ObjSClass);
  EditField(h2,v+=vs,135,"Reference",Normal,RefStr,false,0);
  EditField(h2,v+=vs,135,"Cust. Ord. No.",Normal,CustOrdNr,false,0);
  EditField(h3,v=vm,80,"#Salesman#",Normal,SalesMan,false,UserSClass);
  if (StandardHansa==false) then begin
    EditField(h3,v+=vs,80,"Project",Normal,PRCode,false,PRSClass);
  end;
  EditField(h3,v+=vs,80,"Order Class",Normal,OrderClass,false,OrderClassSClass);
  if (StandardHansa==false) then begin
    EditField(h3,v+=vs,80,"Order Type",Normal,OrderType,false,SetSClass);
    EditField(h3,v+=vs,80,"Sales Contract",Normal,ORCONr,false,ORCOSClass);
  end;
  CheckBox(h4,v=6,0,"Closed",Closed);
  CheckBox(h4,v+=16,0,"Reserved",Reserved);
  CheckBox(h4,v+=16,0,"Imported",BLT_Importf); //EBS
  CheckBox(h4,v+=16,0,"Exported",BLT_Exportf); //EBS
  CheckBox(h4,v+=16,0,"Sent to log.",BLT_SentToLogistics); //EBS
  EnterSkip(Math);
  Tile(2,220,true,"2",Math);
//  CheckBox(20,-20,0,"OK",OKFlag);
  EditField(55,-41,50,"Currency",Normal,CurncyCode,false,CurncyCodeSClass);
  if (UseTaxTemplatesforTaxCalc==false) then begin
    if (UserCanAction("ViewCostPrice",true)) then begin
      EditField(160,-41,70,"GP %",Normal,GPProc,true,0);
      EditField(160,-21,70,"Total GP",ViewOnly,TotGP,true,0);
    end;
    if (HasLocalization("GBR,LTU,POL")) then begin
      EditField(310,-41,50,"Reverse #VAT#",ViewOnly,RvrsVAT,true,0);
      EditField(290,-21,70,"Ext. Tax",ViewOnly,TAX1Sum,true,0);
    end else begin
      EditField(290,-41,70,"Tax2",ViewOnly,TAX2Sum,true,0);
      EditField(290,-21,70,"Ext. Tax",ViewOnly,TAX1Sum,true,0);
    end;
    EditField(410,-41,100,"#VAT#",ViewOnly ,Sum3,true,0);
  end else begin
    if (UserCanAction("ViewCostPrice",true)) then begin
      EditField(290,-41,70,"GP %",Normal,GPProc,true,0);
      EditField(290,-21,70,"Total GP",ViewOnly,TotGP,true,0);
    end;
    EditField(410,-41,100,"Tax",ViewOnly ,Sum3,true,0);
  end;
  EditField(410,-21,100,"Base",ViewOnly,BaseSum4,true,0);
  EditField(-150,-41,100,"Subtotal",ViewOnly ,Sum1,true,0);
  EditField(-150,-21,100,"TOTAL",ViewOnly ,Sum4,true,0);
  v = 24;
  MatrixBegin(3,v,-50,-49,-,200);
  MatTypedRow(stp);
  flipnr = 0;
  Flip(flipnr); flipnr = flipnr + 1;
  MatText(t=9,32,"Subtotal",true);
  MatCol(t,100,"",0,Spec,false,0);
  MatColTL(t,-80,"Sum",0,-1,ViewOnly,0,Sum,true,0);
  MatText(t=17,32,"Header",true);
  MatCol(t,100,"",0,Spec,false,0);
  MatCol(t=1,32,"Item",0,ArtCode,false,BLT_INSClass); //EBS edit
//  MatCol(t,94,"Var",0,VARList,true,VARSClass);
//  MatCol(t,144,"Qty",0,Quant,true,0);
  t = 1;
  if (HasVarieties) then begin
    MatCol(t,94,"Qty",0,Quant,true,MATVARINSClass);
  end else begin
    MatCol(t,94,"Qty",0,Quant,true,0);
  end;
  EnterSkip(ArtCode);
  MatCol(t=kInvoiceRowTypeStructuredItemComponent,32,"Item",0,ArtCode,false,ForSaleINSClass);
//  MatCol(t,94,"Var",0,VARList,true,VARSClass);
//  MatCol(t,144,"Qty",0,Quant,true,0);
  if (HasVarieties) then begin
    MatCol(t,94,"Qty",0,Quant,true,MATVARINSClass);
  end else begin
    MatCol(t,94,"Qty",0,Quant,true,0);
  end;
  EnterSkip(ArtCode);
  MatText(t=10,32,"This row and all rows below it will be hidden on printout",false);
  MatText(t=kInvoiceRowTypePerceptionTax,32,"Perception Tax",true);
  MatCol(t,132,"",0,Region,false,0);
  MatCol(t,252,"",0,TAX2Prc,true,0);
  MatCol(t,292,"",0,Sum,true,0);
  MatCol(t,372,"",0,SalesAcc,false,0);
  MatCol(t,452,"",0,Spec,false,0);
  Flip(flipnr); flipnr = flipnr + 1;
//  MatCol(t=1,194,"Description",0,Spec,false,0);
  t = 1;

  MatCol(t,144,"Description",0,Spec,false,0);
  MatCol(t,-345,"Min. best bef.",0,MinBestBefore,false,PasteCurDate);  // EBS
  MatCol(t,-270,"Max. best bef.",0,MaxBestBefore,false,PasteCurDate);  // EBS
  MatCol(t,-195,"Unit Price",0,Price,true,0);  // use PL2SClass for filtered datalist
  MatCol(t,-135,"%",0,vRebate,true,0);
  MatCol(t,-100,"Sum",0,Sum,true,0);
  MatCol(t=kInvoiceRowTypeStructuredItemComponent,144,"Description",0,Spec,false,0);
  MatCol(t,-235,"Unit Price",0,Price,true,0);  // use PL2SClass for filtered datalist
  MatCol(t,-135,"%",0,vRebate,true,0);
  MatCol(t,-100,"Sum",0,Sum,true,0);
  Flip(flipnr); flipnr = flipnr + 1;
  t = 1;
  MatCol(t,144,"Description",0,Spec,false,0);
  if (UseTaxTemplatesforTaxCalc) then begin
    MatCol(t,-284,"Cust. Item No.",0,CustArtCode,false,CUINSClass);
    MatCol(t,-224,"A/C",0,SalesAcc,false,AccSClass);
    MatCol(t,-164,"Tag/Object",0,Objects,false,ObjSClass);
    MatCol(t,-70,"T-Cd",0,TaxTemplateCode,false,TaxTemplateSClass);
  end else begin
    MatCol(t,-264,"Cust. Item No.",0,CustArtCode,false,CUINSClass);
    MatCol(t,-184,"A/C",0,SalesAcc,false,AccSClass);
    MatCol(t,-124,"Tag/Object",0,Objects,false,ObjSClass);
    if (HasLocalization("GBR,LTU,POL") and IsEnterprise) then begin
      MatCol(t,-60,"#V-Cd#",0,VATCode,false,VATCodeSClass);
      MatCol(t,-30,"Rvrs",0,RvrsVATCode,false,VATCodeSClass);
    end else begin
      MatCol(t,-30,"#V-Cd#",0,VATCode,false,VATCodeSClass);
    end;
  end;
  MatCol(t=kInvoiceRowTypeStructuredItemComponent,144,"Description",0,Spec,false,0);
  if (UseTaxTemplatesforTaxCalc) then begin
    MatCol(t,-284,"Cust. Item No.",0,CustArtCode,false,CUINSClass);
    MatCol(t,-224,"A/C",0,SalesAcc,false,AccSClass);
    MatCol(t,-164,"Tag/Object",0,Objects,false,ObjSClass);
    MatCol(t,-70,"T-Cd",0,TaxTemplateCode,false,TaxTemplateSClass);
  end else begin
    MatCol(t,-264,"Cust. Item No.",0,CustArtCode,false,CUINSClass);
    MatCol(t,-184,"A/C",0,SalesAcc,false,AccSClass);
    MatCol(t,-124,"Tag/Object",0,Objects,false,ObjSClass);
    if (HasLocalization("GBR,LTU,POL") and IsEnterprise) then begin
      MatCol(t,-60,"#V-Cd#",0,VATCode,false,VATCodeSClass);
      MatCol(t,-30,"Rvrs",0,RvrsVATCode,false,VATCodeSClass);
    end else begin
      MatCol(t,-30,"#V-Cd#",0,VATCode,false,VATCodeSClass);
    end;
  end;
  Flip(flipnr); flipnr = flipnr + 1;
  t = 1;
  MatCol(t,144,"Description",0,Spec,false,0);
  MatCol(t,344,"Order Type",0,OrderType,false,SetSClass);
  if (UserCanAction("ViewCostPrice",true)) then begin
    MatCol(t,-245,"Unit Price",0,Price,true,0); // use PL2SClass for filtered datalist
    MatCol(t,-175,"%",0,vRebate,true,0);
    MatCol(t,-140,"Cost",0,BasePrice,true,0);
    MatCol(t,-70,"GP",0,rowGP,true,0);
  end else begin
    MatCol(t,-235,"Unit Price",0,Price,true,0); // use PL2SClass for filtered datalist
    MatCol(t,-135,"%",0,vRebate,true,0);
    MatCol(t,-100,"Sum",0,Sum,true,0);
  end;
  MatCol(t=kInvoiceRowTypeStructuredItemComponent,144,"Description",0,Spec,false,0);
  if (UserCanAction("ViewCostPrice",true)) then begin
    MatCol(t,-245,"Unit Price",0,Price,true,0); // use PL2SClass for filtered datalist
    MatCol(t,-175,"%",0,vRebate,true,0);
    MatCol(t,-140,"Cost",0,BasePrice,true,0);
    MatCol(t,-70,"GP",0,rowGP,true,0);
  end else begin
    MatCol(t,-235,"Unit Price",0,Price,true,0); // use PL2SClass for filtered datalist
    MatCol(t,-135,"%",0,vRebate,true,0);
    MatCol(t,-100,"Sum",0,Sum,true,0);
  end;
  Flip(flipnr); flipnr = flipnr + 1;
  t = 1;
  MatCol(t,144,"Desc.",0,Spec,false,0);
  MatCol(t,-300,"#Salesmen#",0,Salesmen,false,UserSClass);
  MatCol(t,-236,"Del.",0,Shipd1,true,0);
  MatCol(t,-184,"Del. OK",0,Shipd2,true,0);
  MatCol(t,-132,"Invoiced",0,Invd,true,0);
  MatCol(t,-80,"Recipe",0,Recepy,false,RecSClass);
  MatCol(t=kInvoiceRowTypeStructuredItemComponent,144,"Desc.",0,Spec,false,0);
  MatCol(t,-290,"Del.",0,Shipd1,true,0);
  MatCol(t,-220,"Del. OK",0,Shipd2,true,0);
  MatCol(t,-150,"Invoiced",0,Invd,true,0);
  MatCol(t,-80,"Recipe",0,Recepy,false,RecSClass);
  Flip(flipnr); flipnr = flipnr + 1;
  t = 1;
  MatCol(t,144,"Description",0,Spec,false,0);
  MatCol(t,-290,"Serial No.",0,SerialNr,false,SerialNrSClass);
  MatCol(t,-150,"Plan. Del.",0,PlanShipRow,true,PasteCurDate);
  MatCol(t,-70,"Price Factor",0,PriceFactor,true,0);
  MatCol(t=kInvoiceRowTypeStructuredItemComponent,144,"Description",0,Spec,false,0);
  MatCol(t,-290,"Serial No.",0,SerialNr,false,SerialNrSClass);
  MatCol(t,-150,"Plan. Del.",0,PlanShipRow,true,PasteCurDate);
  MatCol(t,-70,"Price Factor",0,PriceFactor,true,0);
  Flip(flipnr); flipnr = flipnr + 1;
  t = 1;
  MatCol(t,144,"Description",0,Spec,false,0);
  MatCol(t,-315,"Delivery Note",0,ShipNote,false,0);
  MatCol(t,-210,"Location",0,Location,false,LocationSClass);
  if (StandardHansa==false) then begin
    MatCol(t,-145,"Position",0,Position,true,UsedPosSClass);
  end;
  MatCol(t,-90,"Source",0,Source,true,SourceSClass);
  MatCol(t=kInvoiceRowTypeStructuredItemComponent,144,"Description",0,Spec,false,0);
  MatCol(t,-315,"Delivery Note",0,ShipNote,false,0);
  MatCol(t,-210,"Location",0,Location,false,LocationSClass);
  if (StandardHansa==false) then begin
    MatCol(t,-145,"Position",0,Position,true,UsedPosSClass);
  end;
  MatCol(t,-90,"Source",0,Source,true,SourceSClass);
  if (StandardHansa==false) then begin
    Flip(flipnr); flipnr = flipnr + 1;
    MatCol(t=1,144,"Pick. Date",0,PickingDate,false,PasteCurDate);
    MatCol(t,-390,"Pick. Time",0,PickingTime,false,PasteCurTime);
    MatCol(t,-320,"Inl. Date",0,InloadingDate,true,PasteCurDate);
    MatCol(t,-230,"Inl. Time",0,InloadingTime,true,PasteCurTime);
    MatCol(t,-160,"#Desp.# Date",0,DespatchRowDate,true,PasteCurDate);
    MatCol(t,-70,"#Desp.# Time",0,DespatchRowTime,true,PasteCurTime);
    MatCol(t=kInvoiceRowTypeStructuredItemComponent,144,"Pick. Date",0,PickingDate,false,PasteCurDate);
    MatCol(t,-390,"Pick. Time",0,PickingTime,false,PasteCurTime);
    MatCol(t,-320,"Inl. Date",0,InloadingDate,true,PasteCurDate);
    MatCol(t,-230,"Inl. Time",0,InloadingTime,true,PasteCurTime);
    MatCol(t,-160,"#Desp.# Date",0,DespatchRowDate,true,PasteCurDate);
    MatCol(t,-70,"#Desp.# Time",0,DespatchRowTime,true,PasteCurTime);
  end;
  Flip(flipnr); flipnr = flipnr + 1;
  t = 1;
  MatCol(t,144,"Description",0,Spec,false,0);
  MatCol(t,-315,"Unit",0,UnitCode,false,UnitSClass);
  MatCol(t,-260,"Unit Qty",0,UnitFactQuant,true,0);
  MatCol(t,-200,"Width",0,UnitXval,true,0);
  MatCol(t,-160,"Height",0,UnitYval,true,0);
  MatCol(t,-120,"Depth",0,UnitZval,true,0);
  MatCol(t,-80,"Unit Pr.of Unit",0,UnitFactPrice,true,0);
  MatCol(t=kInvoiceRowTypeStructuredItemComponent,144,"Description",0,Spec,false,0);
  MatCol(t,-315,"Unit",0,UnitCode,false,UnitSClass);
  MatCol(t,-260,"Unit Qty",0,UnitFactQuant,true,0);
  MatCol(t,-200,"Width",0,UnitXval,true,0);
  MatCol(t,-160,"Height",0,UnitYval,true,0);
  MatCol(t,-120,"Depth",0,UnitZval,true,0);
  MatCol(t,-80,"Unit Pr.of Unit",0,UnitFactPrice,true,0);
  InsertRowTest;
  DeleteRowTest;
  RowMenuBegin("");
  RowMenuItem(0,"Item Status",'I','I',0,"ItemStatusORDsm");
  if (StandardHansa==false) then begin
    RowMenuItem(0,"Previous Sales Prices",' ',' ',0,"ORLastSPrsm");
  end;
  RowMenuItem(0,"Add Header Line",' ',' ',0,"ORAddHeaderLine");
  RowMenuItem(0,"Add Hidden Line",' ',' ',0,"ORAddHidLine");
  RowMenuItem(0,"Add Subtotal Line",' ',' ',0,"SubtotalORDsm");
  if (StandardHansa==false) then begin
    RowMenuItem(0,"Manager's Discount Override",' ',' ',0,"MgrsDiscOverrideORDsm");
  end;
  EndRowMenu;
  EndMatrix;
  vs = 20;
  v = 18; VTab(-35,v,-16,v+vs,ToolFlip,1,"A");
  v=v+vs;  VTab(-35,v,-16,v+vs,ToolFlip,2,"B");
  v=v+vs;  VTab(-35,v,-16,v+vs,ToolFlip,3,"C");
  v=v+vs;  VTab(-35,v,-16,v+vs,ToolFlip,4,"D");
  v=v+vs;  VTab(-35,v,-16,v+vs,ToolFlip,5,"E");
  v=v+vs;  VTab(-35,v,-16,v+vs,ToolFlip,6,"F");
  v=v+vs;  VTab(-35,v,-16,v+vs,ToolFlip,7,"G");
  if (StandardHansa==false) then begin
    v=v+vs;  VTab(-35,v,-16,v+vs,ToolFlip,8,"H");
  end;
  Tile(3,70,false,"3",FrRate);
  vs = 20;
  EditField(h=110,v=6,50,"Currency",Normal,CurncyCode,false,CurncyCodeSClass);
  EditField(h,v+vs,50,"Base Currency 1",Normal,BaseRate1,true,0);
  EditField(h,v+(vs*2),50,"Base Currency 2",Normal,BaseRate2,true,0);
  EditField(h2=295,v,50,"Rate",Normal,FrRate,true,0);
  RateField(h3=360,v,50,":",Normal,"ToRateB1",true,h3+60,v+14,"Base Currency 1",false);
  RateField(h3,v+=vs,50,":",Normal,"ToRateB2",true,h3+60,v+14,"Base Currency 2",false);
  Tile(4,110,false,"4",ShipDeal);
  vs = 20; h1 = 110; h2 = 290; h3 = 530; h4 = -100;
  EditField(h1,v=6,80,"Delivery Terms",Normal,ShipDeal,false,ShipDealSClass);
  EditField(h1,v+=vs,80,"Delivery Mode",Normal,ShipMode,false,DMSClass);
  if (StandardHansa==false) then begin
    EditField(h1,v+=vs,80,"Route",Normal,Sorting,false,DelRouteSClass);
  end;
  EditField(h1,v+=vs,80,"Location",Normal,Location,false,LocationSClass);
  if (StandardHansa==false) then begin
    EditField(h1,v+=vs,80,"Branch",Normal,BranchID,false,AllCUSClass);
  end;
  EditField(h2,v=vm,80,"Total Quantity",ViewOnly,TotQty,true,0);
  EditField(h2,v+=vs,80,"Total Weight",ViewOnly,TotWeight,true,0);
  EditField(h2,v+=vs,80,"Total Volume",ViewOnly,TotVolume,true,0);
  EditField(h2,v+=vs,80,"Freight",Normal,FrPrice,true,0);
  EditField(h3,v,80,"Plan. del. date",ViewOnly,PlanShipDate,false,0); //EBS
  EditField(h2,v+=vs,80,"Intrastat Code",Normal,IntrastatTransCode,true,IntrastatTransCodeSClass);
  if (StandardHansa==false) then begin
    EditField(h3,v,80,"Freight #V-Cd#",Normal,FrVATCode,true,VATCodeSClass);
  end;
  CheckBox(473,v=vm,0,"Invoice Before Delivery",InvBeforeShip);
  CheckBox(473,v+=16,0,"Set delivered quantity to Zero",SHShipSetToZero);
  Tile(5,130,false,"5",PriceList);
  h3 = 530;
  EditField(h1,v=vm,80,"Price List",Normal,PriceList,false,PLDefSClass);
  EditField(h1,v+=vs,80,"Discount Matrix",ViewOnly,RebCode,false,0);
//  EditField(h2,v+=vs,80,"Disc %",ViewOnly,DiscPerc,false,0);
//  EditField(h2,v+=vs,80,"Disc Amnt",ViewOnly,DiscSum,false,0);
  EditField(h1,v+=vs,80,"Invoice To",Normal,InvoiceToCode,false,CUSClass);
  if (StandardHansa==false) then begin
    EditField(h1,v+=vs,80,"Credit Card",Normal,CreditCard,false,CreditCardSClass);
    EditField(h1,v+=vs,80,"#Authorisation#",Normal,AuthorizationCode,false,0);
  end;
  EditField(h1,v+=vs,-20,"Comment",Normal,Comment,false,0);
  EditField(h1,v+=vs,-20,"",Normal,Comment2,false,0);
  EditField(h1,v+=vs,-20,"",Normal,Comment3,false,0);
  EditField(h1,v+=vs,-20,"",Normal,Comment4,false,0);
  v = vm;
  if (HasSalesGroup) then begin
    EditField(h2,v,80,"Sales Group",Normal,SalesGroup,false,SalesGroupSClass);
    v = v + vs;
  end;
  EditField(h2,v,80,"Language",Normal,LangCode,false,LangSClass);
  if (StandardHansa==false) then begin
    EditField(h2,v+=vs,80,"Commission",Normal,Commision,true,0);
    EditField(h2,v+=vs,80,"Total Incl. Com.",ViewOnly,SumIncCom,true,0);
  end;
  if (HasTREO) then begin
    EditField(h3,v=vm,80,"TREO No.",Normal,TREONr,false,0);
    EditField(h3,v+=vs,80,"TREO Expiry Date",Normal,TREOExpDate,false,PasteCurDate);
  end;
  Tile(6,250,false,"6",Addr1);
  label = UserDefined("CUVc","InvAddr0");
  if (blank(label)) then begin label = "Invoice"; end;
  EditField(h=110,v=6,-20,label,Normal,Addr1,false,0);
  label = UserDefined("CUVc","InvAddr1");
  if (blank(label)) then begin label = "Address"; end;
  EditField(h,v+=vs, -20,label,Normal,Addr2,false,0);
  label = UserDefined("CUVc","InvAddr2");
  EditField(h,v+=vs, -20,label,Normal,Addr3,false,0);
  label = UserDefined("CUVc","InvAddr3");
  EditField(h,v+=vs, -20,label,Normal,InvAddr3,false,0);
  label = UserDefined("CUVc","InvAddr4");
  EditField(h,v+=vs, -20,label,Normal,InvAddr4,false,0);
  EditField(h,vm=(v+=vs),80,"Country",Normal,InvCountry,false,CountrySClass);
  if (HasLocalization("BRA")) then begin
    EditField(h2-89,v,232,"",ViewOnly,InvCountryName,false,0);
    h5 = -170;
    width = 150;
  end else begin
    h5 = -270;
    width = 135;
  end;
  EditField(h5,v,width,"Account Op.",Normal,BankCode,false,BankSClass);
  if (HasApprovals) then begin
    SoftEditField(h3=h+4,v=(vm+=40),123,"Approval Status",ViewOnly,"AcceptanceStatusFlag",false,0,M4Str,255);
/*
    ButtonFrame(h3=h+4,v=(vm+=40),123,6,"Approval Status");
    RadioButton(h3,v,kAcceptanceStateNotRequired,0,"Not Required",AcceptanceStatus);
    RadioButton(h3,v+=16,kAcceptanceStateNotStarted,0,"Not Started",AcceptanceStatus);
    RadioButton(h3,v+=16,kAcceptanceStateNotRequested,0,"Not Reuested",AcceptanceStatus);
    RadioButton(h3,v+=16,kAcceptanceStatePending,0,"Pending",AcceptanceStatus);
    RadioButton(h3,v+=16,kAcceptanceStateApproved,0,"Approved",AcceptanceStatus);
    RadioButton(h3,v+=16,kAcceptanceStateRejected,0,"Rejected",AcceptanceStatus);
*/
    v = VATZoneButtonsLabelsENG(h3=290,v=vm,170,16);
  end else begin
    v = VATZoneButtonsLabelsENG(h3=290,v=vm+20,170,16);
  end;
  EditField(h2=-170,v=vm,150,"Region",Normal,Region,false,RegionSClass);
  EditField(h2,v+=vs,150,"#VAT Reg. No.#",Normal,VATNr,false,0);
  EditField(h2,v+=vs,150,"GLN",ViewOnly,RecipientGLN,false,0);
  EditField(h2,v+=vs,150,"Telephone",Normal,Phone,false,0);
  EditField(h2,v+=vs,150,"Fax",Normal,Fax,false,0);
  // Tile(7,170,false,"7",ShipAddr0);
  if (StandardHansa==false) then begin
    Tile(7,170,false,"7",DelAddrCode);
    EditField(h1,v=6,80,"Address Code",Normal,DelAddrCode,false,DelAddr3SClass);
    EditField(h1,v+=vs,-20,"Delivery",Normal,ShipAddr0,false,0);
  end else begin
    Tile(7,170,false,"7",ShipAddr0);
    EditField(h1,v=6,-20,"Delivery",Normal,ShipAddr0,false,0);
  end;
  EditField(h1,v+=vs,-20,"Address",Normal,ShipAddr1,false,0);
  EditField(h1,v+=vs,-20,"",Normal,ShipAddr2,false,0);
  EditField(h1,v+=vs,-20,"",Normal,ShipAddr3,false,0);
  EditField(h1,v+=vs,-20,"",Normal,DelAddr3,false,0);
  EditField(h1,v+=vs,-20,"",Normal,DelAddr4,false,0);
  EditField(h1,v+=vs,80,"Country",Normal,DelCountry,false,CountrySClass);
  if (HasLocalization("BRA")) then begin
    EditField(h1+91,v,232,"",ViewOnly,DelCountryName,false,0);
    h5 = -170;
    width = -20;
  end;
  EditField(h2,v,150,"Delivery GLN",ViewOnly,DelRecipientGLN,false,0);
//  EditField(h1+200,v,80,"#VAT Code#",Normal,CustVATCode,false,0);
  EnterSkip(OrdDate);
  if (GuiType==kGuiMetro) then begin // Temporarily disabled on Windows 8
    SpecialMenu("Order Status",'r',5,"ORInfoRnORDsm");
    SpecialMenu("Item Status",'I',2,"ItemStatusORDsm");
    SpecialMenu("Create Delivery",'L',0,"SHFromORDsm");
    SpecialMenu("Create Invoice",'F',1,"IVFromORDsm");
    SpecialMenu("Add Subtotal",' ',14,"SubtotalORDsm");
/*
email not working yet
    SpecialMenu("Create Email",'m',11,"CreateMailFromORDsm");
*/
  end else begin
  SpecialMenu("Recalculate Discount",' ',11,"RecalcDiscountORDsm");
  if (StandardHansa==false) then begin
    SpecialMenu("Recalculate Weight and Volume",' ',10,"RecalculateWeightORDsm");
  end;
  if (HasLocalization("USA")) then begin
    SpecialMenu("Get Tax Rates",' ',0,"ORGetTaxRatesDsm");
  end;

  SpecialMenu("Update Currency Price List Items",' ',7,"UpdatePricesORDsm");
  SpecialMenu("Item Search",'f',1,"ItemSearchDsm");
  SpecialMenu("Order Status",'r',5,"ORInfoRnORDsm");
  if (HasTaxMatrix) then begin
    SpecialMenu("Open Tax Matrix",' ',25,"OpenVatMatrixORDsm");
  end;
  if (StandardHansa==false) then begin
    SpecialMenu("Print Internal Order",' ',4,"Or2FormORDsm");
  end;
  SpecialMenu("Reservations",' ',15,"OrderReservORDsm");
  if (GuiType==kGuiiPhone) then begin
    SpecialMenu("Sign",' ',10,"SignORDsm");
  end;

  SpecMenuGroup("",kSpecMenuGroupTypeExtendedPlusMenu,0);
//  SpecialMenu("Activity",'c',9,"CreateActFromORDsm");
  SpecialMenu("Delivery",'L',0,"SHFromORDsm");
  if (HasDownpayments) then begin
    SpecialMenu("Down Payment Invoice",' ',3,"DownPayFromORDsm");
  end;
  if (HaseMail) then begin
    SpecialMenu("Email",'m',11,"CreateMailFromORDsm");
  end;
  SpecialMenu("Invoice",'F',1,"IVFromORDsm");
  if (HasModTS or IsEnterprise) then begin
    SpecialMenu("Project",' ',9,"CreatePRFromORDsm");
    SpecialMenu("Project Budget",' ',10,"CreateTBBUFromORDsm");
  end;
  SpecialMenu("Purchase Order",' ',4,"POFromORDsm");
  SpecialMenu("Returned Goods",'B',6,"RetFromORsm");
  SpecialMenu("#Stock# Movement",' ',8,"StockMovFromORDsm");
  if (HasApprovals) then begin
    SpecialMenu("Request Approval",' ',6,"ORSendforAcceptanceORDsm");
    SpecialMenu("Cancel Approval Request",' ',2,"CancelApprovalRequestDsm");
  end;
  SpecialMenu("Add Customer",' ',0,"AddCustomerORDsm");
  SpecialMenu("Add Item",' ',0,"AddItemORDsm");
  end;
  EndWindow;
end;

window ORLClass:3
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  Integer pos,rn;

  WindowBegin("Orders",ORLClass,CGmlist,-);
  SpawnClass(ORDClass);
  SetWRect(20,80,980,298); //EBS edit
  Sizeable(-1,-1,0,0);
  UseView(ORVc);
  FormName(PrintORL);
  RecordList(4,17,-21,-39);
  RlColKey(4,4,"No.",SerNr,false,SerNr);
  RlColKey(79,79,"OK",OKFlag,false,OKFlag);
  pos = 111;
  if (HasModIN) then begin
    RlColKey(pos,pos,"Delvd",ShipMark,false,ShipFlag);
    pos = pos + 32;
  end;
  if (HasModSL) then begin
    RlColKey(pos,pos,"Invd",InvMark,false,InvFlag);
    pos = pos + 32;
  end;
  RlCol(pos,pos,"Clsd",Closed,false);
  pos = pos + 32;
  //EBS -->
  RlCol(pos,pos,"Imp.",BLT_Importf,false);
  pos = pos + 32;
  RlCol(pos,pos,"Exp.",BLT_Exportf,false);
  pos = pos + 32;
  //EBS <--
  RlColKey(pos,pos,"Order Date",OrdDate,false,OrdDate);
  pos = pos + 80;
  RlColKey(pos,pos,"Plan. shp.",PlanShipDate,false,PlanShipDate);
  pos = pos + 80;
  if (HasMultiLocations) then begin
    RlCol   (pos,pos,"Location",Location,false);
    pos = pos + 60;
  end;
  RlColKey(pos,pos,"Cust. Ord. No.",CustOrdNr,false,CustOrdNr);
  pos = pos + 80;
  RlColKey(pos,pos,"Customer",CustCode,false,CustCode);
  pos = pos + 60;
  RlColKey(pos,pos,"Name",Addr0,false,Name);
  if (IsEnterprise) then begin
    if (AcceptanceStatusColumnTest("ORVc")) then begin
      CalculatedColumn(-240,-240,"Appr.","ORLClassAcceptanceStatus",false);
    end;
    RlColKey(-200,-200,"Class",OrderClass,false,OrderClass);
    RlColKey(-155,-155,"Total",Sum4,true,Sum4);
    RlCol(-75,-75,"Downpaid",DownPaySent,true);
  end else begin
    RlColKey(-55,-55,"Total",Sum4,true,Sum4);
  end;
  if (HasLimitedAccess) then begin
    BrowseSubsetButton(-40,-15);
  end;
  SearchField("Search");
  if (GuiType==kGuiMetro) then begin
    rn = 0;
    RowMenuBegin("");
    if (HasModIN) then begin
      RowMenuItem(rn,"Create Delivery",'L','L',4300,"SHFromORLsm"); rn = rn + 1;
    end;
    RowMenuItem(rn,"Create Invoice",'L','L',4300,"IVFromORLsm"); rn = rn + 1;
    if (HasDownpayments) then begin
      RowMenuItem(rn,"Create Down Payment Invoice",'o','o',4300,"DownPayFromORLsm"); rn = rn + 1;
    end;
    RowMenuItem(rn,"Order Status",'r','r',4300,"ORStatusORLsm"); rn = rn + 1;
    if (HasModPO) then begin
      RowMenuItem(rn,"Create Purchase Order",' ',' ',4300,"POFromORLsm"); rn = rn + 1;
    end;
    if (HasModCRM) then begin
      RowMenuItem(rn,"Create Activity",'c','c',4300,"ActFromORLsm"); rn = rn + 1;
    end;
    if (IsEnterprise) then begin
      RowMenuItem(rn,"Set Order to Invoiced",' ',' ',4300,"ORToInvORLsm"); rn = rn + 1;
    end;
    EndRowMenu;
  end else begin
    SpecialMenu("Order Status",'r',3,"ORStatusORLsm");
    if (IsEnterprise) then begin
      SpecialMenu("Set Order to Invoiced",' ',6,"ORToInvORLsm");
    end;
    SpecialMenu("Import EDI Orders",'',5,"EBS_ImportEDIOrderssm");
    SpecMenuGroup("",kSpecMenuGroupTypeExtendedPlusMenu,0);
    if (HasModIN) then begin
      SpecialMenu("Delivery",'L',0,"SHFromORLsm");
    end;
    SpecialMenu("Invoice",'F',1,"IVFromORLsm");
    if (HasDownpayments) then begin
      SpecialMenu("Down Payment Invoice",'o',2,"DownPayFromORLsm");
    end;
    if (HasModPO) then begin
      SpecialMenu("Purchase Order",' ',4,"POFromORLsm");
    end;
    if (HasModCRM) then begin
      SpecialMenu("Activity",'c',5,"ActFromORLsm");
    end;
  end;
  EndWindow;
end;

window BLT_CompQtyRClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v;

  WindowBegin("Comparison of quantities",BLT_CompQtyRClass,CGRcW,RcType);
    SetWRect(20,80,450,150);
    PeriodField(h=100,v=10,"Period");
    EditFieldTL(h,v+=20,100,"Deliveries",M4Str,Normal,30,f1,false,SHSClass);
  EndWindow;

return;
end;

window PLLClass:2
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  WindowBegin("Prices",PLLClass,CGmlist,-);
  SpawnClass(PLDClass);
  SetWRect(64,80,709,320);
  Sizeable(-1,-1,0,0);
  UseView(PLVc);
  RecordList(4,17,-21,-39);
  RlColKey(4,2,"Item",ArtCode,false,ArtCode);
  RlColKey(100,100, "Price List",PLCode,false,PLCode);
  if (HasStandardCRM) then begin
    RlCol(180,180,"Customer",CustCode,false);
    RlColKey(270,270, "Comment",Comment,false,Comment);
  end else begin
    RlColKey(180,180, "Comment",Comment,false,Comment);
  end;
  RlCol(-290,-290,"Price",ExVatPrice,false);
  RlColKey(-220,-220,"Camp. from",CampStartDate,false,CampStartDate); //EBS
  RlColKey(-140,-140,"Camp. till",CampEndDate,false,CampEndDate); //EBS
  RlColKey(-60,-60,"Camp. price",CampPrice,true,CampPrice); //EBS
  SearchField("Search");
  EndWindow;
end;

window ArtRClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h2,v,vm,vs;
  WindowBegin("Specify Item List",ArtRClass,CGRcW,RcType);
  SetWRect(20,80,415,310);
  v = 6; vs = 20; h = 120;
  EditFieldTL(h,v, 150,"Item No.",   M4UStr,Normal,50,f1,false,INSClass);
  if (HasItemGroups) and (HasModSL) then begin
    EditFieldTL(h,v+=vs, 150,"Item Group",   M4UStr,Normal,11,f3,false,ITSClass);
  end;
  if (HasItemClassification) then begin
    EditFieldTL(h,v+=vs, 150,"Item Classification", M4UStr,Normal,60,f4,false,DISClass);
  end;
  if (HasMultiLocations) then begin
    EditFieldTL(h,v+=vs, 85,"Locations",M4UStr,Normal,30,f5,false,LocationSClass);
  end;
  EditFieldTL(h,v+=vs, 85,"Language",M4Code,Normal,30,Stext,false,LangSClass);
  if (HasAdvancedPricing) then begin
    EditFieldTL(h,v+=vs,100,"Price List",M4Str,Normal,5,FirstAcc,false,PLDefSClass);
  end;
  if (IsEnterprise) then begin
    h = 30;
  end;
  ButtonFrame(h,vm=(v+=41),123,3,"Sorting");
  RadioButton(h,v,0,0,"No.",flags[2]);
  if (HasItemGroups) and (HasModSL) then begin
    RadioButton(h,v+=16,1,0,"Group",flags[2]);
  end;
  RadioButton(h,v+=16,2,0,"Name",flags[2]);
  EndFrame;
  if (IsEnterprise) then begin
    ButtonFrame(h,v+=41,123,4,"Specify");
    CheckBox(h,v,0,"Plain",flags[3]);
    CheckBox(h,v+=16,0,"#Stocked#",flags[4]);
    CheckBox(h,v+=16,0,"Structured",flags[5]);
    if (StandardHansa==false) then begin
      CheckBox(h,v+=16,0,"Service",flags[6]);
    end;
    EndFrame;
    CheckBox(h2=230,v=vm,0,"Show Barcode",flags[7]);
    CheckBox(h2,v+=16,0,"Include Closed Items",flags[10]);
  end else begin
    CheckBox(h,v+=32,0,"Include Closed Items",flags[10]);
  end;
  EndWindow;
end;

window CustPSDClass:3
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h2,h3,v,vm,vs,vs2;
  Integer tilenr;

  WindowBegin("Information in Customer Status Report",CustPSDClass,CGview,-);
  UseView(CustPSVc);
  SetWRect(74,73,550,480);
  h=70;h2=45;h3=390;v=10;vs=20;vm=30; vs2=18;
  if (IsEnterprise) then begin
    Tile(0,50,false,"",Signature);
  end;
  tilenr = 1;
  EditField(h,v,82,"User",Normal,Signature,false,UserSClass);
  if (IsEnterprise) then begin
    TileButton(tilenr,tilenr);  tilenr = tilenr + 1;
    TileButton(tilenr,tilenr); tilenr = tilenr + 1;
    if (StandardHansa==false) then begin
      // TileButton(tilenr,tilenr); tilenr = tilenr + 1;
    end;
    tilenr = 1;
    Tile(tilenr,400,false,tilenr,NrOfAct); tilenr = tilenr + 1;
    v = vm;
  end else begin
    tilenr = 1;
    v = v + 40;
    vm = v;
  end;
  h = 30;
  if (HasModCRM) then begin
    ButtonFrame(20,v=vm,420,2,"Activities");
    CheckBox(h,v,0,"Include Activities",Activities);
    CheckBox(h3-100,v,0,"Show Activity Classes",ShowActivityClasses);
    CheckBox(h2,v+=17,0,"Include Not Done",NotOKAct);
    EditField(h3,v,40,"Last Done Activities",Normal,NrOfAct,false,0);
  end;
  ButtonFrame(20,vm=(v+40),420,2,"Delivery address");
  CheckBox(h=30,v+=(vs+20),0,"Include delivery addresses",BLT_ShowDelAddress);
  if (HasModSL) then begin
    ButtonFrame(20,vm=(v+40),420,3,"Invoices");
    CheckBox(h=30,v+=(vs+20),0,"Include Invoices",Invoices);
    CheckBox(h2,v+=17,0,"All Open",NotOKIV);
    EditField(h3,v,40,"Last Paid Invoices",Normal,NrOfIV,false,0);
  end;
  if (HasModCheck) then begin
    CheckBox(h2,v+=16,0,"Include #Cheques#",Checks);
  end;
  if (HasModSL) then begin
    EndFrame;
  end;
  if (HasModCO) then begin
    ButtonFrame(h=20,vm=(v+40),420,2,"Contract and Rental Quotations");
    CheckBox(h=30,v+=(vs+20),0,"Include Contract and Rental Quotations",ContQuote);
    CheckBox(h2,v+=17,0,"Include Rejected",TermCQ);
    EditField(h3,v,40,"Number of Contract Quotations",Normal,NrOfCQ,false,0);
    ButtonFrame(20,vm=(v+40),420,2,"Contracts");
    CheckBox(h=30,v+=(vs+20),0,"Include Contracts",Contract);
    EditField(h3,v=v-1,40,"Contract Class",Normal,ContractClass,false,ContractClassSClass);
    CheckBox(h2,v+=17,0,"Include Not OK",NotOKCO);
    EditField(h3,v+1,40,"Number of Contracts",Normal,NrOfCO,false,0);
//  CheckBox(h,v+=vs+10,0,"Credit History",PaymentHistory);//available for evryone
  end;
  if (HasAdvancedCRM) then begin
    ButtonFrame(20,vm=(v+40),420,2,"Messages");
    CheckBox(h=30,v+=(vs+20),0,"Include Messages",SMSes);
    EditField(h3,v,40,"Number of #SMS#'s",Normal,NrOfSMS,false,0);
  end;
  if (HasAdvancedCRM) then begin
    Tile(tilenr,121,true,tilenr,CustItemMonthNr); tilenr = tilenr + 1;
    if (StandardHansa==false) then begin
      ButtonFrame(20,v=50,420,1,"Monthly Balances");
      CheckBox(h=30,v,0,"Include Monthly Balances (12 months)",MonthBal);
      ButtonFrame(20,vm=(v+45),420,1,"Customer Item Statistics");
      CheckBox(h=30,v+=(vs+25),0,"Include Customer Item",CustItem);
      EditField(h3,v,40,"Number of Months",Normal,CustItemMonthNr,false,0);
    end;
  end;
  if (HasModQT) then begin
    if (StandardHansa==false) then begin
      ButtonFrame(20,vm=(v+45),420,2,"Quotations");
      CheckBox(h=30,v+=(vs+25),0,"Include Quotations",Quotations);
    end else begin
      ButtonFrame(20,v=30,420,2,"Quotations");
      CheckBox(h=30,v,0,"Include Quotations",Quotations);
    end;
    EditField(h3,v=v-1,40,"Quotation Class",Normal,QTClass,false,QuoteClassSClass);
    EditField(h3,v+=vs2,40,"Number of Quotations",Normal,NrOfQT,false,0);
  end;
  if (HasModSO) then begin
    ButtonFrame(20,vm=(v+40),420,2,"Orders");
    CheckBox(h=30,v+=(vs+20),0,"Include Orders",Orders);
    EditField(h3,v=v-1,40,"Order Class",Normal,ORClass,false,OrderClassSClass);
    EditField(h3,v+=vs2,40,"Number of Orders",Normal,NrOfOR,false,0);
  end;
  if (HasModPOS) then begin
    ButtonFrame(20,vm=(v+45),420,2,"POS Invoices");
    CheckBox(h=20,v+=(vs+25),0,"Include POS Invoices",IVCash);
    EditField(h3,v+=vs2,40,"Number of POS Invoices",Normal,NrOfIVCash,false,0);
  end;
  if (HasModCRM) then begin
    ButtonFrame(20,vm=(v+40),420,1,"Exclude");
    EditField(h+80,v+=(vs+20),100,"Activity Types",Normal,ExcludeActTypes,false,ActTypeSClass);
  end;

  if (HasModTS or HasModRent or HasModSVO) then begin
    Tile(tilenr,121,true,tilenr,NrOfPR); tilenr = tilenr + 1;
    h=20; v=20;
  end;
  if (HasModTS) then begin
    ButtonFrame(h,v,420,1,"Projects");
    CheckBox(h2=30,v,0,"Include Projects",Projects);
    EditField(h3,v,40,"Number of Projects",Normal,NrOfPR,false,0);
    ButtonFrame(h,vm=(v+40),420,1,"Project Budgets");
    CheckBox(h2,v+=(vs+20),0,"Include Project Budgets",ProjectBudgets);
    EditField(h3,v,40,"Number of Project Budgets",Normal,NrOfTBBU,false,0);
  end;
  if (HasModRent) then begin
    ButtonFrame(h,vm=(v+40),420,1,"Agreements");
    CheckBox(h2,v+=(vs+20),0,"Include Agreements",Agreements);
    EditField(h3,v,40,"Number of Agreements",Normal,NrOfAgreements,false,0);
    ButtonFrame(h,vm=(v+40),420,1,"Rental Reservations");
    CheckBox(h2,v+=(vs+20),0,"Include Rental Reservations",RentalReservations);
    EditField(h3,v,40,"Number of Rental Reservations",Normal,NrOfRentRes,false,0);
  end;
  if (HasModSVO) then begin
    ButtonFrame(h,vm=(v+40),420,1,"Service Orders");
    CheckBox(h2,v+=(vs+20),0,"Include Service Orders",ServiceOrders);
    EditField(h3,v,40,"Number of Service Orders",Normal,NrOfSVO,false,0);
    ButtonFrame(h,vm=(v+40),420,1,"Work Sheets");
    CheckBox(h2,v+=(vs+20),0,"Include Work Sheets",WorkSheets);
    EditField(h3,v,40,"Number of Work Sheets",Normal,NrOfWS,false,0);
    ButtonFrame(h,vm=(v+40),420,1,"Other");
    CheckBox(h2,v+=(vs+20),0,"Show Relations with other Contacts",ContactRelations);
  end;
  EndWindow;
end;

window BLT_WeightSetTClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vm,vs;
  v = 6; vs = 20; h = 150;

  WindowBegin("Weighing machine settings",BLT_WeightSetTClass,CGSbl,ItemSettingType);
  Sizeable(-1,-1,-1,0);
  SetWRect(20,80,480,320);
  SetBlid(BLT_WeightSetBlock);
  EditField(h,v=10,100,"Port",Normal,Port,false,0);
  EditField(h,v+=vs,100,"Port name",Normal,PortCode,false,0);
  EditField(h,v+=vs,100,"Baud rate",Normal,BaudRate,false,0);
  EditField(h,v+=vs,100,"Parity",Normal,Parity,false,0);
  EditField(h,v+=vs,100,"DataLength",Normal,DataLength,false,0);
  EditField(h,v+=vs,100,"StopBits",Normal,StopBits,false,0);
  EditField(h,v+=vs,100,"FlowControl",Normal,FlowControl,false,0);
  EndWindow;

end;

window BLT_SyncAllScannerVClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vm,vs;

  WindowBegin("Synchronize scanners",BLT_SyncAllScannerVClass,CGMnt,RcType);
    SetWRect(20,80,450,150);
    PeriodField(h=100,v=10,"Period");
    ButtonFrame(h,v+=40,140,2,"Include");
    CheckBox(h,v,0,"Exported",flags[0]);
    CheckBox(h,v+=16,0,"Not exported",flags[1]);
    ButtonFrame(h,v+=40,140,5,"Synchronize");
    CheckBox(h,v,0,"Items",flags[2]);
    CheckBox(h,v+=16,0,"Delivery export",flags[3]);
    CheckBox(h,v+=16,0,"Sales order export",flags[7]);
    CheckBox(h,v+=16,0,"Goods receipts export",flags[4]);
    CheckBox(h,v+=16,0,"Delivery import",flags[5]);
    CheckBox(h,v+=16,0,"Goods receipts import",flags[6]);
  EndWindow;

  return;
end;

window BLT_EDISyncVClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vm,vs;

  WindowBegin("EDI invoice sync.",BLT_EDISyncVClass,CGMnt,RcType);
    SetWRect(20,80,450,150);
    PeriodField(h=100,v=10,"Period");
    EditFieldTL(h,v+=20,100,"Invoice",M4Long,Normal,0,long1,false,IVSClass);
    CheckBox(h,v+=20,0,"Only not sent",flags[0]);
  EndWindow;

  return;
end;

window IVSClass:8
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real pos;
  Boolean acptf;

  WindowBegin("Invoices",IVSClass,CGslist,-);
  pos = 920;
  SetWRect(20,80,pos,298);
  Sizeable(-1,-1,0,0);
  SpawnClass(IVDClass);
  UseView(IVVc);
  FormName(PrintIVL);
  RecordList(4,17,-21,-39);
  RlColKey(4,4,"No.",SerNr,false,SerNr);
  RlColKey(79,79,"OK",OKFlag,false,OKFlag);
  RlColKey(111,111,"EDI",SentToEDI,false,SentToEDI);
  RlColKey(141,141,"Invoice Date",InvDate,false,InvDate);
  RlColKey(221,221,"Deliv. date",ServiceDelDate,false,ServiceDelDate);
  RlColKey(291,291,"Official No.",OfficialSerNr,false,OfficialSerNr);
  RlColKey(381,381,"Order No.",OrderNr,false,OrderNr);
  pos = 451;
  RlColKey(pos,pos,"Del. Address",ShipAddr1,false,ShipAddr1); pos = pos + 150; //EBS
  RlColKey(pos,pos,"Customer",CustCode,false,CustCode); pos = pos + 60;
  RlColKey(pos,pos,"Name",Addr0,false,Name);
  if (acptf) then begin
    CalculatedColumn(-230,-230,"Appr.","IVLClassAcceptanceStatus",false);
  end;
  CalculatedColumn(-190,-190,"Brutto","IVLClassCalcBruttoWeight",true);
  RlColKey(-130,-130,"Total",Sum1,true,Sum1);
  RlCol(-60,-60,"",CredMark,true);
  if (HasMultiCurrency or HasBase2) then begin
    RlCol(-40,-40,"Cur.",CurncyCode,true);
  end;
  RlCol(-1,-1,"",Invalid,true);
  SearchField("Search");
  if (HasLimitedAccess) then begin
    BrowseSubsetButton(-40,-15);
  end;
  EndWindow;
end;

window BLT_INSClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v;
  WindowBegin("Paste item",BLT_INSClass,CGother,HBlRecType);
  SetWRect(40,80,750,298);
  Sizeable(-1,-1,-1,0);
  v = 6;
  ToolBar;
  HalPushButton(-320,v,-220,v+10,"BLT_INSClassShowAllItemsBtn","All items");
  EndToolBar;
  DataList(1,0,-17,-1,"item_in_pricelist");
  DataListColumn(1,8,105,AdjLeft,"code","Code",M4Code);
  DataListColumn(1,110,195,AdjLeft,"group","Group",M4Code);
  DataListColumn(1,200,-215,AdjLeft,"description","Description",M4Str);
  DataListColumn(1,-210,-110,AdjRight,"alternativecode","Alt. Code",M4Str);
  DataListColumn(1,-105,-60,AdjRight,"uprice1","Price",M4Val);
  DataListColumn(1,-55,-10,AdjRight,"instock","In stock",M4UVal);
  SearchField("Search");
  EndWindow;
end;

window SerialNrSClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  WindowBegin("Paste Serial Number",SerialNrSClass,CGother,HBlRecType);
  SetWRect(240,80,800,348);
  StringList(9,9,-19,-19);
  SearchField("Search");
  EndWindow;
end;

window CUINDClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h2,v,vs;
  WindowBegin("Customer Item",CUINDClass,CGview,-);
  SetWRect(64,80,609,160);
  UseView(CUINVc);
  v = 6; vs = 20; h = 120; h2 = 280;
  EditField(h,v, 100,"Customer",Normal,CustCode,false,CUSClass);
  EditField(h2,v,-40,"Name",Normal,CustName,false,0);
  EditField(h,v+=vs, 100,"Item",Normal,ArtCode,false,INSClass);
  EditField(h2,v,-40,"Name",Normal,ArtName,false,0);
  EditField(h,v+=vs, 100,"Customer Item No.",Normal,CustArtCode,false,0);
  EditField(h,v+=vs, 50,"Min best before days",Normal,BLT_MinDays,true,0); //EBS
  EndWindow;
end;

window BLT_UpdatePIPriceDClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vs;

  WindowBegin("Update prices",BLT_UpdatePIPriceDClass,CGview,-);
  SetWRect(20,100,530,200);
  UseView(BLT_UpdatePIPriceVc);
  Sizeable(-1,-1,0,0); //EBS
  h = 120; v = 6; vs = 20;
  EditField(h,v,160,"Nr.",ViewOnly,SerNr,false,0);
  EditField(h,v+=vs,100,"Supplier",Normal,VECode,false,VESClass);
  EditField(h+160,v,-40,"Name",Normal,VEName,false,0);
  MatrixBegin(4,v+=40,-32,-40,-,100);
  MatColTL(1,24,"Item",0,M4Code,ViewOnly,20,ArtCode,false,INSClass);
  MatColTL(1,104,"Name",0,M4Str,ViewOnly,255,Spec,false,0);
  MatColTL(1,-200,"Old price",0,M45Val,ViewOnly,0,OldPrice,false,0);
  MatCol(1,-100,"New price",0,NewPrice,true,0);
  EndMatrix;
  SpecialMenu("Update prices",'',0,"BLT_UpdatePricessm");
  EndWindow;

end;

window BLT_UpdatePIPriceLClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  WindowBegin("Update prices",BLT_UpdatePIPriceLClass,CGmlist,-);
  SpawnClass(BLT_UpdatePIPriceDClass);
  SetWRect(64,80,509,320);
  Sizeable(-1,-1,0,0);
  UseView(BLT_UpdatePIPriceVc);
  RecordList(4,17,-21,-39);
  RlColKey(4,2,"Nr.",SerNr,false,SerNr);
  RlColKey(100,100, "Supplier",VECode,false,VECode);
  RlCol(200,200,"Name",VEName,false);
  SearchField("Search");
  EndWindow;
end;

window SalesForecastDClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h2,v,vs;
  WindowBegin("Sales Forecast",SalesForecastDClass,CGview,-);
  UseView(SalesForecastVc);
  SetWRect(20,80,600,340); //EBS edit
  Sizeable(-1,-1,0,0);
  vs = 20; h = 80; h2 = 230;
  EditField(h,v=10,80,"Code",St_i,Code,false,TSerSClass);
  EditField(h2,v,50,"Version",ViewOnly,Version,false,0);
  HalPushButton(400,v-8,400+100,v-8+20,"SalesForecastNewVersion","New Version");
  EditField(h,v+=vs,-40,"Description",Normal,Comment,false,0);
  EditField(h,v+=20,80,"Period",Normal,StartDate,false,PasteCurDate);
  EditField(h2,v,80,"-",Normal,EndDate,false,PasteCurDate);
  EditField(613,v,70,"Creation Date",Normal,CreateDate,false,PasteCurDate);
  EditField(613,v+=vs,70,"Last Changed",Normal,OKDate,false,PasteCurDate);
  EditField(h,v,80,"Row Type",Normal,RowType,false,SetSClass);
  EditField(h2,v,80,"Class",Normal,Class,false,ForecastClassSClass);
  EditField(h2+160,v,80,"Customer",Normal,BLT_CustCode,false,CUSClass); //EBS
  CheckBox(25,-21,0,"OK",OKFlag);
  CheckBox(100,-21,0,"Closed",Closed);
  EditField(-290,-21,70,"Total qty",ViewOnly,BLT_TotQty,true,0); //EBS
  EditField(-110,-21,70,"Total sum",ViewOnly,BLT_TotSum,true,0); //EBS
  StaticText(h=47,v+=39,"Item/",false);
  h = 8; v=v+19;
  MatrixBegin(h,v,-40,-22,-,1000);
  MatCol(1,h=34,"Item Group",60,ItemCode,false,ITSClass);
  MatCol(1,h+=80,"Description",0,Spec,false,0);
  MatCol(1,-260,"Date",0,RowDate,false,PasteCurDate); //EBS
  MatCol(1,-170,"Qty",0,Qty,true,0);
  MatCol(1,-100,"Sum",0,Sum,true,0);
  InsertRowTest;
  DeleteRowTest;
  EndMatrix;
  EndWindow;
end;

window POPlanDClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h2,h3,t,v,vs;
  WindowBegin("Purchase Order Plan",POPlanDClass,CGview,-);
  UseView(POPlanVc);
  SetWRect(20,80,527,340);
  Sizeable(-1,-1,0,0);
  vs = 20; h = 80; h2 = 230; h3 = 430;
  EditField(h,v=10,50,"No.",St_i,SerNr,false,TSerSClass);
  EditField(h2,v,-40,"Description",Normal,Comment,false,0);
  EditField(h,v+=20,80,"Period",Normal,StartDate,false,PasteCurDate);
  EditField(h2,v,80,"-",Normal,EndDate,false,PasteCurDate);
  EditField(h3,v,80,"#Supplier#",Normal,VECode,false,VESClass);
  EditField(550,v,80,"Date",Normal,EarliestPODate,false,PasteCurDate);
  CheckBox(25,-21,0,"OK",OKFlag);
  CheckBox(100,-21,0,"Closed",Closed);
  h = 8; v=v+45;
  MatrixBegin(h,v,-50,-22,-,1000);
  Flip(0);
  MatCol(t=1,h=34,"Item",60,ItemCode,false,INSClass);
  MatCol(t,h+=80,"Description",0,Spec,false,0);
  Flip(1);
  MatCol(t=1,-400,"Order Date",0,POOrdDate,false,0);
  MatCol(t,-320,"Del. Days",0,DaysToGet,true,0);
  MatCol(t,-260,"Needed Date",0,NeededDate,false,PasteCurDate);
  MatCol(t,-180,"Suggested Qty",0,SugQty,true,0);
  MatCol(t,-90,"Adjusted Qty",0,Qty,true,0);
  Flip(2);
  MatCol(t=1,-340,"#Supplier#",0,VECode,false,BLT_VESClass); //EBS edit
  MatCol(t=1,-240,"Del.Days",0,DaysToGet,true,0);
  MatCol(t,-180,"Suggested Qty",0,SugQty,true,0);
  MatCol(t,-90,"Adjusted Qty",0,Qty,true,0);
  Flip(3);
  MatCol(t=1,-370,"Item to Order",0,FromItemCode,false,INSClass);
  MatCol(t=1,-270,"Purch. Ord. No.",0,PONr,false,0);
  MatCol(t,-180,"Suggested Qty",0,SugQty,true,0);
  MatCol(t,-90,"Adjusted Qty",0,Qty,true,0);
  RowMenuBegin("");
  RowMenuItem(0,"Split Line",'l','l',0,"POPlanSplitDsm");
  EndRowMenu;
  EndMatrix;
  VTab(-35,v,-16,v+vs,ToolFlip,1,"A");
  v=v+vs;  VTab(-35,v,-16,v+vs,ToolFlip,2,"B");
  v=v+vs;  VTab(-35,v,-16,v+vs,ToolFlip,3,"C");
  SpecialMenu("Purchase Order Plan Info",'o',0,"POPlanInfoDsm");
  SpecMenuGroup("",kSpecMenuGroupTypeExtendedPlusMenu,0);
  SpecialMenu("Purchase Order",'L',0,"POFromPOPlanDsm");
  EndWindow;
end;

window BLT_VESClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v;
  WindowBegin("Paste supplier",BLT_VESClass,CGother,HBlRecType);
  SetWRect(40,80,750,298);
  Sizeable(-1,-1,-1,0);
  v = 6;
  DataList(1,0,-17,-1,"ve_in_pivc");
  DataListColumn(1,8,105,AdjLeft,"code","No.",M4Code);
  DataListColumn(1,110,195,AdjLeft,"searchkey","Short",M4Str);
  DataListColumn(1,200,265,AdjLeft,"vecat","Cat.",M4Str);
  DataListColumn(1,200,-10,AdjLeft,"name","Name",M4Str);
  SearchField("Search");
  EndWindow;
end;

window SalesForecastRClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vm,vs;
  WindowBegin("Specify Sales Forecast",SalesForecastRClass,CGRcW,RcType);
  SetWRect(90,80,518,180);
  v = 6; vs = 20; h = 140;
  PeriodField(h,v,"Period");
  EditFieldTL(h,v+=20, 150,"Item",M4UStr,Normal,41,f1,false,INSClass);
  if (HasItemGroups) then begin
    EditFieldTL(h,v+=vs,150,"Item Group",M4UStr,Normal,50,f3,false,ITSClass);
  end;
  if (HasItemClassification) then begin
    EditFieldTL(h,v+=vs,150,"Item Classification",M4UStr,Normal,100,f2,false,DISClass);
  end;
  EditFieldTL(h,v+=20, 150,"Forecast Class",M4UStr,Normal,5,LastAcc,false,ForecastClassSClass);
  ButtonFrame(h,vm=(v+=41),123,2,"Specify");
  RadioButton(h,v,0,0,"Quantity",flags[1]);
  RadioButton(h,v+=16,1,0,"Sum",flags[1]);
  //EBS -->
  ButtonFrame(h,v+=41,123,2,"Function");
  RadioButton(h,v,0,0,"Overview",ArtMode);
  RadioButton(h,v+=16,1,0,"Detailed",ArtMode);
  //EBS <--
  EndWindow;
end;

window BLT_SHAndIVImportVClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vm,vs;

  WindowBegin("Import delivery notes and invoices",BLT_SHAndIVImportVClass,CGMnt,RcType);
    SetWRect(20,80,450,150);
    EditFieldTL(h=100,v=10, 150,"Period",M4UStr,Normal,21,Stext,false,PerSClass);
    CheckBox(h,v+=20,0,"Run import for all companies",flags[0]);
  EndWindow;

  return;
end;

window ORSerTClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  WindowBegin("Number Series - Orders",ORSerTClass,CGHbl,HBlRecType);
  SetBlid(ORSerBlock);
  TSERW_ENG;
  EndWindow;
end;


window POSerTClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  WindowBegin("Number Series - #Purchase Orders#",POSerTClass,CGHbl,HBlRecType);
  SetBlid(POSerBlock);
  TSERW_ENG;
  EndWindow;
end;

window INrsRClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h2,h3,h4,v,vm,vs;
  WindowBegin("Specify Item History",INrsRClass,CGRcW,RcType);
  SetWRect(20,80,550,460);
  v = 6; vs = 20; h = 160; h2 = 30; h3 = 180; h4 = 340;
  PeriodField(h,v,"Period");
  EditFieldTL(h,v+=vs,150,"Item No.",M4UStr,Normal,50,f1,false,INSClass);
  if (HasItemGroups) then begin
    EditFieldTL(h,v+=vs,150,"Item Group",M4UStr,Normal,5,f3,false,ITSClass);
  end;
  if (HasItemClassification) then begin
    EditFieldTL(h,v+=vs,150,"Item Classification", M4UStr,Normal,60,f4,false,DISClass);
    EditFieldTL(h,v+=vs,150,"Classification Type",M4UStr,Normal,60,f5,false,CTypeSClass);
  end;
  if (HasMultiLocations) then begin
    EditFieldTL(h,v+=vs,150,"Location",M4Code,Normal,21,f6,false,LocationSClass);
    if (StandardHansa==false and IsEnterprise) then begin
      EditFieldTL(h,v+=vs,150,"Location Group",M4Code,Normal,10,f7,false,LocGrSClass);
      EditFieldTL(h,v+=vs,150,"Location Classification",M4List,Normal,200,f8,false,LocClSClass);
    end;
  end;
  if (HasDepartments) then begin
    EditFieldTL(h,v+=vs,150,"Department",M4UStr,Normal,10,AccStr,false,DepSClass);
  end;
  if (HasModPO) then begin
    EditFieldTL(h,v+=vs,150,"Default #Supplier#",M4UStr,Normal,10,f2,false,VESClass);
  end;
  EditFieldTL(h,v+=vs ,150,"Customer",M4UStr,Normal,50,f12,false,CUSClass);
  if (IsEnterprise) then begin
    CheckBox(h2,v+=26,0,"Only #Stocked# Items",flags[11]);
//  CheckBox(h2,v+=16,0,"Show Quantity 2",flags[12]);
    CheckBox(h2,v+=16,0,"Show Balance for Items with no History",flags[13]);
    CheckBox(h2,v+=16,0,"Include Future Records",flags[14]);
  end;
  if (HasMultiLocations) then begin
    CheckBox(h2,v+=16,0,"Per Location",flags[15]);
  end;
  if (HasSerialNumbers) then begin
    CheckBox(h2,v+=16,0,"Include Serial No. Details",AccSpec);
  end;
  if (HasLocalization("ARG,MEX,USA") and IsStandardProduct==false) then begin
    CheckBox(h2,v+=16,0,"Include Dispatch Number",flags[22]);
  end;
//  CheckBox(h2,v+=16,0,"Include History Before #Stocktaking#",flags[19]);
  ButtonFrame(h2,vm=(v+=38),130,2,"Function");
  RadioButton(h2,v,0,0,"Overview",flags[9]);
  RadioButton(h2,v+=16,1,0,"Detailed",flags[9]);
  if (IsEnterprise) then begin
    ButtonFrame(h2,v+=40,130,2,"Sorting");
    RadioButton(h2,v,0,0,"Cost Date",flags[10]);
    RadioButton(h2,v+=16,1,0,"Trans. Date",flags[10]);
  end;
  ButtonFrame(h3,v=vm,140,3,"Function");
  RadioButton(h3,v,0,0,"Quantities",ArtMode);
  if (HasVarieties) then begin
    RadioButton(h3,v+=16,3,0,"Quantities & Varieties",ArtMode);
  end;
  RadioButton(h3,v+=16,1,0,"Quantities & Values",ArtMode); // 2 Has some code for it, don't know what....
  EndFrame;
  if (HasSecondQuantity) then begin
    ButtonFrame(h4,v=vm,150,3,"Function");//  CheckBox(20,v+=16,0,"Show Quantity 2",flags[12]);
    RadioButton(h4,v,0,0,"Don't show Quantity 2",flags[12]);
    RadioButton(h4,v+=16,1,0,"Show Quantity 2",flags[12]);
    RadioButton(h4,v+=16,2,0,"Show Coefficient",flags[12]);
    ButtonFrame(h4,v=30,160,12,"Registers");
  end else begin
    ButtonFrame(h4,v=vm,160,12,"Registers");
  end;
  if (HasModSO) then begin
    CheckBox(h4,v,0,"Deliveries",flags[2]); v = v + 16;
  end;
  CheckBox(h4,v,0,"Goods Receipts",flags[3]); v = v + 16;
  CheckBox(h4,v,0,"Invoices",flags[1]); v = v + 16;
//  CheckBox(h4,v,0,"POS Invoices",flags[16]); v = v + 16;
  if (HasModProd) then begin
    if (StandardHansa==false) then begin
      CheckBox(h4,v,0,"Production Orders",flags[18]); v = v + 16;
    end;
    CheckBox(h4,v,0,"Productions",flags[5]); v = v + 16;
    if (StandardHansa==false) then begin
      CheckBox(h4,v,0,"Production Operations",flags[20]); v = v + 16;
    end;
  end;
  if (HasAdvancedStock) then begin
    CheckBox(h4,v,0,"Returned Goods",flags[8]); v = v + 16;
    CheckBox(h4,v,0,"Returned Goods to #Supp.#",flags[19]); v = v + 16;
  end;
  CheckBox(h4,v,0,"#Stock Depreciations#",flags[6]); v = v + 16;
  if (IsEnterprise or (HasLocalization("PRT") and HasMultiLocations)) then begin
    CheckBox(h4,v,0,"#Stock# Movements",flags[4]); v = v + 16;
  end;
  if (HasAdvancedStock) then begin
    CheckBox(h4,v,0,"#Stock# Revaluations",flags[22]); v = v + 16;
  end;
  if (HasModRent) then begin
    CheckBox(h4,v,0,"#Stock# Transfers",flags[17]); v = v + 16;
  end;
  if (HasModSVO) then begin
    CheckBox(h4,v,0,"Work Sheets",flags[7]); v = v + 16;
  end;
  EndFrame;
  EndWindow;
end;

window AddORItemTClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h2,h3,v,vs;

  WindowBegin("Additional import items",AddORItemTClass,CGHbl,HBlRecType);
  SetBlid(AddORItemBlock);
  SetWRect(20,80,500,400);
  Sizeable(-1,-1,0,0);
  h = 8; v = 25;
  MatrixBegin(h,v,-31,-10,-,30);
  MatCol(1,h=30,"Item",0,ItemCode,false,INSClass);
  MatCol(1,h=210,"Quantity",0,Quant,false,0);
  EndMatrix;
  EndWindow;

  return;
end;

window ORRClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real v;
  WindowBegin("Specify Orders",ORRClass,CGRcW,RcType);
  SetWRect(20,80,400,150);
  EditFieldTL(120,v=6, 150,"No.",   M4UStr,Normal,30,f1,false,0);
  EditFieldTL(120,v+=20, 150,"Plan. Delivery date",M4Date,Normal,10,d1,false,PasteCurDate); //EBS
  CheckBox(120,v+=30,0,"Unprinted Only",OnlyUnprntd);
  EndWindow;
end;

window IVJRClass:3
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h2,hs,v,v3,vm,vs,l;

  WindowBegin("Specify Invoice Journal",IVJRClass,CGRcW,RcType);
  if (IsEnterprise) then begin
    SetWRect(20,80,520,390);
  end else begin
    SetWRect(20,80,460,390);
  end;
  vs = 20;
  hs = 148;
  if (IsEnterprise) then begin
    if (HasLocalization("ARG,HRV,LTU,LVA,POL,PRT,RUS") or (HasOfficialSerNr and HasPreferedOfficialSerNr==false))  then begin
      Tile(0,40,false,"",f1);
    end else begin
      Tile(0,20,false,"",f1);
    end;
  end;

  v = 6; h = 150;
  if (HasPreferedOfficialSerNr) then begin
    EditFieldTL(h,v,150,"Official No.",M4UStr,Normal,41,f6,false,0);
    v = v + 20;
    if (HasLocalization("POL,PRT")==false)  then begin
      EditFieldTL(h,v,150,"Invoice No.",M4Str,Normal,30,f1,false,0);
      v = v + 20;
    end;
  end else begin
    EditFieldTL(h,v,150,"Invoice No.",M4Str,Normal,30,f1,false,0);
    v = v + 20;
    if (HasOfficialSerNr or HasInvoiceOfficialSerNr) then begin
      EditFieldTL(h,v,150,"Official No.",M4UStr,Normal,41,f6,false,0);
      v = v + 20;
    end;
  end;

  if (IsEnterprise) then begin
    TileButtons(v,2);
    Tile(1,380,false,"1",f2);
    v = 6;
    vm = v;
  end;
  PeriodField(h,v,"Period");
  EditFieldTL(h,v+=vs, 150,"Credited Invoice Period",M4UStr,Normal,21,Period2Str2,false,PerSClass);
  EditFieldTL(h,v+=vs ,150,"Customer",M4UStr,Normal,50,f2,false,CUSClass);
  if (HasCategories) then begin
    EditFieldTL(h,v+=vs ,70,"Customer Category",M4UStr,Normal,5,f3,false,CCatSClass);
  end;
  if (HasContactClassification) then begin
    EditFieldTL(h,v+=vs ,70,"Classification Types",M4UStr,Normal,60,f5,false,CTypeSClass);
    EditFieldTL(h,v+=vs ,70,"Customer Classification",M4UStr,Normal,30,f4,false,CClassSClass);
  end;
  if (HasSalesman or HasSalesmanBonus) then begin
    EditFieldTL(h,v+=vs ,70,"#Salesman#",M4UStr,Normal,10,AccStr,false,UserSClass);
  end;
  if (HasSalesGroup) then begin
    EditFieldTL(h,v+=vs ,50,"Sales Group",M4UStr,Normal,10,f14,false,SalesGroupSClass);
  end;
  if (HasObjects) then begin
    EditFieldTL(h,v+=vs,250,"Tag/Object",M4UStr,Normal,60,ObjStr,false,ObjSClass);
    EditFieldTL(h,v+=vs,50,"Tag/Object Type",M4UStr,Normal,5,ObjType,false,OTSClass);
    EditFieldTL(h,v+=vs,250,"Tags/Objects (from Row)",M4UStr,Normal,60,f11,false,ObjSClass);
  end;
  if (HasModTS or IsEnterprise) then begin
    EditFieldTL(h,v+=vs,50,"Project",M4UStr,Normal,20,FirstAcc,false,PRSClass);
  end;
  if (HasMultiLocations) then begin
    EditFieldTL(h,v+=vs,70,"Location",M4UStr,Normal,60,LastAcc,false,LocationSClass);
  end;
  EditFieldTL(h,v+=vs,70,"Route",M4Code,Normal,25,f15,false,DelRouteSClass); //EBS
  if (IsEnterprise) then begin
    EditFieldTL(h,v+=vs,50,"Payment Term",M4UStr,Normal,5,TransStr,false,PDSClass);
    EditFieldTL(h,v+=vs,50,"Orig. Customer",M4Code,Normal,20,f12,false,CUSClass);
  end;
  if (IsEnterprise) then begin
    EditFieldTL(h,v3=(v+=vs),50,"Min Amount",M4Val,Normal,0,vals0,false,0);
  end else begin
    EditFieldTL(h,v+=vs,100,"#VAT# Code",M4UStr,Normal,100,f13,false,VATCodeSClass);
  end;
  if (IsEnterprise) then begin
    h = 320;
    v = vm + 10;
  end else begin
    v = v + 40;
    v3 = v + 20;
    vm = v;
    h = 30;
  end;
  ButtonFrame(h,v,123,5,"Status");
  CheckBox(h,v,0,"Not OKed",flags[1]);
  CheckBox(h,v+=16,0,"O_Ked",flags[2]);
  if (IsEnterprise) then begin
    RadioButton(h,v+=16,0,0,"Include Disputed",flags[7]);
    RadioButton(h,v+=16,1,0,"Exclude Disputed",flags[7]);
    RadioButton(h,v+=16,2,0,"Disputed Only",flags[7]);
  end;
  EndFrame;

  v3 = v3 + 41;
  v = v3;
  if (IsEnterprise) then begin
    vm = v;
    h = 148;
  end else begin
    h = 30;
  end;
  ButtonFrame(h,v,123,3,"Function");
  RadioButton(h,v,0,0,"Overview",ArtMode);
  RadioButton(h,v+=16,1,0,"Detailed",ArtMode);
  if (HasMultiCurrency) then begin
    RadioButton(h,v+=16,4,0,"Overview with Cur.",ArtMode);
  end;
  EndFrame;
  if (IsEnterprise==false and HasBase2) then begin
    CheckBox(h,v+=42,0,"Show Base Currency 1 & 2 Totals",flags[12]);
  end;

  if (IsEnterprise) then begin
    h2 = 320;
    l = 160;
  end else begin
    h2 = h + 148;
    l = 123;
  end;
  ButtonFrame(h2,v=vm,l,5,"Sorting");
  if (HasModNL) then begin
    RadioButton(h2,v,0,0,"Transaction Date",flags[10]);
  end else begin
    RadioButton(h2,v,0,0,"Invoice Date",flags[10]);
  end;
  if (HasLocalization("BRA,POL,PRT")) then begin
    RadioButton(h2,v+=16,5,0,"Official No.",flags[10]);
  end else begin
    RadioButton(h2,v+=16,1,0,"Invoice No.",flags[10]);
  end;
  if (HasMultiLocations) then begin
    RadioButton(h2,v+=16,2,0,"Location (from Header)",flags[10]);
  end;
  if (HasOfficialSerNr or HasInvoiceOfficialSerNr) then begin
    RadioButton(h2,v+=16,3,0,"Overview with Official No.",flags[10]);
  end;
  if (IsEnterprise) then begin
    RadioButton(h2,v+=16,4,0,"Invoice Date",flags[10]);
  end;
  EndFrame;
  if (IsEnterprise) then begin
    Tile(2,330,false,"2",Stext);
    v = 6;
    EditFieldTL(h=150,v,100,"Item Group",M4UStr,Normal,21,Stext,false,ITSClass);
    EditFieldTL(h,v+=vs,150,"Item Classification", M4UStr,Normal,60,Comment,false,DISClass);
    EditFieldTL(h,v+=vs,100,"Item",M4UStr,Normal,41,f10,false,INSClass);
    EditFieldTL(h,v+=vs,100,"Sales Account",M4UStr,Normal,21,f7,false,AccSClass);
    EditFieldTL(h,v+=vs,100,"Debtors Account",M4UStr,Normal,21,f8,false,AccSClass);
    if (StandardHansa==false) then begin
      EditFieldTL(h,v+=vs,100,"Main Partner",M4UStr,Normal,20,f9,false,CUSClass);
    end;
    EditFieldTL(h,v+=vs,100,"#VAT# Code",M4UStr,Normal,100,f13,false,VATCodeSClass);
    //    EditFieldTL(h,v+=vs,50,"Order Class",M4UStr,Normal,5,Stext,false,OrderClassSClass); // no more strings to use....
    ButtonFrame(h=50,vm = (v+=40),123,4,"Invoice Type");
    CheckBox(h,v,0,"Invoices",flags[3]);
    CheckBox(h,v+=16,0,"Cash Notes",flags[4]);
    CheckBox(h,v+=16,0,"#Credit Notes#",flags[5]);
    CheckBox(h,v+=16,0,"I_nterest Inv.",flags[6]);
    CheckBox(h,v+=26,0,"Invoices affecting #S/L# only",flags[19]);
    StaticText(h+17,v+=30,"(ignore Invoice Types)",false);
    CheckBox(h=220,v=vm,0,"Show Comment",flags[11]);
    CheckBox(h,v+=16,0,"Show Base Currency 1 & 2 Totals",flags[12]);
    if (StandardHansa==false) then begin
      CheckBox(h,v+=16,0,"Fiscal Invoices only",flags[13]);
    end;
    CheckBox(h,v+=16,0,"Show Invalidated Invoices",flags[14]);
    CheckBox(h,v+=16,0,"Show #VAT# Amount",flags[15]);
    CheckBox(h,v+=16,0,"Not Printed Invoices only",flags[17]);
    CheckBox(h,v+=16,0,"Include Orig. Customer",flags[18]);
    CheckBox(h,v+=16,0,"Invoices with Total amount equal zero",flags[20]);
    CheckBox(h+=hs,v=vm,0,"Show Official No.",flags[16]);
  end else begin
    ButtonFrame(h+=148,v+=41,123,3,"Invoice Type");
    CheckBox(h,v,0,"Invoices",flags[3]);
    CheckBox(h,v+=16,0,"Cash Notes",flags[4]);
    CheckBox(h,v+=16,0,"#Credit Notes#",flags[5]);
    if (HasLocalization("PRT")) then begin
      CheckBox(h,v+=16,0,"I_nterest Inv.",flags[6]);
    end;
    EndFrame;
    v = v + 24;
    if (HasOfficialSerNr or HasInvoiceOfficialSerNr) then begin
      CheckBox(h,v,0,"Show Official No.",flags[16]); v = v + 16;
    end;
    if (HasLocalization("PRT")) then begin
      CheckBox(h,v,0,"Invoices with Total equal zero",flags[20]);
    end;
  end;
  EndWindow;
end;
